#!/usr/bin/python
from .commandbase import CommandBase
from .commandresult import CommandResult
from .commandbase import ExecutePermission

ApiVersion = 40

#
# The GPS AS flag value.
#

class GpsASFlag:
  On = 0
  Off = 1
  Auto = 2

#
# The simulator state.
#

class SimulatorState:
  StateNone = 0
  StateIdle = 1
  StateStarted = 2
  StateError = 3

#
# The simulator sub-state.
#

class SimulatorSubState:
  SubStateNone = 0
  Idle_ConfigNotValid = 1
  Idle_ConfigValid = 2
  Started_InitPlugins = 3
  Started_InitHardware = 4
  Started_Streaming = 5
  Started_SyncInit = 6
  Started_SlaveSync = 7
  Started_Armed = 8
  Started_SyncStartTime = 9
  Error = 10
  Started_HILSync = 11
  Started_SyncPPSReset = 12
  Started_SyncStart = 13
  Started_WFSlaveInit = 14
  Started_WFMasterInit = 15
  Started_WFSyncPPSReset = 16
  Started_WFSyncStart = 17

#
# The Parity scheme used by a serial port.
#

class SerialPortParity:
  NoParity = 0
  Even = 1
  Odd = 2
  Space = 3
  Mark = 4

#
# The flow control used by a serial port.
#

class SerialPortFlowControl:
  NoFlowControl = 0
  Hardware = 1
  Software = 2

#
# When command succeed.
#
#

class SuccessResult(CommandResult):

  def __init__(self):
    CommandResult.__init__(self, "SuccessResult")

  def isSuccess(self):
    return True

#
# When command failed
#
# Name     Type   Description
# -------- ------ -------------
# ErrorMsg string Error message
#

class FailureResult(CommandResult):

  def __init__(self, errorMsg):
    CommandResult.__init__(self, "FailureResult")
    self.setErrorMsg(errorMsg)

  def isSuccess(self):
    return False

  def errorMsg(self):
    return self.get("ErrorMsg")

  def setErrorMsg(self, value):
    return self.set("ErrorMsg", value)

#
# Undo the last command like Ctrl+Z in the UI
#
#

class UndoCmd(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "UndoCmd")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Redo the last undone command like Ctrl+Shift+Z in the UI
#
#

class RedoCmd(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "RedoCmd")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Get Skydel's Data Folder. The user can changed it in the GUI's Preferences.
#
#

class GetDataFolder(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetDataFolder")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of GetDataFolder.
#
# Name   Type   Description
# ------ ------ ------------------
# Folder string Skydel Data Folder
#

class DataFolderResult(CommandResult):

  def __init__(self, folder):
    CommandResult.__init__(self, "DataFolderResult")
    self.setFolder(folder)

  def isSuccess(self):
    return True

  def folder(self):
    return self.get("Folder")

  def setFolder(self, value):
    return self.set("Folder", value)

#
# Get Skydel version.
#
#

class GetVersion(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetVersion")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of GetVersion.
#
# Name    Type   Description
# ------- ------ --------------
# Version string Skydel version
#

class VersionResult(CommandResult):

  def __init__(self, version):
    CommandResult.__init__(self, "VersionResult")
    self.setVersion(version)

  def isSuccess(self):
    return True

  def version(self):
    return self.get("Version")

  def setVersion(self, value):
    return self.set("Version", value)

#
# Get simulation elapsed time in milliseconds.
#
#

class GetSimulationElapsedTime(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetSimulationElapsedTime")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of GetSimulationElapsedTime.
#
# Name         Type Description
# ------------ ---- -----------------------------------------------------------------------------
# Milliseconds int  Simulation elapsed time in milliseconds. Note: Resolution is limited to 10Hz.
#

class SimulationElapsedTimeResult(CommandResult):

  def __init__(self, milliseconds):
    CommandResult.__init__(self, "SimulationElapsedTimeResult")
    self.setMilliseconds(milliseconds)

  def isSuccess(self):
    return True

  def milliseconds(self):
    return self.get("Milliseconds")

  def setMilliseconds(self, value):
    return self.set("Milliseconds", value)

#
# Create a new configuration.
#
# Name                 Type          Description
# -------------------- ------------- ----------------------------------------------
# DiscardCurrentConfig bool          Discard current config even if it is not saved
# LoadDefaultConfig    optional bool Apply the default configuration
#

class New(CommandBase):

  def __init__(self, discardCurrentConfig, loadDefaultConfig = None):
    CommandBase.__init__(self, "New")
    self.setDiscardCurrentConfig(discardCurrentConfig)
    self.setLoadDefaultConfig(loadDefaultConfig)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE

  def discardCurrentConfig(self):
    return self.get("DiscardCurrentConfig")

  def setDiscardCurrentConfig(self, value):
    return self.set("DiscardCurrentConfig", value)

  def loadDefaultConfig(self):
    return self.get("LoadDefaultConfig")

  def setLoadDefaultConfig(self, value):
    return self.set("LoadDefaultConfig", value)

#
# Save configuration with new name.
#
# Name      Type   Description
# --------- ------ ---------------------------------------------------------------------------------------------------------
# Path      string Configuration path. Automatically add file suffix if missing. If folder not defined, user default folder.
# Overwrite bool   Overwrite existing configuration if is exists
#

class SaveAs(CommandBase):

  def __init__(self, path, overwrite):
    CommandBase.__init__(self, "SaveAs")
    self.setPath(path)
    self.setOverwrite(overwrite)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

  def overwrite(self):
    return self.get("Overwrite")

  def setOverwrite(self, value):
    return self.set("Overwrite", value)

#
# Save configuration.
#
#

class Save(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "Save")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Open configuration.
#
# Name                 Type   Description
# -------------------- ------ ----------------------------------------------------------------------------------------------------
# Path                 string Filename path, Automatically add file suffix if missing. If folder not defined, user default folder.
# DiscardCurrentConfig bool   Discard current config even if it is not saved
#

class Open(CommandBase):

  def __init__(self, path, discardCurrentConfig):
    CommandBase.__init__(self, "Open")
    self.setPath(path)
    self.setDiscardCurrentConfig(discardCurrentConfig)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

  def discardCurrentConfig(self):
    return self.get("DiscardCurrentConfig")

  def setDiscardCurrentConfig(self, value):
    return self.set("DiscardCurrentConfig", value)

#
# Set current configuration as default configuration.
#
#

class SetDefaultConfiguration(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "SetDefaultConfiguration")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Reset the default configuration.
#
#

class ResetDefaultConfiguration(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "ResetDefaultConfiguration")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Clear automate page.
#
#

class ClearAutomatePage(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "ClearAutomatePage")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Start the simulation. Simulation may or may not start depending on the current state of the simulator.
#
#

class Start(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "Start")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

#
# Arm the simulation. Simulation may or may not arm depending on the current state of the simulator.
#
#

class Arm(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "Arm")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Pause vehicle motion during simulation.
#
#

class Pause(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "Pause")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

#
# Resume vehicle motion during simulation.
#
#

class Resume(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "Resume")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

#
# Stop the simulation.
#
#

class Stop(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "Stop")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

#
# Quit/Exit Skydel. Simulation must be stopped to be able to quit Skydel
#
# Name      Type Description
# --------- ---- --------------------------------------------------------
# ForceQuit bool Force to quit Skydel even if current config is not saved
#

class Quit(CommandBase):

  def __init__(self, forceQuit):
    CommandBase.__init__(self, "Quit")
    self.setForceQuit(forceQuit)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE

  def forceQuit(self):
    return self.get("ForceQuit")

  def setForceQuit(self, value):
    return self.set("ForceQuit", value)

#
# Prevent GUI updates while modify the configuration. Use UnlockGUI when done with
# configuration modifications.
#
#

class LockGUI(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "LockGUI")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Resume GUI updates and force one update immediately.
#
#

class UnlockGUI(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "UnlockGUI")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Enable (or disable) RF output for specified satellite. Use SV ID 0 to enabled/disable all satellites.
#
# Name    Type   Description
# ------- ------ ----------------------------------------------------------------
# System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId    int    The satellite's SV ID
# Enabled bool   RF is enabled when value is True
#

class EnableRFOutputForSV(CommandBase):

  def __init__(self, system, svId, enabled):
    CommandBase.__init__(self, "EnableRFOutputForSV")
    self.setSystem(system)
    self.setSvId(svId)
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Tells if the RF output is enabled or disabled for the specified satellite.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId   int    The satellite's SV ID
#

class IsRFOutputEnabled(CommandBase):

  def __init__(self, system, svId):
    CommandBase.__init__(self, "IsRFOutputEnabled")
    self.setSystem(system)
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Result of IsRFOutputEnabled.
#
# Name    Type   Description
# ------- ------ ----------------------------------------------------------------
# System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId    int    The satellite's SV ID
# Enabled bool   RF is enabled when value is True
#

class IsRFOutputEnabledResult(CommandResult):

  def __init__(self, system, svId, enabled):
    CommandResult.__init__(self, "IsRFOutputEnabledResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Enable (or disable) RF output for each satellite individually.
#
# Name    Type       Description
# ------- ---------- -------------------------------------------------------------------------------------------------
# System  string     "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Enabled array bool RF is enabled when value is True. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc).
#

class EnableRFOutputForEachSV(CommandBase):

  def __init__(self, system, enabled):
    CommandBase.__init__(self, "EnableRFOutputForEachSV")
    self.setSystem(system)
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Tells if the RF output is enabled or disabled for each satellite.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class IsRFOutputEnabledForEachSV(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "IsRFOutputEnabledForEachSV")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Result of IsRFOutputEnabledForEachSV.
#
# Name    Type       Description
# ------- ---------- -------------------------------------------------------------------------------------------------
# System  string     "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Enabled array bool RF is enabled when value is True. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc).
#

class IsRFOutputEnabledForEachSVResult(CommandResult):

  def __init__(self, system, enabled):
    CommandResult.__init__(self, "IsRFOutputEnabledForEachSVResult")
    self.setSystem(system)
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Enable (or disable) signal for specified satellite.
#
# Name    Type   Description
# ------- ------ -------------------------------------------------------------------------------------------------
# Signal  string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
#                                      "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
#                                      "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "SBASL5", "QZSSL1CA"
#                                      "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
# SvId    int    The satellite's SV ID (use 0 for all constellation's satellites)
# Enabled bool   Signal is enabled when value is True
#

class EnableSignalForSV(CommandBase):

  def __init__(self, signal, svId, enabled):
    CommandBase.__init__(self, "EnableSignalForSV")
    self.setSignal(signal)
    self.setSvId(svId)
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Tells if the signal is enabled or disabled.
#
# Name   Type   Description
# ------ ------ -------------------------------------------------------------------------------------------------
# Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
#                                     "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
#                                     "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "SBASL5", "QZSSL1CA"
#                                     "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
# SvId   int    The satellite's SV ID (use 0 for all constellation's satellites)
#

class IsSignalEnabledForSV(CommandBase):

  def __init__(self, signal, svId):
    CommandBase.__init__(self, "IsSignalEnabledForSV")
    self.setSignal(signal)
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Result of IsSignalEnabledForSV.
#
# Name    Type   Description
# ------- ------ -------------------------------------------------------------------------------------------------
# Signal  string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
#                                      "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
#                                      "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "SBASL5", "QZSSL1CA"
#                                      "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
# SvId    int    The satellite's SV ID (use 0 for all constellation's satellites)
# Enabled bool   Signal is enabled when value is True
#

class IsSignalEnabledForSVResult(CommandResult):

  def __init__(self, signal, svId, enabled):
    CommandResult.__init__(self, "IsSignalEnabledForSVResult")
    self.setSignal(signal)
    self.setSvId(svId)
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Get the list of enabled signals for a specified SV ID.
#
# Name   Type   Description
# ------ ------ ------------------------------------------------------------------------------------
# System string The system, can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
# SvId   int    The satellite SV ID.
#

class GetEnabledSignalsForSV(CommandBase):

  def __init__(self, system, svId):
    CommandBase.__init__(self, "GetEnabledSignalsForSV")
    self.setSystem(system)
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Result of GetEnabledSignalsForSV.
#
# Name        Type         Description
# ----------- ------------ ------------------------------------------------------------------------------------
# System      string       The system, can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
# SvId        int          The satellite SV ID.
# SignalArray array string The list of enabled signals.
#

class GetEnabledSignalsForSVResult(CommandResult):

  def __init__(self, system, svId, signalArray):
    CommandResult.__init__(self, "GetEnabledSignalsForSVResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setSignalArray(signalArray)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

#
# Enable (or disable) signal for each satellite individually.
#
# Name    Type       Description
# ------- ---------- --------------------------------------------------------------------------------------------------------------
# Signal  string     Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
#                                          "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
#                                          "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "SBASL5", "QZSSL1CA",
#                                          "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
# Enabled array bool Signal is enabled when value is True. Zero based index (index 0 => first SV ID, index 1 => second SV ID, etc).
#

class EnableSignalForEachSV(CommandBase):

  def __init__(self, signal, enabled):
    CommandBase.__init__(self, "EnableSignalForEachSV")
    self.setSignal(signal)
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Tells if the signal is enabled or disabled for each satellite.
#
# Name   Type   Description
# ------ ------ -------------------------------------------------------------------------------------------------
# Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
#                                     "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
#                                     "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "SBASL5", "QZSSL1CA",
#                                     "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
#

class IsSignalEnabledForEachSV(CommandBase):

  def __init__(self, signal):
    CommandBase.__init__(self, "IsSignalEnabledForEachSV")
    self.setSignal(signal)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

#
# Result of IsSignalEnabledForEachSV.
#
# Name    Type       Description
# ------- ---------- --------------------------------------------------------------------------------------------------------------
# Signal  string     Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
#                                          "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
#                                          "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "SBASL5", "QZSSL1CA",
#                                          "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
# Enabled array bool Signal is enabled when value is True. Zero based index (index 0 => first SV ID, index 1 => second SV ID, etc).
#

class IsSignalEnabledForEachSVResult(CommandResult):

  def __init__(self, signal, enabled):
    CommandResult.__init__(self, "IsSignalEnabledForEachSVResult")
    self.setSignal(signal)
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Enable (or disable) P(Y)-Code for specified satellite.
#
# Name    Type   Description
# ------- ------ -----------------------------------------------
# Signal  string Accepted signal keys: "L1P", "L2P"
# SvId    int    The satellite's SV ID 1..32 (use 0 for all SVs)
# Enabled bool   Enable P(Y)-Code if True
#

class EnablePYCodeForSV(CommandBase):

  def __init__(self, signal, svId, enabled):
    CommandBase.__init__(self, "EnablePYCodeForSV")
    self.setSignal(signal)
    self.setSvId(svId)
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Tells if P(Y)-Code is enabled for the specified satellite.
#
# Name   Type   Description
# ------ ------ -----------------------------------------------
# Signal string Accepted signal keys: "L1P", "L2P"
# SvId   int    The satellite's SV ID 1..32 (use 0 for all SVs)
#

class IsPYCodeEnabledForSV(CommandBase):

  def __init__(self, signal, svId):
    CommandBase.__init__(self, "IsPYCodeEnabledForSV")
    self.setSignal(signal)
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Result of IsPYCodeEnabledForSV.
#
# Name    Type   Description
# ------- ------ -----------------------------------------------
# Signal  string Accepted signal keys: "L1P", "L2P"
# SvId    int    The satellite's SV ID 1..32 (use 0 for all SVs)
# Enabled bool   Enable P(Y)-Code if True
#

class IsPYCodeEnabledForSVResult(CommandResult):

  def __init__(self, signal, svId, enabled):
    CommandResult.__init__(self, "IsPYCodeEnabledForSVResult")
    self.setSignal(signal)
    self.setSvId(svId)
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Enable (or disable) P(Y)-Code for each satellite individually.
#
# Name    Type       Description
# ------- ---------- ----------------------------------------------------------------------------------------
# Signal  string     Accepted signal keys: "L1P", "L2P"
# Enabled array bool Enable P(Y)-Code if True. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
#

class EnablePYCodeForEachSV(CommandBase):

  def __init__(self, signal, enabled):
    CommandBase.__init__(self, "EnablePYCodeForEachSV")
    self.setSignal(signal)
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Tells if the P(Y)-Code is enabled or disabled for each satellite.
#
# Name   Type   Description
# ------ ------ ----------------------------------
# Signal string Accepted signal keys: "L1P", "L2P"
#

class IsPYCodeEnabledForEachSV(CommandBase):

  def __init__(self, signal):
    CommandBase.__init__(self, "IsPYCodeEnabledForEachSV")
    self.setSignal(signal)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

#
# Result of IsPYCodeEnabledForEachSV.
#
# Name    Type       Description
# ------- ---------- ----------------------------------------------------------------------------------------
# Signal  string     Accepted signal keys: "L1P", "L2P"
# Enabled array bool Enable P(Y)-Code if True. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
#

class IsPYCodeEnabledForEachSVResult(CommandResult):

  def __init__(self, signal, enabled):
    CommandResult.__init__(self, "IsPYCodeEnabledForEachSVResult")
    self.setSignal(signal)
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Set the power offsets applied to the signals of a satellite. Use SV ID 0 to set the power offset of all the satellites. Use key "All" to set the power offset to all signals.
#
# Name                  Type               Description
# --------------------- ------------------ -----------------------------------------------------------------------------
# System                string             "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
# SvId                  int                The satellite's SV ID.
# SignalPowerOffsetDict dict string:double A dictionary of signal poweroffset pairs.
#                                          Accepted keys are: "All", "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P",
#                                                             "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E1PRS", "E5a",
#                                                             "E5b", "E6BC", "E6PRS", "B1", "B2", "B1C", "B2a", "B3I",
#                                                             "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
#                                                             "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S" and "NAVICL5"
# IsRelativePowerOffset bool               If true, the power offset(s) are added to the current value(s).
#

class SetManualPowerOffsetForSV(CommandBase):

  def __init__(self, system, svId, signalPowerOffsetDict, isRelativePowerOffset):
    CommandBase.__init__(self, "SetManualPowerOffsetForSV")
    self.setSystem(system)
    self.setSvId(svId)
    self.setSignalPowerOffsetDict(signalPowerOffsetDict)
    self.setIsRelativePowerOffset(isRelativePowerOffset)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def signalPowerOffsetDict(self):
    return self.get("SignalPowerOffsetDict")

  def setSignalPowerOffsetDict(self, value):
    return self.set("SignalPowerOffsetDict", value)

  def isRelativePowerOffset(self):
    return self.get("IsRelativePowerOffset")

  def setIsRelativePowerOffset(self, value):
    return self.set("IsRelativePowerOffset", value)

#
# Get the power offsets for specific signals of a satellite.
#
# Name        Type         Description
# ----------- ------------ -------------------------------------------------------------------------------
# System      string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
# SvId        int          The satellite's SV ID.
# SignalArray array string An array of signals.
#                          Accepted values are: "All", "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P",
#                                               "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E1PRS", "E5a",
#                                               "E5b", "E6BC", "E6PRS", "B1", "B2", "B1C", "B2a", "B3I",
#                                               "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
#                                               "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S" and "NAVICL5"
#

class GetManualPowerOffsetForSV(CommandBase):

  def __init__(self, system, svId, signalArray):
    CommandBase.__init__(self, "GetManualPowerOffsetForSV")
    self.setSystem(system)
    self.setSvId(svId)
    self.setSignalArray(signalArray)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

#
# Result of GetManualPowerOffsetForSV.
#
# Name                  Type               Description
# --------------------- ------------------ -----------------------------------------------------------------------------
# System                string             "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
# SvId                  int                The satellite's SV ID.
# SignalPowerOffsetDict dict string:double A dictionary of signal poweroffset pairs.
#                                          Accepted keys are: "All", "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P",
#                                                             "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E1PRS", "E5a",
#                                                             "E5b", "E6BC", "E6PRS", "B1", "B2", "B1C", "B2a", "B3I",
#                                                             "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
#                                                             "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S" and "NAVICL5"
#

class GetManualPowerOffsetForSVResult(CommandResult):

  def __init__(self, system, svId, signalPowerOffsetDict):
    CommandResult.__init__(self, "GetManualPowerOffsetForSVResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setSignalPowerOffsetDict(signalPowerOffsetDict)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def signalPowerOffsetDict(self):
    return self.get("SignalPowerOffsetDict")

  def setSignalPowerOffsetDict(self, value):
    return self.set("SignalPowerOffsetDict", value)

#
# Reset power offset for all satellites is specified system to default value
#
# Name   Type   Description
# ------ ------ -----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
#

class ResetManualPowerOffsets(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "ResetManualPowerOffsets")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Please note the command ResetAllSatPower is deprecated since 21.7. You may use ResetManualPowerOffsets.
# 
# Reset power offset for all satellites is specified system to default value
#
# Name   Type   Description
# ------ ------ -----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
#

class ResetAllSatPower(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "ResetAllSatPower")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Information on the signal power.
#
# Name                Type   Description
# ------------------- ------ -----------------------------------------------------------------------------------------------------------
# AntennaOffset       double The receiver antenna power offset (dB). It depends on antenna pattern and relative orientation with signal.
# StrengthModelOffset double The power offset coming from the Signal Strength Model (dB).
# SignalOffset        double The signal power offset (dB). See SetSignalPowerOffset.
# ManualOffset        double The manual power offset (dB). See SetManualPowerOffsetForSV.
# Total               double The sum of all the other fields, including nominal power and the global power offset (dBm).
#

class SignalPower:

  def __init__(self, antennaOffset, strengthModelOffset, signalOffset, manualOffset, total):
    self.AntennaOffset = antennaOffset
    self.StrengthModelOffset = strengthModelOffset
    self.SignalOffset = signalOffset
    self.ManualOffset = manualOffset
    self.Total = total

#
# Get the power information for the specified satellite.
#
# Name        Type         Description
# ----------- ------------ -------------------------------------------------------------------------------
# System      string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
# SvId        int          The Satellite's SV ID.
# SignalArray array string An array of signals.
#                          Accepted values are: "All", "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P",
#                                               "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E1PRS", "E5a",
#                                               "E5b", "E6BC", "E6PRS", "B1", "B2", "B1C", "B2a", "B3I",
#                                               "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
#                                               "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S" and "NAVICL5"
#

class GetAllPowerForSV(CommandBase):

  def __init__(self, system, svId, signalArray):
    CommandBase.__init__(self, "GetAllPowerForSV")
    self.setSystem(system)
    self.setSvId(svId)
    self.setSignalArray(signalArray)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

#
# Result of GetAllPowerForSV.
#
# Name            Type                    Description
# --------------- ----------------------- -----------------------------------------------------------------------------
# System          string                  "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
# SvId            int                     The Satellite's SV ID.
# NominalPower    double                  The nominal power in dBm.
# GlobalOffset    double                  The global power offset (dB).
# SignalPowerDict dict string:SignalPower A dictionary of signal power pairs.
#                                         Accepted keys are: "All", "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P",
#                                                            "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E1PRS", "E5a",
#                                                            "E5b", "E6BC", "E6PRS", "B1", "B2", "B1C", "B2a", "B3I",
#                                                            "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
#                                                            "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S" and "NAVICL5"
#

class GetAllPowerForSVResult(CommandResult):

  def __init__(self, system, svId, nominalPower, globalOffset, signalPowerDict):
    CommandResult.__init__(self, "GetAllPowerForSVResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setNominalPower(nominalPower)
    self.setGlobalOffset(globalOffset)
    self.setSignalPowerDict(signalPowerDict)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def nominalPower(self):
    return self.get("NominalPower")

  def setNominalPower(self, value):
    return self.set("NominalPower", value)

  def globalOffset(self):
    return self.get("GlobalOffset")

  def setGlobalOffset(self, value):
    return self.set("GlobalOffset", value)

  def signalPowerDict(self):
    return self.get("SignalPowerDict")

  def setSignalPowerDict(self, value):
    return self.set("SignalPowerDict", value)

#
# Export the performance graph data into a csv file.
#
# Name        Type   Description
# ----------- ------ -----------------------------------------------------------------------------------------------
# Path        string The full path to the csv file.
# Overwriting bool   Overwrite an existing file if set to true, return an error if set to false and the file exists.
#

class ExportPerformanceDataToCSV(CommandBase):

  def __init__(self, path, overwriting):
    CommandBase.__init__(self, "ExportPerformanceDataToCSV")
    self.setPath(path)
    self.setOverwriting(overwriting)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

  def overwriting(self):
    return self.get("Overwriting")

  def setOverwriting(self, value):
    return self.set("Overwriting", value)

#
# Export the hil graph data into a csv file.
#
# Name        Type   Description
# ----------- ------ -----------------------------------------------------------------------------------------------
# Path        string The full path to the csv file.
# Overwriting bool   Overwrite an existing file if set to true, return an error if set to false and the file exists.
#

class ExportHilGraphDataToCSV(CommandBase):

  def __init__(self, path, overwriting):
    CommandBase.__init__(self, "ExportHilGraphDataToCSV")
    self.setPath(path)
    self.setOverwriting(overwriting)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

  def overwriting(self):
    return self.get("Overwriting")

  def setOverwriting(self, value):
    return self.set("Overwriting", value)

#
# Enable (or disable) the satellite signal propagation delay. If disabled, the signal is immediately received
# by the receiver. The delay should always be enabled, unless your are doing a PPS calibration for the simulator.
#
# Name    Type   Description
# ------- ------ -------------------------------------------------------------------------------------------------
# System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Enabled bool   If false, the propagation delay between the GPS satellite and the receiver is forced to 0 second.
#

class SetPropagationDelay(CommandBase):

  def __init__(self, system, enabled):
    CommandBase.__init__(self, "SetPropagationDelay")
    self.setSystem(system)
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Tells if the propagation delay is enabled.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class IsPropagationDelayEnabled(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "IsPropagationDelayEnabled")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Result of IsPropagationDelayEnabled.
#
# Name    Type   Description
# ------- ------ -------------------------------------------------------------------------------------------------
# System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Enabled bool   If false, the propagation delay between the GPS satellite and the receiver is forced to 0 second.
#

class IsPropagationDelayEnabledResult(CommandResult):

  def __init__(self, system, enabled):
    CommandResult.__init__(self, "IsPropagationDelayEnabledResult")
    self.setSystem(system)
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# If IsFixed is set to true, the satellite will not move during the simulation and keep its initial position calculated at the beginning of the simulation.
#
# Name    Type   Description
# ------- ------ --------------------------------------------------------------------------------------------------------------
# System  string "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
# SvId    int    The satellite's SV ID.
# IsFixed bool   If true, the satellite relative position is fixed, if false, the satellite motion follows a normal trajectory.
#

class SetSatMotionFixed(CommandBase):

  def __init__(self, system, svId, isFixed):
    CommandBase.__init__(self, "SetSatMotionFixed")
    self.setSystem(system)
    self.setSvId(svId)
    self.setIsFixed(isFixed)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def isFixed(self):
    return self.get("IsFixed")

  def setIsFixed(self, value):
    return self.set("IsFixed", value)

#
# Tells if the satellite is fixed (True) or not fixed (false).
#
# Name   Type   Description
# ------ ------ ---------------------------------------------
# System string "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
# SvId   int    The satellite's SV ID.
#

class IsSatMotionFixed(CommandBase):

  def __init__(self, system, svId):
    CommandBase.__init__(self, "IsSatMotionFixed")
    self.setSystem(system)
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Result of IsSatMotionFixed.
#
# Name    Type   Description
# ------- ------ --------------------------------------------------------------------------------------------------------------
# System  string "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
# SvId    int    The satellite's SV ID.
# IsFixed bool   If true, the satellite relative position is fixed, if false, the satellite motion follows a normal trajectory.
#

class IsSatMotionFixedResult(CommandResult):

  def __init__(self, system, svId, isFixed):
    CommandResult.__init__(self, "IsSatMotionFixedResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setIsFixed(isFixed)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def isFixed(self):
    return self.get("IsFixed")

  def setIsFixed(self, value):
    return self.set("IsFixed", value)

#
# Set the GPS ionospheric Alpha coefficient
# Alpha 0 is in seconds
# Alpha 1 is in seconds/semicircle
# Alpha 2 is in seconds/semicircle^2
# Alpha 3 is in seconds/semicircle^3
#
# Name  Type   Description
# ----- ------ ------------------------
# Index int    Coefficient index [0..3]
# Val   double Coefficient value
#

class SetIonoAlpha(CommandBase):

  def __init__(self, index, val):
    CommandBase.__init__(self, "SetIonoAlpha")
    self.setIndex(index)
    self.setVal(val)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def index(self):
    return self.get("Index")

  def setIndex(self, value):
    return self.set("Index", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

#
# Get the GPS ionospheric Alpha coefficient
# Alpha 0 is in seconds
# Alpha 1 is in seconds/semicircle
# Alpha 2 is in seconds/semicircle^2
# Alpha 3 is in seconds/semicircle^3
#
# Name  Type Description
# ----- ---- ------------------------
# Index int  Coefficient index [0..3]
#

class GetIonoAlpha(CommandBase):

  def __init__(self, index):
    CommandBase.__init__(self, "GetIonoAlpha")
    self.setIndex(index)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def index(self):
    return self.get("Index")

  def setIndex(self, value):
    return self.set("Index", value)

#
# Result of GetIonoAlpha.
#
# Name  Type   Description
# ----- ------ ------------------------
# Index int    Coefficient index [0..3]
# Val   double Coefficient value
#

class GetIonoAlphaResult(CommandResult):

  def __init__(self, index, val):
    CommandResult.__init__(self, "GetIonoAlphaResult")
    self.setIndex(index)
    self.setVal(val)

  def isSuccess(self):
    return True

  def index(self):
    return self.get("Index")

  def setIndex(self, value):
    return self.set("Index", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

#
# Set the GPS ionospheric Beta coefficient
# Beta 0 is in seconds
# Beta 1 is in seconds/semicircle
# Beta 2 is in seconds/semicircle^2
# Beta 3 is in seconds/semicircle^3
#
# Name  Type   Description
# ----- ------ ------------------------
# Index int    Coefficient index [0..3]
# Val   double Coefficient value
#

class SetIonoBeta(CommandBase):

  def __init__(self, index, val):
    CommandBase.__init__(self, "SetIonoBeta")
    self.setIndex(index)
    self.setVal(val)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def index(self):
    return self.get("Index")

  def setIndex(self, value):
    return self.set("Index", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

#
# Get the GPS ionospheric Beta coefficient
# Beta 0 is in seconds
# Beta 1 is in seconds/semicircle
# Beta 2 is in seconds/semicircle^2
# Beta 3 is in seconds/semicircle^3
#
# Name  Type Description
# ----- ---- ------------------------
# Index int  Coefficient index [0..3]
#

class GetIonoBeta(CommandBase):

  def __init__(self, index):
    CommandBase.__init__(self, "GetIonoBeta")
    self.setIndex(index)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def index(self):
    return self.get("Index")

  def setIndex(self, value):
    return self.set("Index", value)

#
# Result of GetIonoBeta.
#
# Name  Type   Description
# ----- ------ ------------------------
# Index int    Coefficient index [0..3]
# Val   double Coefficient value
#

class GetIonoBetaResult(CommandResult):

  def __init__(self, index, val):
    CommandResult.__init__(self, "GetIonoBetaResult")
    self.setIndex(index)
    self.setVal(val)

  def isSuccess(self):
    return True

  def index(self):
    return self.get("Index")

  def setIndex(self, value):
    return self.set("Index", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

#
# Set the BeiDou (BDGIM) ionospheric Alpha coefficient (in TECu)
#
# Name  Type   Description
# ----- ------ ------------------------
# Index int    Coefficient index [1..9]
# Val   double Coefficient value
#

class SetIonoBdgimAlpha(CommandBase):

  def __init__(self, index, val):
    CommandBase.__init__(self, "SetIonoBdgimAlpha")
    self.setIndex(index)
    self.setVal(val)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def index(self):
    return self.get("Index")

  def setIndex(self, value):
    return self.set("Index", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

#
# Get the BeiDou (BDGIM) ionospheric Alpha coefficient (in TECu)
#
# Name  Type Description
# ----- ---- ------------------------
# Index int  Coefficient index [1..9]
#

class GetIonoBdgimAlpha(CommandBase):

  def __init__(self, index):
    CommandBase.__init__(self, "GetIonoBdgimAlpha")
    self.setIndex(index)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def index(self):
    return self.get("Index")

  def setIndex(self, value):
    return self.set("Index", value)

#
# Result of GetIonoBdgimAlpha.
#
# Name  Type   Description
# ----- ------ ------------------------
# Index int    Coefficient index [1..9]
# Val   double Coefficient value
#

class GetIonoBdgimAlphaResult(CommandResult):

  def __init__(self, index, val):
    CommandResult.__init__(self, "GetIonoBdgimAlphaResult")
    self.setIndex(index)
    self.setVal(val)

  def isSuccess(self):
    return True

  def index(self):
    return self.get("Index")

  def setIndex(self, value):
    return self.set("Index", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

#
# Set the effective ionisation level coefficient for the 1st, 2nd or 3rd order, (ai0 , ai1 , ai2).
#
# Name  Type   Description
# ----- ------ ---------------------------------------------------------------
# Index int    Coefficient index, 0, 1 or 2 for ai0, ai1 and ai2 respectively.
# Val   double Coefficient value.
#

class SetEffectiveIonisationLevelCoefficient(CommandBase):

  def __init__(self, index, val):
    CommandBase.__init__(self, "SetEffectiveIonisationLevelCoefficient")
    self.setIndex(index)
    self.setVal(val)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def index(self):
    return self.get("Index")

  def setIndex(self, value):
    return self.set("Index", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

#
# Get the effective ionisation level coefficient for the 1st, 2nd or 3rd order, (ai0 , ai1 , ai2).
#
# Name  Type Description
# ----- ---- ---------------------------------------------------------------
# Index int  Coefficient index, 0, 1 or 2 for ai0, ai1 and ai2 respectively.
#

class GetEffectiveIonisationLevelCoefficient(CommandBase):

  def __init__(self, index):
    CommandBase.__init__(self, "GetEffectiveIonisationLevelCoefficient")
    self.setIndex(index)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def index(self):
    return self.get("Index")

  def setIndex(self, value):
    return self.set("Index", value)

#
# Result of GetEffectiveIonisationLevelCoefficient.
#
# Name  Type   Description
# ----- ------ ---------------------------------------------------------------
# Index int    Coefficient index, 0, 1 or 2 for ai0, ai1 and ai2 respectively.
# Val   double Coefficient value.
#

class GetEffectiveIonisationLevelCoefficientResult(CommandResult):

  def __init__(self, index, val):
    CommandResult.__init__(self, "GetEffectiveIonisationLevelCoefficientResult")
    self.setIndex(index)
    self.setVal(val)

  def isSuccess(self):
    return True

  def index(self):
    return self.get("Index")

  def setIndex(self, value):
    return self.set("Index", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

#
# Set ionospheric model
#
# Name  Type   Description
# ----- ------ ------------------------------------------------------------------
# Model string Ionospheric model ("None", "Klobuchar", "Spacecraft" or "NeQuick")
#

class SetIonoModel(CommandBase):

  def __init__(self, model):
    CommandBase.__init__(self, "SetIonoModel")
    self.setModel(model)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def model(self):
    return self.get("Model")

  def setModel(self, value):
    return self.set("Model", value)

#
# Get ionospheric model
#
#

class GetIonoModel(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetIonoModel")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetIonoModel.
#
# Name  Type   Description
# ----- ------ ------------------------------------------------------------------
# Model string Ionospheric model ("None", "Klobuchar", "Spacecraft" or "NeQuick")
#

class GetIonoModelResult(CommandResult):

  def __init__(self, model):
    CommandResult.__init__(self, "GetIonoModelResult")
    self.setModel(model)

  def isSuccess(self):
    return True

  def model(self):
    return self.get("Model")

  def setModel(self, value):
    return self.set("Model", value)

#
# Set tropospheric model
#
# Name  Type   Description
# ----- ------ -----------------------------------------------------------------
# Model string Tropospheric model ("None", "Saastamoinen", "Stanag" or "DO-229")
#

class SetTropoModel(CommandBase):

  def __init__(self, model):
    CommandBase.__init__(self, "SetTropoModel")
    self.setModel(model)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def model(self):
    return self.get("Model")

  def setModel(self, value):
    return self.set("Model", value)

#
# Get tropospheric model
#
#

class GetTropoModel(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetTropoModel")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetTropoModel.
#
# Name  Type   Description
# ----- ------ -----------------------------------------------------------------
# Model string Tropospheric model ("None", "Saastamoinen", "Stanag" or "DO-229")
#

class GetTropoModelResult(CommandResult):

  def __init__(self, model):
    CommandResult.__init__(self, "GetTropoModelResult")
    self.setModel(model)

  def isSuccess(self):
    return True

  def model(self):
    return self.get("Model")

  def setModel(self, value):
    return self.set("Model", value)

#
# Set the simulation start time mode.
#
# Name Type   Description
# ---- ------ --------------------------------------------
# Mode string Accepted Modes ("Custom", "Computer", "GPS")
#

class SetStartTimeMode(CommandBase):

  def __init__(self, mode):
    CommandBase.__init__(self, "SetStartTimeMode")
    self.setMode(mode)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def mode(self):
    return self.get("Mode")

  def setMode(self, value):
    return self.set("Mode", value)

#
# Get the simulation start time mode.
#
#

class GetStartTimeMode(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetStartTimeMode")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetStartTimeMode.
#
# Name Type   Description
# ---- ------ --------------------------------------------
# Mode string Accepted Modes ("Custom", "Computer", "GPS")
#

class GetStartTimeModeResult(CommandResult):

  def __init__(self, mode):
    CommandResult.__init__(self, "GetStartTimeModeResult")
    self.setMode(mode)

  def isSuccess(self):
    return True

  def mode(self):
    return self.get("Mode")

  def setMode(self, value):
    return self.set("Mode", value)

#
# Connect a receiver.
#
# Name        Type                           Description
# ----------- ------------------------------ -------------------------------------------------------------------------------------------------------------------------------------
# Port        string                         Serial Port (ex: "COM5").
# BaudRate    optional int                   Data baud rate of the serial port. Can be 1200 | 2400 | 4800 | 9600 | 19200 | 38400 | 57600 | 115200 | 460800. Default value is 9600.
# DataBits    optional int                   Number of data bits used by the serial port. Possible values are 5, 6, 7 and 8. Default value is 8.
# Parity      optional SerialPortParity      Parity scheme used by the serial port. Default value is NoParity.
# StopBits    optional int                   Number of stop bits used by the serial port. Possible values are 1 and 2. Default value is 1.
# FlowControl optional SerialPortFlowControl Flow control used by the serial port. Default value is NoFlowControl.
#

class ConnectSerialPortReceiver(CommandBase):

  def __init__(self, port, baudRate = None, dataBits = None, parity = None, stopBits = None, flowControl = None):
    CommandBase.__init__(self, "ConnectSerialPortReceiver")
    self.setPort(port)
    self.setBaudRate(baudRate)
    self.setDataBits(dataBits)
    self.setParity(parity)
    self.setStopBits(stopBits)
    self.setFlowControl(flowControl)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def port(self):
    return self.get("Port")

  def setPort(self, value):
    return self.set("Port", value)

  def baudRate(self):
    return self.get("BaudRate")

  def setBaudRate(self, value):
    return self.set("BaudRate", value)

  def dataBits(self):
    return self.get("DataBits")

  def setDataBits(self, value):
    return self.set("DataBits", value)

  def parity(self):
    return self.get("Parity")

  def setParity(self, value):
    return self.set("Parity", value)

  def stopBits(self):
    return self.get("StopBits")

  def setStopBits(self, value):
    return self.set("StopBits", value)

  def flowControl(self):
    return self.get("FlowControl")

  def setFlowControl(self, value):
    return self.set("FlowControl", value)

#
# Disconnects the connected receiver. Does nothing if no receiver is connected.
#
#

class DisconnectSerialPortReceiver(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "DisconnectSerialPortReceiver")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

#
# Set the connection parameters to the GPS Receiver from which the simulator will get the simulation start time.
#
# Name        Type                           Description
# ----------- ------------------------------ -----------------------------------------------------------------------------------------
# Port        string                         IP Address (Octoclock-G ex: "192.168.11.3") OR Serial Port (ex: "COM5")
# BaudRate    optional int                   Data baud rate of the serial port (optional)
# DataBits    optional int                   Number of data bits used by the serial port. Possible values are 5, 6, 7 and 8 (optional)
# Parity      optional SerialPortParity      Parity scheme used by the serial port (optional)
# StopBits    optional int                   Number of stop bits used by the serial port. Possible values are 1 and 2 (optional)
# FlowControl optional SerialPortFlowControl Flow control used by the serial port (optional)
#

class SetGpsTimingReceiver(CommandBase):

  def __init__(self, port, baudRate = None, dataBits = None, parity = None, stopBits = None, flowControl = None):
    CommandBase.__init__(self, "SetGpsTimingReceiver")
    self.setPort(port)
    self.setBaudRate(baudRate)
    self.setDataBits(dataBits)
    self.setParity(parity)
    self.setStopBits(stopBits)
    self.setFlowControl(flowControl)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def port(self):
    return self.get("Port")

  def setPort(self, value):
    return self.set("Port", value)

  def baudRate(self):
    return self.get("BaudRate")

  def setBaudRate(self, value):
    return self.set("BaudRate", value)

  def dataBits(self):
    return self.get("DataBits")

  def setDataBits(self, value):
    return self.set("DataBits", value)

  def parity(self):
    return self.get("Parity")

  def setParity(self, value):
    return self.set("Parity", value)

  def stopBits(self):
    return self.get("StopBits")

  def setStopBits(self, value):
    return self.set("StopBits", value)

  def flowControl(self):
    return self.get("FlowControl")

  def setFlowControl(self, value):
    return self.set("FlowControl", value)

#
# Get the connection parameters to the GPS Receiver from which the simulator will get the simulation start time.
#
#

class GetGpsTimingReceiver(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetGpsTimingReceiver")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetGpsTimingReceiver.
#
# Name        Type                           Description
# ----------- ------------------------------ -----------------------------------------------------------------------------------------
# Port        string                         IP Address (Octoclock-G ex: "192.168.11.3") OR Serial Port (ex: "COM5")
# BaudRate    optional int                   Data baud rate of the serial port (optional)
# DataBits    optional int                   Number of data bits used by the serial port. Possible values are 5, 6, 7 and 8 (optional)
# Parity      optional SerialPortParity      Parity scheme used by the serial port (optional)
# StopBits    optional int                   Number of stop bits used by the serial port. Possible values are 1 and 2 (optional)
# FlowControl optional SerialPortFlowControl Flow control used by the serial port (optional)
#

class GetGpsTimingReceiverResult(CommandResult):

  def __init__(self, port, baudRate = None, dataBits = None, parity = None, stopBits = None, flowControl = None):
    CommandResult.__init__(self, "GetGpsTimingReceiverResult")
    self.setPort(port)
    self.setBaudRate(baudRate)
    self.setDataBits(dataBits)
    self.setParity(parity)
    self.setStopBits(stopBits)
    self.setFlowControl(flowControl)

  def isSuccess(self):
    return True

  def port(self):
    return self.get("Port")

  def setPort(self, value):
    return self.set("Port", value)

  def baudRate(self):
    return self.get("BaudRate")

  def setBaudRate(self, value):
    return self.set("BaudRate", value)

  def dataBits(self):
    return self.get("DataBits")

  def setDataBits(self, value):
    return self.set("DataBits", value)

  def parity(self):
    return self.get("Parity")

  def setParity(self, value):
    return self.set("Parity", value)

  def stopBits(self):
    return self.get("StopBits")

  def setStopBits(self, value):
    return self.set("StopBits", value)

  def flowControl(self):
    return self.get("FlowControl")

  def setFlowControl(self, value):
    return self.set("FlowControl", value)

#
# Set offset between the simulated GPS time and time given by GPS Timing receiver when using GPS Timing receiver to set the start time of the simulation.
# This value has no effect when GPS start time is "custom" or "computer".
#
# Name   Type Description
# ------ ---- -----------------------------------------------------------------------------------------
# Offset int  Time Offset, in seconds, between simulated GPS time and time given by GPS Timing receiver
#

class SetStartTimeOffset(CommandBase):

  def __init__(self, offset):
    CommandBase.__init__(self, "SetStartTimeOffset")
    self.setOffset(offset)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Get offset between the simulated GPS time and time given by GPS Timing receiver when using GPS Timing receiver to set the start time of the simulation.
# This value has no effect when GPS start time is "custom" or "computer".
#
#

class GetStartTimeOffset(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetStartTimeOffset")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetStartTimeOffset.
#
# Name   Type Description
# ------ ---- -----------------------------------------------------------------------------------------
# Offset int  Time Offset, in seconds, between simulated GPS time and time given by GPS Timing receiver
#

class GetStartTimeOffsetResult(CommandResult):

  def __init__(self, offset):
    CommandResult.__init__(self, "GetStartTimeOffsetResult")
    self.setOffset(offset)

  def isSuccess(self):
    return True

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Set the UTC leap seconds added since GPS epoch.
#
# Name       Type Description
# ---------- ---- ----------------------------------------------------------------
# LeapSecond int  The number of leap seconds to convert GPS date and time into UTC
#

class SetLeapSecond(CommandBase):

  def __init__(self, leapSecond):
    CommandBase.__init__(self, "SetLeapSecond")
    self.setLeapSecond(leapSecond)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def leapSecond(self):
    return self.get("LeapSecond")

  def setLeapSecond(self, value):
    return self.set("LeapSecond", value)

#
# Set the simulation start date and time
#
# Name  Type     Description
# ----- -------- --------------------------------------------------------------
# Start datetime GPS date and time (it is the GPS time expressed in UTC format)
#

class SetGpsStartTime(CommandBase):

  def __init__(self, start):
    CommandBase.__init__(self, "SetGpsStartTime")
    self.setStart(start)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def start(self):
    return self.get("Start")

  def setStart(self, value):
    return self.set("Start", value)

#
# Get the simulation GPS start date and time and leap second to convert into UTC time
#
#

class GetGpsStartTime(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetGpsStartTime")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetGpsStartTime.
#
# Name       Type     Description
# ---------- -------- ------------------------------------------------------------------------------------------------
# StartTime  datetime GPS date and time when the simulation started (it is the GPS time expressed in Gregorian format)
# LeapSecond int      The number of leap seconds to convert GPS date and time into UTC
#

class GetGpsStartTimeResult(CommandResult):

  def __init__(self, startTime, leapSecond):
    CommandResult.__init__(self, "GetGpsStartTimeResult")
    self.setStartTime(startTime)
    self.setLeapSecond(leapSecond)

  def isSuccess(self):
    return True

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def leapSecond(self):
    return self.get("LeapSecond")

  def setLeapSecond(self, value):
    return self.set("LeapSecond", value)

#
# Set the simulation duration. The simulation will stop automatically when this duration is reached
#
# Name   Type Description
# ------ ---- -----------------------
# Second int  The duration in seconds
#

class SetDuration(CommandBase):

  def __init__(self, second):
    CommandBase.__init__(self, "SetDuration")
    self.setSecond(second)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def second(self):
    return self.get("Second")

  def setSecond(self, value):
    return self.set("Second", value)

#
# Get the simulation duration.
#
#

class GetDuration(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetDuration")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetDuration.
#
# Name   Type Description
# ------ ---- -----------------------
# Second int  The duration in seconds
#

class GetDurationResult(CommandResult):

  def __init__(self, second):
    CommandResult.__init__(self, "GetDurationResult")
    self.setSecond(second)

  def isSuccess(self):
    return True

  def second(self):
    return self.get("Second")

  def setSecond(self, value):
    return self.set("Second", value)

#
# Enable (or disable) raw data logging (pseudorange, antenna gain, receiver position, satellite position, etc.)
#
# Name    Type Description
# ------- ---- -----------------------------------------------
# Enabled bool If true, file will be created during simulation
#

class EnableLogRaw(CommandBase):

  def __init__(self, enabled):
    CommandBase.__init__(self, "EnableLogRaw")
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Tells if raw data logging is enabled.
#
#

class IsLogRawEnabled(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "IsLogRawEnabled")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of IsLogRawEnabled.
#
# Name    Type Description
# ------- ---- -----------------------------------------------
# Enabled bool If true, file will be created during simulation
#

class IsLogRawEnabledResult(CommandResult):

  def __init__(self, enabled):
    CommandResult.__init__(self, "IsLogRawEnabledResult")
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Enable (or disable) downlink data logging in csv format
#
# Name           Type          Description
# -------------- ------------- ----------------------------------------------------------------------------------------------------------------------
# Enabled        bool          If true, files will be created during simulation. By default, the downlink files will be created after signal encoding
# BeforeEncoding optional bool (Optional) If true, files will be created before signal encoding. Can be used with AfterEncoding
# AfterEncoding  optional bool (Optional) If true, files will be created after signal encoding. Can be used with BeforeEncoding
#

class EnableLogDownlink(CommandBase):

  def __init__(self, enabled, beforeEncoding = None, afterEncoding = None):
    CommandBase.__init__(self, "EnableLogDownlink")
    self.setEnabled(enabled)
    self.setBeforeEncoding(beforeEncoding)
    self.setAfterEncoding(afterEncoding)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def beforeEncoding(self):
    return self.get("BeforeEncoding")

  def setBeforeEncoding(self, value):
    return self.set("BeforeEncoding", value)

  def afterEncoding(self):
    return self.get("AfterEncoding")

  def setAfterEncoding(self, value):
    return self.set("AfterEncoding", value)

#
# Tells if downlink data Logging is enabled
#
#

class IsLogDownlinkEnabled(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "IsLogDownlinkEnabled")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of IsLogDownlinkEnabled.
#
# Name           Type          Description
# -------------- ------------- ----------------------------------------------------------------------------------------------------------------------
# Enabled        bool          If true, files will be created during simulation. By default, the downlink files will be created after signal encoding
# BeforeEncoding optional bool (Optional) If true, files will be created before signal encoding. Can be used with AfterEncoding
# AfterEncoding  optional bool (Optional) If true, files will be created after signal encoding. Can be used with BeforeEncoding
#

class IsLogDownlinkEnabledResult(CommandResult):

  def __init__(self, enabled, beforeEncoding = None, afterEncoding = None):
    CommandResult.__init__(self, "IsLogDownlinkEnabledResult")
    self.setEnabled(enabled)
    self.setBeforeEncoding(beforeEncoding)
    self.setAfterEncoding(afterEncoding)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def beforeEncoding(self):
    return self.get("BeforeEncoding")

  def setBeforeEncoding(self, value):
    return self.set("BeforeEncoding", value)

  def afterEncoding(self):
    return self.get("AfterEncoding")

  def setAfterEncoding(self, value):
    return self.set("AfterEncoding", value)

#
# Enable (or disable) ephemeris data logging in RINEX v3.03 format
#
# Name    Type Description
# ------- ---- ------------------------------------------------
# Enabled bool If true, files will be created during simulation
#

class EnableLogRinex(CommandBase):

  def __init__(self, enabled):
    CommandBase.__init__(self, "EnableLogRinex")
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Tells if ephemeris data Logging is enabled
#
#

class IsLogRinexEnabled(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "IsLogRinexEnabled")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of IsLogRinexEnabled.
#
# Name    Type Description
# ------- ---- ------------------------------------------------
# Enabled bool If true, files will be created during simulation
#

class IsLogRinexEnabledResult(CommandResult):

  def __init__(self, enabled):
    CommandResult.__init__(self, "IsLogRinexEnabledResult")
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Enable (or disable) log of all the data received on the HIL API in a CSV format
#
# Name    Type Description
# ------- ---- ------------------------------------------------
# Enabled bool If true, files will be created during simulation
#

class EnableLogHILInput(CommandBase):

  def __init__(self, enabled):
    CommandBase.__init__(self, "EnableLogHILInput")
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Tells if data received on the HIL API logging is enabled
#
#

class IsLogHILInputEnabled(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "IsLogHILInputEnabled")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of IsLogHILInputEnabled.
#
# Name    Type Description
# ------- ---- ------------------------------------------------
# Enabled bool If true, files will be created during simulation
#

class IsLogHILInputEnabledResult(CommandResult):

  def __init__(self, enabled):
    CommandResult.__init__(self, "IsLogHILInputEnabledResult")
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Set Rate logging of raw data
#
# Name Type Description
# ---- ---- --------------------------------------
# Rate int  Accepted rates are 10, 100 and 1000 Hz
#

class SetLogRawRate(CommandBase):

  def __init__(self, rate):
    CommandBase.__init__(self, "SetLogRawRate")
    self.setRate(rate)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def rate(self):
    return self.get("Rate")

  def setRate(self, value):
    return self.set("Rate", value)

#
# Get Rate logging of raw data
#
#

class GetLogRawRate(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetLogRawRate")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetLogRawRate.
#
# Name Type Description
# ---- ---- --------------------------------------
# Rate int  Accepted rates are 10, 100 and 1000 Hz
#

class LogRawRateResult(CommandResult):

  def __init__(self, rate):
    CommandResult.__init__(self, "LogRawRateResult")
    self.setRate(rate)

  def isSuccess(self):
    return True

  def rate(self):
    return self.get("Rate")

  def setRate(self, value):
    return self.set("Rate", value)

#
# Set Logging of NMEA for the simulated position enable/disable.
# If a receiver is connected, that NMEA is saved as well.
#
# Name    Type Description
# ------- ---- --------------------------------------------------
# Enabled bool If true, file(s) will be created during simulation
#

class EnableLogNmea(CommandBase):

  def __init__(self, enabled):
    CommandBase.__init__(self, "EnableLogNmea")
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Get Logging of NMEA for the simulated position enable/disable.
# If a receiver is connected, that NMEA is saved as well.
#
#

class IsLogNmeaEnabled(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "IsLogNmeaEnabled")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of IsLogNmeaEnabled.
#
# Name    Type Description
# ------- ---- --------------------------------------------------
# Enabled bool If true, file(s) will be created during simulation
#

class IsLogNmeaEnabledResult(CommandResult):

  def __init__(self, enabled):
    CommandResult.__init__(self, "IsLogNmeaEnabledResult")
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Set Rate logging of NMEA data
#
# Name Type Description
# ---- ---- ------------------------------
# Rate int  Accepted rates are 1 and 10 Hz
#

class SetLogNmeaRate(CommandBase):

  def __init__(self, rate):
    CommandBase.__init__(self, "SetLogNmeaRate")
    self.setRate(rate)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def rate(self):
    return self.get("Rate")

  def setRate(self, value):
    return self.set("Rate", value)

#
# Get Rate logging of NMEA data
#
#

class GetLogNmeaRate(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetLogNmeaRate")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetLogNmeaRate.
#
# Name Type Description
# ---- ---- ------------------------------
# Rate int  Accepted rates are 1 and 10 Hz
#

class LogNmeaRateResult(CommandResult):

  def __init__(self, rate):
    CommandResult.__init__(self, "LogNmeaRateResult")
    self.setRate(rate)

  def isSuccess(self):
    return True

  def rate(self):
    return self.get("Rate")

  def setRate(self, value):
    return self.set("Rate", value)

#
# Enable/Disable Time Synchronization Master.
# The Master will control other Skydel simulators with Slave PPS Enabled.
#
# Name    Type Description
# ------- ---- ---------------------------------------------------------------------
# Enabled bool If true, this simulator will be the master to synchronize simulators.
#

class EnableMasterPps(CommandBase):

  def __init__(self, enabled):
    CommandBase.__init__(self, "EnableMasterPps")
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Request for the master status, returns a GetMasterStatusResult
#
#

class GetMasterStatus(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetMasterStatus")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of GetMasterStatus.
#
# Name           Type Description
# -------------- ---- -------------------------------------
# IsMaster       bool True if Skydel is in master mode
# SlaveConnected int  The number of connected slaves
# Port           int  The listening port, 0 if not a master
#

class GetMasterStatusResult(CommandResult):

  def __init__(self, isMaster, slaveConnected, port):
    CommandResult.__init__(self, "GetMasterStatusResult")
    self.setIsMaster(isMaster)
    self.setSlaveConnected(slaveConnected)
    self.setPort(port)

  def isSuccess(self):
    return True

  def isMaster(self):
    return self.get("IsMaster")

  def setIsMaster(self, value):
    return self.set("IsMaster", value)

  def slaveConnected(self):
    return self.get("SlaveConnected")

  def setSlaveConnected(self, value):
    return self.set("SlaveConnected", value)

  def port(self):
    return self.get("Port")

  def setPort(self, value):
    return self.set("Port", value)

#
# Enable/Disable Time Synchronization Slave.
# The Slave will wait for the Master to synchronize the simulators.
#
# Name    Type Description
# ------- ---- ---------------------------------------------------------------------------
# Enabled bool If true, this simulator will wait for the master to synchronize simulators.
#

class EnableSlavePps(CommandBase):

  def __init__(self, enabled):
    CommandBase.__init__(self, "EnableSlavePps")
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Request for the slave status, returns a GetSlaveStatusResult
#
#

class GetSlaveStatus(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetSlaveStatus")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of GetSlaveStatus.
#
# Name        Type   Description
# ----------- ------ ---------------------------------------
# IsSlave     bool   True if Skydel is in slave mode
# IsConnected bool   True if Skydel is connected to a master
# HostName    string The host name, empty if not a slave
# HostPort    int    The host port, 0 if not a slave
#

class GetSlaveStatusResult(CommandResult):

  def __init__(self, isSlave, isConnected, hostName, hostPort):
    CommandResult.__init__(self, "GetSlaveStatusResult")
    self.setIsSlave(isSlave)
    self.setIsConnected(isConnected)
    self.setHostName(hostName)
    self.setHostPort(hostPort)

  def isSuccess(self):
    return True

  def isSlave(self):
    return self.get("IsSlave")

  def setIsSlave(self, value):
    return self.set("IsSlave", value)

  def isConnected(self):
    return self.get("IsConnected")

  def setIsConnected(self, value):
    return self.set("IsConnected", value)

  def hostName(self):
    return self.get("HostName")

  def setHostName(self, value):
    return self.set("HostName", value)

  def hostPort(self):
    return self.get("HostPort")

  def setHostPort(self, value):
    return self.set("HostPort", value)

#
# Set the next leap second event
#
# Name    Type Description
# ------- ---- ----------------------------------------------------------------------
# Enabled bool If true, the future leap second event is set in the navigation message
# Seconds int  The future leap seconds value
# Date    date The event date
#

class SetLeapSecondFuture(CommandBase):

  def __init__(self, enabled, seconds, date):
    CommandBase.__init__(self, "SetLeapSecondFuture")
    self.setEnabled(enabled)
    self.setSeconds(seconds)
    self.setDate(date)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def seconds(self):
    return self.get("Seconds")

  def setSeconds(self, value):
    return self.set("Seconds", value)

  def date(self):
    return self.get("Date")

  def setDate(self, value):
    return self.set("Date", value)

#
# Get the next leap second event
#
#

class GetLeapSecondFuture(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetLeapSecondFuture")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetLeapSecondFuture.
#
# Name    Type Description
# ------- ---- ----------------------------------------------------------------------
# Enabled bool If true, the future leap second event is set in the navigation message
# Seconds int  The future leap seconds value
# Date    date The event date
#

class GetLeapSecondFutureResult(CommandResult):

  def __init__(self, enabled, seconds, date):
    CommandResult.__init__(self, "GetLeapSecondFutureResult")
    self.setEnabled(enabled)
    self.setSeconds(seconds)
    self.setDate(date)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def seconds(self):
    return self.get("Seconds")

  def setSeconds(self, value):
    return self.set("Seconds", value)

  def date(self):
    return self.get("Date")

  def setDate(self, value):
    return self.set("Date", value)

#
# Set signal strength model Enable/Disable which affect satellite transmission strength based on their elevation angle
#
# Name    Type Description
# ------- ---- -----------------------------------------------------------
# Enabled bool If true, signal strengh model is enabled for all satellites
#

class EnableSignalStrengthModel(CommandBase):

  def __init__(self, enabled):
    CommandBase.__init__(self, "EnableSignalStrengthModel")
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Get signal strength model Enable/Disable which affect satellite transmission strength based on their elevation angle
#
#

class IsSignalStrengthModelEnabled(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "IsSignalStrengthModelEnabled")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of IsSignalStrengthModelEnabled.
#
# Name    Type Description
# ------- ---- -----------------------------------------------------------
# Enabled bool If true, signal strengh model is enabled for all satellites
#

class IsSignalStrengthModelEnabledResult(CommandResult):

  def __init__(self, enabled):
    CommandResult.__init__(self, "IsSignalStrengthModelEnabledResult")
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Set GNSS satellite mask based on elevation enabled or disabled (See SetElevationMaskBelow).
#
# Name    Type Description
# ------- ---- ------------------------------------------------------------------
# Enabled bool If true, mask satellites with elevation angle below masking angle.
#

class EnableElevationMaskBelow(CommandBase):

  def __init__(self, enabled):
    CommandBase.__init__(self, "EnableElevationMaskBelow")
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Get GNSS satellite mask based on elevation enabled or disabled (See SetElevationMaskBelow).
#
#

class IsElevationMaskBelowEnabled(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "IsElevationMaskBelowEnabled")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of IsElevationMaskBelowEnabled.
#
# Name    Type Description
# ------- ---- ------------------------------------------------------------------
# Enabled bool If true, mask satellites with elevation angle below masking angle.
#

class IsElevationMaskBelowEnabledResult(CommandResult):

  def __init__(self, enabled):
    CommandResult.__init__(self, "IsElevationMaskBelowEnabledResult")
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Set GNSS satellite mask based on elevation enabled or disabled (See SetElevationMaskAbove).
#
# Name    Type Description
# ------- ---- ------------------------------------------------------------------
# Enabled bool If true, mask satellites with elevation angle above masking angle.
#

class EnableElevationMaskAbove(CommandBase):

  def __init__(self, enabled):
    CommandBase.__init__(self, "EnableElevationMaskAbove")
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Get GNSS satellite mask based on elevation enabled or disabled (See SetElevationMaskAbove).
#
#

class IsElevationMaskAboveEnabled(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "IsElevationMaskAboveEnabled")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of IsElevationMaskAboveEnabled.
#
# Name    Type Description
# ------- ---- ------------------------------------------------------------------
# Enabled bool If true, mask satellites with elevation angle above masking angle.
#

class IsElevationMaskAboveEnabledResult(CommandResult):

  def __init__(self, enabled):
    CommandResult.__init__(self, "IsElevationMaskAboveEnabledResult")
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Set elevation mask angle. See command EnableElevationMaskBelow
#
# Name  Type   Description
# ----- ------ ---------------------------
# Angle double Elevation mask angle in rad
#

class SetElevationMaskBelow(CommandBase):

  def __init__(self, angle):
    CommandBase.__init__(self, "SetElevationMaskBelow")
    self.setAngle(angle)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def angle(self):
    return self.get("Angle")

  def setAngle(self, value):
    return self.set("Angle", value)

#
# Get elevation mask angle. See command EnableElevationMaskBelow
#
#

class GetElevationMaskBelow(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetElevationMaskBelow")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetElevationMaskBelow.
#
# Name  Type   Description
# ----- ------ ---------------------------
# Angle double Elevation mask angle in rad
#

class GetElevationMaskBelowResult(CommandResult):

  def __init__(self, angle):
    CommandResult.__init__(self, "GetElevationMaskBelowResult")
    self.setAngle(angle)

  def isSuccess(self):
    return True

  def angle(self):
    return self.get("Angle")

  def setAngle(self, value):
    return self.set("Angle", value)

#
# Set elevation mask angle. See command EnableElevationMaskAbove
#
# Name  Type   Description
# ----- ------ ---------------------------
# Angle double Elevation mask angle in rad
#

class SetElevationMaskAbove(CommandBase):

  def __init__(self, angle):
    CommandBase.__init__(self, "SetElevationMaskAbove")
    self.setAngle(angle)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def angle(self):
    return self.get("Angle")

  def setAngle(self, value):
    return self.set("Angle", value)

#
# Get elevation mask angle. See command EnableElevationMaskAbove
#
#

class GetElevationMaskAbove(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetElevationMaskAbove")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetElevationMaskAbove.
#
# Name  Type   Description
# ----- ------ ---------------------------
# Angle double Elevation mask angle in rad
#

class GetElevationMaskAboveResult(CommandResult):

  def __init__(self, angle):
    CommandResult.__init__(self, "GetElevationMaskAboveResult")
    self.setAngle(angle)

  def isSuccess(self):
    return True

  def angle(self):
    return self.get("Angle")

  def setAngle(self, value):
    return self.set("Angle", value)

#
# Set GPS Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)
#
# Name          Type          Description
# ------------- ------------- ---------------------------------------------------
# Clock         int           Issue of data, clock
# Ephemeris     int           Issue of data, ephemeris
# OverrideRinex optional bool If the IOD overrides the RINEX IOD, default is True
#

class SetIssueOfData(CommandBase):

  def __init__(self, clock, ephemeris, overrideRinex = None):
    CommandBase.__init__(self, "SetIssueOfData")
    self.setClock(clock)
    self.setEphemeris(ephemeris)
    self.setOverrideRinex(overrideRinex)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def clock(self):
    return self.get("Clock")

  def setClock(self, value):
    return self.set("Clock", value)

  def ephemeris(self):
    return self.get("Ephemeris")

  def setEphemeris(self, value):
    return self.set("Ephemeris", value)

  def overrideRinex(self):
    return self.get("OverrideRinex")

  def setOverrideRinex(self, value):
    return self.set("OverrideRinex", value)

#
# Get GPS Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)
#
#

class GetIssueOfData(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetIssueOfData")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetIssueOfData.
#
# Name          Type          Description
# ------------- ------------- ---------------------------------------------------
# Clock         int           Issue of data, clock
# Ephemeris     int           Issue of data, ephemeris
# OverrideRinex optional bool If the IOD overrides the RINEX IOD, default is True
#

class GetIssueOfDataResult(CommandResult):

  def __init__(self, clock, ephemeris, overrideRinex = None):
    CommandResult.__init__(self, "GetIssueOfDataResult")
    self.setClock(clock)
    self.setEphemeris(ephemeris)
    self.setOverrideRinex(overrideRinex)

  def isSuccess(self):
    return True

  def clock(self):
    return self.get("Clock")

  def setClock(self, value):
    return self.set("Clock", value)

  def ephemeris(self):
    return self.get("Ephemeris")

  def setEphemeris(self, value):
    return self.set("Ephemeris", value)

  def overrideRinex(self):
    return self.get("OverrideRinex")

  def setOverrideRinex(self, value):
    return self.set("OverrideRinex", value)

#
# Set Galileo Issue of data, Navigation (IODNAV) and Issue of data, Almanac (IODA)
#
# Name          Type          Description
# ------------- ------------- ---------------------------------------------------------
# Navigation    int           Issue of data, navigation
# Almanac       int           Issue of data, almanac
# OverrideRinex optional bool If the IODNAV overrides the RINEX IODNAV, default is True
#

class SetIssueOfDataGalileo(CommandBase):

  def __init__(self, navigation, almanac, overrideRinex = None):
    CommandBase.__init__(self, "SetIssueOfDataGalileo")
    self.setNavigation(navigation)
    self.setAlmanac(almanac)
    self.setOverrideRinex(overrideRinex)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def navigation(self):
    return self.get("Navigation")

  def setNavigation(self, value):
    return self.set("Navigation", value)

  def almanac(self):
    return self.get("Almanac")

  def setAlmanac(self, value):
    return self.set("Almanac", value)

  def overrideRinex(self):
    return self.get("OverrideRinex")

  def setOverrideRinex(self, value):
    return self.set("OverrideRinex", value)

#
# Get Galileo Issue of data, Navigation (IODNAV) and Issue of data, Almanac (IODA)
#
#

class GetIssueOfDataGalileo(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetIssueOfDataGalileo")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetIssueOfDataGalileo.
#
# Name          Type          Description
# ------------- ------------- ---------------------------------------------------------
# Navigation    int           Issue of data, navigation
# Almanac       int           Issue of data, almanac
# OverrideRinex optional bool If the IODNAV overrides the RINEX IODNAV, default is True
#

class GetIssueOfDataGalileoResult(CommandResult):

  def __init__(self, navigation, almanac, overrideRinex = None):
    CommandResult.__init__(self, "GetIssueOfDataGalileoResult")
    self.setNavigation(navigation)
    self.setAlmanac(almanac)
    self.setOverrideRinex(overrideRinex)

  def isSuccess(self):
    return True

  def navigation(self):
    return self.get("Navigation")

  def setNavigation(self, value):
    return self.set("Navigation", value)

  def almanac(self):
    return self.get("Almanac")

  def setAlmanac(self, value):
    return self.set("Almanac", value)

  def overrideRinex(self):
    return self.get("OverrideRinex")

  def setOverrideRinex(self, value):
    return self.set("OverrideRinex", value)

#
# Set BeiDou Age of data, Ephemeris (AODE) and Age of data, Clock (AODC)
#
# Name          Type          Description
# ------------- ------------- ---------------------------------------------------
# Clock         int           Age of data, clock
# Ephemeris     int           Age of data, ephemeris
# OverrideRinex optional bool If the AOD overrides the RINEX AOD, default is True
#

class SetAgeOfDataBeiDou(CommandBase):

  def __init__(self, clock, ephemeris, overrideRinex = None):
    CommandBase.__init__(self, "SetAgeOfDataBeiDou")
    self.setClock(clock)
    self.setEphemeris(ephemeris)
    self.setOverrideRinex(overrideRinex)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def clock(self):
    return self.get("Clock")

  def setClock(self, value):
    return self.set("Clock", value)

  def ephemeris(self):
    return self.get("Ephemeris")

  def setEphemeris(self, value):
    return self.set("Ephemeris", value)

  def overrideRinex(self):
    return self.get("OverrideRinex")

  def setOverrideRinex(self, value):
    return self.set("OverrideRinex", value)

#
# Get BeiDou Age of data, Ephemeris (AODE) and Age of data, Clock (AODC)
#
#

class GetAgeOfDataBeiDou(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetAgeOfDataBeiDou")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetAgeOfDataBeiDou.
#
# Name          Type          Description
# ------------- ------------- ---------------------------------------------------
# Clock         int           Age of data, clock
# Ephemeris     int           Age of data, ephemeris
# OverrideRinex optional bool If the AOD overrides the RINEX AOD, default is True
#

class GetAgeOfDataBeiDouResult(CommandResult):

  def __init__(self, clock, ephemeris, overrideRinex = None):
    CommandResult.__init__(self, "GetAgeOfDataBeiDouResult")
    self.setClock(clock)
    self.setEphemeris(ephemeris)
    self.setOverrideRinex(overrideRinex)

  def isSuccess(self):
    return True

  def clock(self):
    return self.get("Clock")

  def setClock(self, value):
    return self.set("Clock", value)

  def ephemeris(self):
    return self.get("Ephemeris")

  def setEphemeris(self, value):
    return self.set("Ephemeris", value)

  def overrideRinex(self):
    return self.get("OverrideRinex")

  def setOverrideRinex(self, value):
    return self.set("OverrideRinex", value)

#
# Set BeiDou Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)
#
# Name      Type Description
# --------- ---- ------------------------
# Clock     int  Issue of data, clock
# Ephemeris int  Issue of data, ephemeris
#

class SetIssueOfDataBeiDou(CommandBase):

  def __init__(self, clock, ephemeris):
    CommandBase.__init__(self, "SetIssueOfDataBeiDou")
    self.setClock(clock)
    self.setEphemeris(ephemeris)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def clock(self):
    return self.get("Clock")

  def setClock(self, value):
    return self.set("Clock", value)

  def ephemeris(self):
    return self.get("Ephemeris")

  def setEphemeris(self, value):
    return self.set("Ephemeris", value)

#
# Get BeiDou Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)
#
#

class GetIssueOfDataBeiDou(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetIssueOfDataBeiDou")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetIssueOfDataBeiDou.
#
# Name      Type Description
# --------- ---- ------------------------
# Clock     int  Issue of data, clock
# Ephemeris int  Issue of data, ephemeris
#

class GetIssueOfDataBeiDouResult(CommandResult):

  def __init__(self, clock, ephemeris):
    CommandResult.__init__(self, "GetIssueOfDataBeiDouResult")
    self.setClock(clock)
    self.setEphemeris(ephemeris)

  def isSuccess(self):
    return True

  def clock(self):
    return self.get("Clock")

  def setClock(self, value):
    return self.set("Clock", value)

  def ephemeris(self):
    return self.get("Ephemeris")

  def setEphemeris(self, value):
    return self.set("Ephemeris", value)

#
# Set QZSS Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)
#
# Name          Type          Description
# ------------- ------------- ---------------------------------------------------
# Clock         int           Issue of data, clock
# Ephemeris     int           Issue of data, ephemeris
# OverrideRinex optional bool If the IOD overrides the RINEX IOD, default is True
#

class SetIssueOfDataQzss(CommandBase):

  def __init__(self, clock, ephemeris, overrideRinex = None):
    CommandBase.__init__(self, "SetIssueOfDataQzss")
    self.setClock(clock)
    self.setEphemeris(ephemeris)
    self.setOverrideRinex(overrideRinex)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def clock(self):
    return self.get("Clock")

  def setClock(self, value):
    return self.set("Clock", value)

  def ephemeris(self):
    return self.get("Ephemeris")

  def setEphemeris(self, value):
    return self.set("Ephemeris", value)

  def overrideRinex(self):
    return self.get("OverrideRinex")

  def setOverrideRinex(self, value):
    return self.set("OverrideRinex", value)

#
# Get QZSS Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)
#
#

class GetIssueOfDataQzss(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetIssueOfDataQzss")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetIssueOfDataQzss.
#
# Name          Type          Description
# ------------- ------------- ---------------------------------------------------
# Clock         int           Issue of data, clock
# Ephemeris     int           Issue of data, ephemeris
# OverrideRinex optional bool If the IOD overrides the RINEX IOD, default is True
#

class GetIssueOfDataQzssResult(CommandResult):

  def __init__(self, clock, ephemeris, overrideRinex = None):
    CommandResult.__init__(self, "GetIssueOfDataQzssResult")
    self.setClock(clock)
    self.setEphemeris(ephemeris)
    self.setOverrideRinex(overrideRinex)

  def isSuccess(self):
    return True

  def clock(self):
    return self.get("Clock")

  def setClock(self, value):
    return self.set("Clock", value)

  def ephemeris(self):
    return self.get("Ephemeris")

  def setEphemeris(self, value):
    return self.set("Ephemeris", value)

  def overrideRinex(self):
    return self.get("OverrideRinex")

  def setOverrideRinex(self, value):
    return self.set("OverrideRinex", value)

#
# Set NavIC Issue of data, Ephemeris and Clock (IODEC)
#
# Name              Type          Description
# ----------------- ------------- -------------------------------------------------------
# EphemerisAndClock int           Issue of data, ephemeris and clock
# OverrideRinex     optional bool If the IODEC overrides the RINEX IODEC, default is True
#

class SetIssueOfDataNavIC(CommandBase):

  def __init__(self, ephemerisAndClock, overrideRinex = None):
    CommandBase.__init__(self, "SetIssueOfDataNavIC")
    self.setEphemerisAndClock(ephemerisAndClock)
    self.setOverrideRinex(overrideRinex)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def ephemerisAndClock(self):
    return self.get("EphemerisAndClock")

  def setEphemerisAndClock(self, value):
    return self.set("EphemerisAndClock", value)

  def overrideRinex(self):
    return self.get("OverrideRinex")

  def setOverrideRinex(self, value):
    return self.set("OverrideRinex", value)

#
# Get NavIC Issue of data, Ephemeris and Clock (IODEC)
#
#

class GetIssueOfDataNavIC(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetIssueOfDataNavIC")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetIssueOfDataNavIC.
#
# Name              Type          Description
# ----------------- ------------- -------------------------------------------------------
# EphemerisAndClock int           Issue of data, ephemeris and clock
# OverrideRinex     optional bool If the IODEC overrides the RINEX IODEC, default is True
#

class GetIssueOfDataNavICResult(CommandResult):

  def __init__(self, ephemerisAndClock, overrideRinex = None):
    CommandResult.__init__(self, "GetIssueOfDataNavICResult")
    self.setEphemerisAndClock(ephemerisAndClock)
    self.setOverrideRinex(overrideRinex)

  def isSuccess(self):
    return True

  def ephemerisAndClock(self):
    return self.get("EphemerisAndClock")

  def setEphemerisAndClock(self, value):
    return self.set("EphemerisAndClock", value)

  def overrideRinex(self):
    return self.get("OverrideRinex")

  def setOverrideRinex(self, value):
    return self.set("OverrideRinex", value)

#
# Set GPS SV configuration flag for one satellite
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..32
# SvConfig    int             SV Config 0..4
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGpsConfigurationCodeForSV(CommandBase):

  def __init__(self, svId, svConfig, dataSetName = None):
    CommandBase.__init__(self, "SetGpsConfigurationCodeForSV")
    self.setSvId(svId)
    self.setSvConfig(svConfig)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def svConfig(self):
    return self.get("SvConfig")

  def setSvConfig(self, value):
    return self.set("SvConfig", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get GPS SV configuration flag for one satellite
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..32
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsConfigurationCodeForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetGpsConfigurationCodeForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetGpsConfigurationCodeForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..32
# SvConfig    int             SV Config 0..4
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsConfigurationCodeForSVResult(CommandResult):

  def __init__(self, svId, svConfig, dataSetName = None):
    CommandResult.__init__(self, "GetGpsConfigurationCodeForSVResult")
    self.setSvId(svId)
    self.setSvConfig(svConfig)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def svConfig(self):
    return self.get("SvConfig")

  def setSvConfig(self, value):
    return self.set("SvConfig", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set GPS SV configuration flag for each SVs
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvConfigs   array int       SV Config of all satellite
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGpsConfigurationForEachSV(CommandBase):

  def __init__(self, svConfigs, dataSetName = None):
    CommandBase.__init__(self, "SetGpsConfigurationForEachSV")
    self.setSvConfigs(svConfigs)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def svConfigs(self):
    return self.get("SvConfigs")

  def setSvConfigs(self, value):
    return self.set("SvConfigs", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetGpsSVConfigurationForAllSat is deprecated since 21.3. You may use SetGpsConfigurationForEachSV.
# 
# Set GPS SV configuration flag for each SVs
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvConfigs   array int       SV Config of all satellite
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGpsSVConfigurationForAllSat(CommandBase):

  def __init__(self, svConfigs, dataSetName = None):
    CommandBase.__init__(self, "SetGpsSVConfigurationForAllSat")
    self.setSvConfigs(svConfigs)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def svConfigs(self):
    return self.get("SvConfigs")

  def setSvConfigs(self, value):
    return self.set("SvConfigs", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get GPS SV configuration flag for each SVs
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsConfigurationForEachSV(CommandBase):

  def __init__(self, dataSetName = None):
    CommandBase.__init__(self, "GetGpsConfigurationForEachSV")
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetGpsSVConfigurationForAllSat is deprecated since 21.3. You may use GetGpsConfigurationForEachSV.
# 
# Get GPS SV configuration flag for each SVs
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsSVConfigurationForAllSat(CommandBase):

  def __init__(self, dataSetName = None):
    CommandBase.__init__(self, "GetGpsSVConfigurationForAllSat")
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetGpsConfigurationForEachSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvConfigs   array int       SV Config of all satellite
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsConfigurationForEachSVResult(CommandResult):

  def __init__(self, svConfigs, dataSetName = None):
    CommandResult.__init__(self, "GetGpsConfigurationForEachSVResult")
    self.setSvConfigs(svConfigs)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svConfigs(self):
    return self.get("SvConfigs")

  def setSvConfigs(self, value):
    return self.set("SvConfigs", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set GPS nav data health
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32
# Health      int             Data health 0..7
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGpsDataHealthForSV(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetGpsDataHealthForSV")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get GPS nav data health
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsDataHealthForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetGpsDataHealthForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetGpsDataHealthForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32
# Health      int             Data health 0..7
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsDataHealthForSVResult(CommandResult):

  def __init__(self, svId, health, dataSetName = None):
    CommandResult.__init__(self, "GetGpsDataHealthForSVResult")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set GPS signal health
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32
# Health      int             Signal health 0..31
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGpsSignalHealthForSV(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetGpsSignalHealthForSV")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get GPS signal health
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsSignalHealthForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetGpsSignalHealthForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetGpsSignalHealthForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32
# Health      int             Signal health 0..31
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsSignalHealthForSVResult(CommandResult):

  def __init__(self, svId, health, dataSetName = None):
    CommandResult.__init__(self, "GetGpsSignalHealthForSVResult")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set Galileo data health for I/NAV and F/NAV message
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID number 1..36.
# Component   string          Component is either "E5a", "E5b", or "E1B"
# Health      bool            False means Navigation data valid; True means Working without guarantee
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGalileoDataHealthForSV(CommandBase):

  def __init__(self, svId, component, health, dataSetName = None):
    CommandBase.__init__(self, "SetGalileoDataHealthForSV")
    self.setSvId(svId)
    self.setComponent(component)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def component(self):
    return self.get("Component")

  def setComponent(self, value):
    return self.set("Component", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get Galileo data health for I/NAV and F/NAV message
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID number 1..36.
# Component   string          Component is either "E5a", "E5b", or "E1B"
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGalileoDataHealthForSV(CommandBase):

  def __init__(self, svId, component, dataSetName = None):
    CommandBase.__init__(self, "GetGalileoDataHealthForSV")
    self.setSvId(svId)
    self.setComponent(component)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def component(self):
    return self.get("Component")

  def setComponent(self, value):
    return self.set("Component", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetGalileoDataHealthForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID number 1..36.
# Component   string          Component is either "E5a", "E5b", or "E1B"
# Health      bool            False means Navigation data valid; True means Working without guarantee
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGalileoDataHealthForSVResult(CommandResult):

  def __init__(self, svId, component, health, dataSetName = None):
    CommandResult.__init__(self, "GetGalileoDataHealthForSVResult")
    self.setSvId(svId)
    self.setComponent(component)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def component(self):
    return self.get("Component")

  def setComponent(self, value):
    return self.set("Component", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set Galileo signal health for I/NAV and F/NAV message
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             The satellite's SV ID 1..36
# Component   string          Component is either "E5a", "E5b", or "E1B"
# Health      int             Signal health 0..3
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGalileoSignalHealthForSV(CommandBase):

  def __init__(self, svId, component, health, dataSetName = None):
    CommandBase.__init__(self, "SetGalileoSignalHealthForSV")
    self.setSvId(svId)
    self.setComponent(component)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def component(self):
    return self.get("Component")

  def setComponent(self, value):
    return self.set("Component", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get Galileo signal health for I/NAV and F/NAV message
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             The satellite's SV ID 1..36
# Component   string          Component is either "E5a", "E5b", or "E1B"
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGalileoSignalHealthForSV(CommandBase):

  def __init__(self, svId, component, dataSetName = None):
    CommandBase.__init__(self, "GetGalileoSignalHealthForSV")
    self.setSvId(svId)
    self.setComponent(component)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def component(self):
    return self.get("Component")

  def setComponent(self, value):
    return self.set("Component", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetGalileoSignalHealthForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             The satellite's SV ID 1..36
# Component   string          Component is either "E5a", "E5b", or "E1B"
# Health      int             Signal health 0..3
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGalileoSignalHealthForSVResult(CommandResult):

  def __init__(self, svId, component, health, dataSetName = None):
    CommandResult.__init__(self, "GetGalileoSignalHealthForSVResult")
    self.setSvId(svId)
    self.setComponent(component)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def component(self):
    return self.get("Component")

  def setComponent(self, value):
    return self.set("Component", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set GPS L1 health (used with CNAV and CNAV2)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32
# Health      bool            L1 health, false = signal OK, true = signal bad or unavailable
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGpsL1HealthForSV(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetGpsL1HealthForSV")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get GPS L1 health (used with CNAV and CNAV2)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsL1HealthForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetGpsL1HealthForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetGpsL1HealthForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32
# Health      bool            L1 health, false = signal OK, true = signal bad or unavailable
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsL1HealthForSVResult(CommandResult):

  def __init__(self, svId, health, dataSetName = None):
    CommandResult.__init__(self, "GetGpsL1HealthForSVResult")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set GPS L2 health (used with CNAV and CNAV2)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
# Health      bool            L2 health, false = signal OK, true = signal bad or unavailable
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGpsL2HealthForSV(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetGpsL2HealthForSV")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get GPS L2 health (used with CNAV and CNAV2)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsL2HealthForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetGpsL2HealthForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetGpsL2HealthForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
# Health      bool            L2 health, false = signal OK, true = signal bad or unavailable
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsL2HealthForSVResult(CommandResult):

  def __init__(self, svId, health, dataSetName = None):
    CommandResult.__init__(self, "GetGpsL2HealthForSVResult")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set GPS L5 health (used with CNAV and CNAV2)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
# Health      bool            L5 health, false = signal OK, true = signal bad or unavailable
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGpsL5HealthForSV(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetGpsL5HealthForSV")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get GPS L5 health (used with CNAV and CNAV2)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsL5HealthForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetGpsL5HealthForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetGpsL5HealthForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
# Health      bool            L5 health, false = signal OK, true = signal bad or unavailable
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsL5HealthForSVResult(CommandResult):

  def __init__(self, svId, health, dataSetName = None):
    CommandResult.__init__(self, "GetGpsL5HealthForSVResult")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set GPS L1C health (used in CNAV2 only)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
# Health      bool            L1C health, false = signal OK, true = signal bad or unavailable
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGpsL1cHealthForSV(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetGpsL1cHealthForSV")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get GPS L1C health (used in CNAV2 only)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsL1cHealthForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetGpsL1cHealthForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetGpsL1cHealthForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
# Health      bool            L1C health, false = signal OK, true = signal bad or unavailable
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsL1cHealthForSVResult(CommandResult):

  def __init__(self, svId, health, dataSetName = None):
    CommandResult.__init__(self, "GetGpsL1cHealthForSVResult")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set GPS Anti-Spoofing Flag
#
# Name         Type            Description
# ------------ --------------- -------------------------------------------------------------------------------------------
# SvId         int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
# AntiSpoofing GpsASFlag       GPS Anti-Spoofing Flag.
# DataSetName  optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGpsAntiSpoofingFlagForSV(CommandBase):

  def __init__(self, svId, antiSpoofing, dataSetName = None):
    CommandBase.__init__(self, "SetGpsAntiSpoofingFlagForSV")
    self.setSvId(svId)
    self.setAntiSpoofing(antiSpoofing)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def antiSpoofing(self):
    return self.get("AntiSpoofing")

  def setAntiSpoofing(self, value):
    return self.set("AntiSpoofing", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get GPS Anti-Spoofing Flag
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsAntiSpoofingFlagForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetGpsAntiSpoofingFlagForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetGpsAntiSpoofingFlagForSV.
#
# Name         Type            Description
# ------------ --------------- -------------------------------------------------------------------------------------------
# SvId         int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
# AntiSpoofing GpsASFlag       GPS Anti-Spoofing Flag.
# DataSetName  optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsAntiSpoofingFlagForSVResult(CommandResult):

  def __init__(self, svId, antiSpoofing, dataSetName = None):
    CommandResult.__init__(self, "GetGpsAntiSpoofingFlagForSVResult")
    self.setSvId(svId)
    self.setAntiSpoofing(antiSpoofing)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def antiSpoofing(self):
    return self.get("AntiSpoofing")

  def setAntiSpoofing(self, value):
    return self.set("AntiSpoofing", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set GPS NAV Alert Flag
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
# Alert       bool            GPS NAV Alert Flag, false = No Alert, true = Alert
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGpsNavAlertFlagForSV(CommandBase):

  def __init__(self, svId, alert, dataSetName = None):
    CommandBase.__init__(self, "SetGpsNavAlertFlagForSV")
    self.setSvId(svId)
    self.setAlert(alert)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def alert(self):
    return self.get("Alert")

  def setAlert(self, value):
    return self.set("Alert", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get GPS NAV Alert Flag
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsNavAlertFlagForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetGpsNavAlertFlagForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetGpsNavAlertFlagForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
# Alert       bool            GPS NAV Alert Flag, false = No Alert, true = Alert
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsNavAlertFlagForSVResult(CommandResult):

  def __init__(self, svId, alert, dataSetName = None):
    CommandResult.__init__(self, "GetGpsNavAlertFlagForSVResult")
    self.setSvId(svId)
    self.setAlert(alert)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def alert(self):
    return self.get("Alert")

  def setAlert(self, value):
    return self.set("Alert", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set GPS CNAV Alert Flag
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
# Alert       bool            GPS CNAV Alert Flag, false = No Alert, true = Alert
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGpsCNavAlertFlagToSV(CommandBase):

  def __init__(self, svId, alert, dataSetName = None):
    CommandBase.__init__(self, "SetGpsCNavAlertFlagToSV")
    self.setSvId(svId)
    self.setAlert(alert)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def alert(self):
    return self.get("Alert")

  def setAlert(self, value):
    return self.set("Alert", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get GPS CNAV Alert Flag
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsCNavAlertFlagToSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetGpsCNavAlertFlagToSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetGpsCNavAlertFlagToSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
# Alert       bool            GPS CNAV Alert Flag, false = No Alert, true = Alert
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsCNavAlertFlagToSVResult(CommandResult):

  def __init__(self, svId, alert, dataSetName = None):
    CommandResult.__init__(self, "GetGpsCNavAlertFlagToSVResult")
    self.setSvId(svId)
    self.setAlert(alert)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def alert(self):
    return self.get("Alert")

  def setAlert(self, value):
    return self.set("Alert", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set BeiDou satellite health info
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
# Health      int             Health Info, 9-bit integer : 0, 2, 64, 66, 128, 130, 192, 194, 256 or 511
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetBeiDouHealthInfoForSV(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetBeiDouHealthInfoForSV")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get BeiDou satellite health info
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetBeiDouHealthInfoForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetBeiDouHealthInfoForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetBeiDouHealthInfoForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
# Health      int             Health Info, 9-bit integer : 0, 2, 64, 66, 128, 130, 192, 194, 256 or 511
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetBeiDouHealthInfoForSVResult(CommandResult):

  def __init__(self, svId, health, dataSetName = None):
    CommandResult.__init__(self, "GetBeiDouHealthInfoForSVResult")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set BeiDou satellite autonomous health
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
# Health      bool            Status, false = Good, true = Not Good
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetBeiDouAutonomousHealthForSV(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetBeiDouAutonomousHealthForSV")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get BeiDou satellite autonomous health
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetBeiDouAutonomousHealthForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetBeiDouAutonomousHealthForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetBeiDouAutonomousHealthForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
# Health      bool            Status, false = Good, true = Not Good
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetBeiDouAutonomousHealthForSVResult(CommandResult):

  def __init__(self, svId, health, dataSetName = None):
    CommandResult.__init__(self, "GetBeiDouAutonomousHealthForSVResult")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set BeiDou CNav satellite health info
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
# Health      int             Health Info, 8-bit integer : 0, 32, 64, 96, 128 or 255
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetBeiDouCNavHealthInfoForSV(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetBeiDouCNavHealthInfoForSV")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get BeiDou CNav satellite health info
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetBeiDouCNavHealthInfoForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetBeiDouCNavHealthInfoForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetBeiDouCNavHealthInfoForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
# Health      int             Health Info, 8-bit integer : 0, 32, 64, 96, 128 or 255
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetBeiDouCNavHealthInfoForSVResult(CommandResult):

  def __init__(self, svId, health, dataSetName = None):
    CommandResult.__init__(self, "GetBeiDouCNavHealthInfoForSVResult")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set BeiDou satellite health status
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
# Health      int             Health Info, 2-bit integer : 0, 1, 2 or 3
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetBeiDouHealthStatusForSV(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetBeiDouHealthStatusForSV")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get BeiDou satellite health status
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetBeiDouHealthStatusForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetBeiDouHealthStatusForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetBeiDouHealthStatusForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
# Health      int             Health Info, 2-bit integer : 0, 1, 2 or 3
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetBeiDouHealthStatusForSVResult(CommandResult):

  def __init__(self, svId, health, dataSetName = None):
    CommandResult.__init__(self, "GetBeiDouHealthStatusForSVResult")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set GLONASS satellite Ephemeris Health Flag Bn(ln)
#
# Name   Type Description
# ------ ---- --------------------------------------
# SvId   int  The satellite's SV ID 1..24
# Health bool Status, false = OK, true = Malfunction
#

class SetGlonassEphemerisHealthFlagForSV(CommandBase):

  def __init__(self, svId, health):
    CommandBase.__init__(self, "SetGlonassEphemerisHealthFlagForSV")
    self.setSvId(svId)
    self.setHealth(health)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

#
# Get GLONASS satellite Ephemeris Health Flag Bn(ln)
#
# Name Type Description
# ---- ---- ---------------------------
# SvId int  The satellite's SV ID 1..24
#

class GetGlonassEphemerisHealthFlagForSV(CommandBase):

  def __init__(self, svId):
    CommandBase.__init__(self, "GetGlonassEphemerisHealthFlagForSV")
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Result of GetGlonassEphemerisHealthFlagForSV.
#
# Name   Type Description
# ------ ---- --------------------------------------
# SvId   int  The satellite's SV ID 1..24
# Health bool Status, false = OK, true = Malfunction
#

class GetGlonassEphemerisHealthFlagForSVResult(CommandResult):

  def __init__(self, svId, health):
    CommandResult.__init__(self, "GetGlonassEphemerisHealthFlagForSVResult")
    self.setSvId(svId)
    self.setHealth(health)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

#
# Set GLONASS satellite Almanac Unhealthy Flag Cn
#
# Name   Type Description
# ------ ---- ----------------------------------------------------------
# SvId   int  The satellite's SV ID 1..24
# Health bool Status, false = Non-operability, true = Operability (Good)
#

class SetGlonassAlmanacUnhealthyFlagForSV(CommandBase):

  def __init__(self, svId, health):
    CommandBase.__init__(self, "SetGlonassAlmanacUnhealthyFlagForSV")
    self.setSvId(svId)
    self.setHealth(health)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

#
# Get GLONASS satellite Almanac Unhealthy Flag Cn
#
# Name Type Description
# ---- ---- ---------------------------
# SvId int  The satellite's SV ID 1..24
#

class GetGlonassAlmanacUnhealthyFlagForSV(CommandBase):

  def __init__(self, svId):
    CommandBase.__init__(self, "GetGlonassAlmanacUnhealthyFlagForSV")
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Result of GetGlonassAlmanacUnhealthyFlagForSV.
#
# Name   Type Description
# ------ ---- ----------------------------------------------------------
# SvId   int  The satellite's SV ID 1..24
# Health bool Status, false = Non-operability, true = Operability (Good)
#

class GetGlonassAlmanacUnhealthyFlagForSVResult(CommandResult):

  def __init__(self, svId, health):
    CommandResult.__init__(self, "GetGlonassAlmanacUnhealthyFlagForSVResult")
    self.setSvId(svId)
    self.setHealth(health)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

#
# Set QZSS L1 C/A nav data health
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# Health      int             Data health 0..7
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssL1DataHealthForSV(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetQzssL1DataHealthForSV")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetQzssSatelliteL1DataHealth is deprecated since 21.3. You may use SetQzssL1DataHealthForSV.
# 
# Set QZSS L1 C/A nav data health
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# Health      int             Data health 0..7
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssSatelliteL1DataHealth(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetQzssSatelliteL1DataHealth")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get QZSS L1 C/A nav data health
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssL1DataHealthForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetQzssL1DataHealthForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetQzssSatelliteL1DataHealth is deprecated since 21.3. You may use GetQzssL1DataHealthForSV.
# 
# Get QZSS L1 C/A nav data health
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssSatelliteL1DataHealth(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetQzssSatelliteL1DataHealth")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetQzssL1DataHealthForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# Health      int             Data health 0..7
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssL1DataHealthForSVResult(CommandResult):

  def __init__(self, svId, health, dataSetName = None):
    CommandResult.__init__(self, "GetQzssL1DataHealthForSVResult")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set QZSS L1 health (Health of L1C/A signal)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# Health      bool            L1 health, false = signal OK, true = signal bad
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssL1HealthForSV(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetQzssL1HealthForSV")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetQzssSatelliteL1Health is deprecated since 21.3. You may use SetQzssL1HealthForSV.
# 
# Set QZSS L1 health (Health of L1C/A signal)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# Health      bool            L1 health, false = signal OK, true = signal bad
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssSatelliteL1Health(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetQzssSatelliteL1Health")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get QZSS L1 health (Health of L1C/A signal)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssL1HealthForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetQzssL1HealthForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetQzssSatelliteL1Health is deprecated since 21.3. You may use GetQzssL1HealthForSV.
# 
# Get QZSS L1 health (Health of L1C/A signal)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssSatelliteL1Health(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetQzssSatelliteL1Health")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetQzssL1HealthForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# Health      bool            L1 health, false = signal OK, true = signal bad
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssL1HealthForSVResult(CommandResult):

  def __init__(self, svId, health, dataSetName = None):
    CommandResult.__init__(self, "GetQzssL1HealthForSVResult")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set QZSS L2 health (Health of L2C signal)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# Health      bool            L2 health, false = signal OK, true = signal bad
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssL2HealthForSV(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetQzssL2HealthForSV")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetQzssSatelliteL2Health is deprecated since 21.3. You may use SetQzssL2HealthForSV.
# 
# Set QZSS L2 health (Health of L2C signal)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# Health      bool            L2 health, false = signal OK, true = signal bad
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssSatelliteL2Health(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetQzssSatelliteL2Health")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get QZSS L2 health (Health of L2C signal)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssL2HealthForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetQzssL2HealthForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetQzssSatelliteL2Health is deprecated since 21.3. You may use GetQzssL2HealthForSV.
# 
# Get QZSS L2 health (Health of L2C signal)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssSatelliteL2Health(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetQzssSatelliteL2Health")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetQzssL2HealthForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# Health      bool            L2 health, false = signal OK, true = signal bad
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssL2HealthForSVResult(CommandResult):

  def __init__(self, svId, health, dataSetName = None):
    CommandResult.__init__(self, "GetQzssL2HealthForSVResult")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set QZSS L5 health (Health of L5 signal)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# Health      bool            L5 health, false = signal OK, true = signal bad
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssL5HealthForSV(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetQzssL5HealthForSV")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetQzssSatelliteL5Health is deprecated since 21.3. You may use SetQzssL5HealthForSV.
# 
# Set QZSS L5 health (Health of L5 signal)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# Health      bool            L5 health, false = signal OK, true = signal bad
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssSatelliteL5Health(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetQzssSatelliteL5Health")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get QZSS L5 health (Health of L5 signal)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssL5HealthForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetQzssL5HealthForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetQzssSatelliteL5Health is deprecated since 21.3. You may use GetQzssL5HealthForSV.
# 
# Get QZSS L5 health (Health of L5 signal)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssSatelliteL5Health(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetQzssSatelliteL5Health")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetQzssL5HealthForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# Health      bool            L5 health, false = signal OK, true = signal bad
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssL5HealthForSVResult(CommandResult):

  def __init__(self, svId, health, dataSetName = None):
    CommandResult.__init__(self, "GetQzssL5HealthForSVResult")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set QZSS L1C health (Health of L1C signal)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# Health      bool            L1C health, false = signal OK, true = signal bad
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssL1cHealthForSV(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetQzssL1cHealthForSV")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetQzssSatelliteL1cHealth is deprecated since 21.3. You may use SetQzssL1cHealthForSV.
# 
# Set QZSS L1C health (Health of L1C signal)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# Health      bool            L1C health, false = signal OK, true = signal bad
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssSatelliteL1cHealth(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetQzssSatelliteL1cHealth")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get QZSS L1C health (Health of L1C signal)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssL1cHealthForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetQzssL1cHealthForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetQzssSatelliteL1cHealth is deprecated since 21.3. You may use GetQzssL1cHealthForSV.
# 
# Get QZSS L1C health (Health of L1C signal)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssSatelliteL1cHealth(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetQzssSatelliteL1cHealth")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetQzssL1cHealthForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# Health      bool            L1C health, false = signal OK, true = signal bad
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssL1cHealthForSVResult(CommandResult):

  def __init__(self, svId, health, dataSetName = None):
    CommandResult.__init__(self, "GetQzssL1cHealthForSVResult")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set QZSS NAV Alert Flag
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# Alert       bool            QZSS NAV Alert Flag, false = No Alert, true = Alert
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssNavAlertFlagForSV(CommandBase):

  def __init__(self, svId, alert, dataSetName = None):
    CommandBase.__init__(self, "SetQzssNavAlertFlagForSV")
    self.setSvId(svId)
    self.setAlert(alert)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def alert(self):
    return self.get("Alert")

  def setAlert(self, value):
    return self.set("Alert", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetQzssSatelliteNavAlertFlag is deprecated since 21.3. You may use SetQzssNavAlertFlagForSV.
# 
# Set QZSS NAV Alert Flag
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# Alert       bool            QZSS NAV Alert Flag, false = No Alert, true = Alert
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssSatelliteNavAlertFlag(CommandBase):

  def __init__(self, svId, alert, dataSetName = None):
    CommandBase.__init__(self, "SetQzssSatelliteNavAlertFlag")
    self.setSvId(svId)
    self.setAlert(alert)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def alert(self):
    return self.get("Alert")

  def setAlert(self, value):
    return self.set("Alert", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get QZSS NAV Alert Flag
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssNavAlertFlagForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetQzssNavAlertFlagForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetQzssSatelliteNavAlertFlag is deprecated since 21.3. You may use GetQzssNavAlertFlagForSV.
# 
# Get QZSS NAV Alert Flag
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssSatelliteNavAlertFlag(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetQzssSatelliteNavAlertFlag")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetQzssNavAlertFlagForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
# Alert       bool            QZSS NAV Alert Flag, false = No Alert, true = Alert
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssNavAlertFlagForSVResult(CommandResult):

  def __init__(self, svId, alert, dataSetName = None):
    CommandResult.__init__(self, "GetQzssNavAlertFlagForSVResult")
    self.setSvId(svId)
    self.setAlert(alert)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def alert(self):
    return self.get("Alert")

  def setAlert(self, value):
    return self.set("Alert", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set NavIC L5 health (Health of L5 signal)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
# Health      bool            L5 health, false = signal OK, true = signal bad
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetNavICL5HealthForSV(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetNavICL5HealthForSV")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetNavICSatelliteL5Health is deprecated since 21.3. You may use SetNavICL5HealthForSV.
# 
# Set NavIC L5 health (Health of L5 signal)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
# Health      bool            L5 health, false = signal OK, true = signal bad
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetNavICSatelliteL5Health(CommandBase):

  def __init__(self, svId, health, dataSetName = None):
    CommandBase.__init__(self, "SetNavICSatelliteL5Health")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get NavIC L5 health (Health of L5 signal)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetNavICL5HealthForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetNavICL5HealthForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetNavICSatelliteL5Health is deprecated since 21.3. You may use GetNavICL5HealthForSV.
# 
# Get NavIC L5 health (Health of L5 signal)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetNavICSatelliteL5Health(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetNavICSatelliteL5Health")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetNavICL5HealthForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
# Health      bool            L5 health, false = signal OK, true = signal bad
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetNavICL5HealthForSVResult(CommandResult):

  def __init__(self, svId, health, dataSetName = None):
    CommandResult.__init__(self, "GetNavICL5HealthForSVResult")
    self.setSvId(svId)
    self.setHealth(health)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set NavIC NAV Alert Flag
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
# Alert       bool            NavIC NAV Alert Flag, false = No Alert, true = Alert
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetNavICNavAlertFlagForSV(CommandBase):

  def __init__(self, svId, alert, dataSetName = None):
    CommandBase.__init__(self, "SetNavICNavAlertFlagForSV")
    self.setSvId(svId)
    self.setAlert(alert)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def alert(self):
    return self.get("Alert")

  def setAlert(self, value):
    return self.set("Alert", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetNavICSatelliteNavAlertFlag is deprecated since 21.3. You may use SetNavICNavAlertFlagForSV.
# 
# Set NavIC NAV Alert Flag
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
# Alert       bool            NavIC NAV Alert Flag, false = No Alert, true = Alert
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetNavICSatelliteNavAlertFlag(CommandBase):

  def __init__(self, svId, alert, dataSetName = None):
    CommandBase.__init__(self, "SetNavICSatelliteNavAlertFlag")
    self.setSvId(svId)
    self.setAlert(alert)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def alert(self):
    return self.get("Alert")

  def setAlert(self, value):
    return self.set("Alert", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get NavIC NAV Alert Flag
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetNavICNavAlertFlagForSV(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetNavICNavAlertFlagForSV")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetNavICSatelliteNavAlertFlag is deprecated since 21.3. You may use GetNavICNavAlertFlagForSV.
# 
# Get NavIC NAV Alert Flag
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetNavICSatelliteNavAlertFlag(CommandBase):

  def __init__(self, svId, dataSetName = None):
    CommandBase.__init__(self, "GetNavICSatelliteNavAlertFlag")
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetNavICNavAlertFlagForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
# Alert       bool            NavIC NAV Alert Flag, false = No Alert, true = Alert
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetNavICNavAlertFlagForSVResult(CommandResult):

  def __init__(self, svId, alert, dataSetName = None):
    CommandResult.__init__(self, "GetNavICNavAlertFlagForSVResult")
    self.setSvId(svId)
    self.setAlert(alert)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def alert(self):
    return self.get("Alert")

  def setAlert(self, value):
    return self.set("Alert", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set global power offset default value for all signals and all systems
#
# Name   Type   Description
# ------ ------ ---------------------------------------------------
# Offset double Offset in dB (negative value will attenuate signal)
#

class SetGlobalPowerOffset(CommandBase):

  def __init__(self, offset):
    CommandBase.__init__(self, "SetGlobalPowerOffset")
    self.setOffset(offset)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Please note the command SetPowerGlobalOffset is deprecated since 21.7. You may use SetGlobalPowerOffset.
# 
# Set global power offset default value for all signals and all systems
#
# Name   Type   Description
# ------ ------ ---------------------------------------------------
# Offset double Offset in dB (negative value will attenuate signal)
#

class SetPowerGlobalOffset(CommandBase):

  def __init__(self, offset):
    CommandBase.__init__(self, "SetPowerGlobalOffset")
    self.setOffset(offset)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Get global power offset default value for all signals and all systems
#
#

class GetGlobalPowerOffset(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetGlobalPowerOffset")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Please note the command GetPowerGlobalOffset is deprecated since 21.7. You may use GetGlobalPowerOffset.
# 
# Get global power offset default value for all signals and all systems
#
#

class GetPowerGlobalOffset(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetPowerGlobalOffset")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetGlobalPowerOffset.
#
# Name   Type   Description
# ------ ------ ---------------------------------------------------
# Offset double Offset in dB (negative value will attenuate signal)
#

class GetGlobalPowerOffsetResult(CommandResult):

  def __init__(self, offset):
    CommandResult.__init__(self, "GetGlobalPowerOffsetResult")
    self.setOffset(offset)

  def isSuccess(self):
    return True

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Set power offset default value for the signal given in argument
#
# Name   Type   Description
# ------ ------ -----------------------------------------------------------------------------------------------
# Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
#                                     "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
#                                     "B1", "B2", "B1C", "B2a", "B3I", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
#                                     "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
# Offset double Offset in dB (negative value will attenuate signal)
#

class SetSignalPowerOffset(CommandBase):

  def __init__(self, signal, offset):
    CommandBase.__init__(self, "SetSignalPowerOffset")
    self.setSignal(signal)
    self.setOffset(offset)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Please note the command SetPowerOffset is deprecated since 21.7. You may use SetSignalPowerOffset.
# 
# Set power offset default value for the signal given in argument
#
# Name   Type   Description
# ------ ------ -----------------------------------------------------------------------------------------------
# Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
#                                     "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
#                                     "B1", "B2", "B1C", "B2a", "B3I", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
#                                     "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
# Offset double Offset in dB (negative value will attenuate signal)
#

class SetPowerOffset(CommandBase):

  def __init__(self, signal, offset):
    CommandBase.__init__(self, "SetPowerOffset")
    self.setSignal(signal)
    self.setOffset(offset)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Get power offset default value for the signal given in argument
#
# Name   Type   Description
# ------ ------ -----------------------------------------------------------------------------------------------
# Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
#                                     "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
#                                     "B1", "B2", "B1C", "B2a", "B3I", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
#                                     "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
#

class GetSignalPowerOffset(CommandBase):

  def __init__(self, signal):
    CommandBase.__init__(self, "GetSignalPowerOffset")
    self.setSignal(signal)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

#
# Please note the command GetPowerOffset is deprecated since 21.7. You may use GetSignalPowerOffset.
# 
# Get power offset default value for the signal given in argument
#
# Name   Type   Description
# ------ ------ -----------------------------------------------------------------------------------------------
# Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
#                                     "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
#                                     "B1", "B2", "B1C", "B2a", "B3I", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
#                                     "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
#

class GetPowerOffset(CommandBase):

  def __init__(self, signal):
    CommandBase.__init__(self, "GetPowerOffset")
    self.setSignal(signal)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

#
# Result of GetSignalPowerOffset.
#
# Name   Type   Description
# ------ ------ -----------------------------------------------------------------------------------------------
# Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
#                                     "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
#                                     "B1", "B2", "B1C", "B2a", "B3I", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
#                                     "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
# Offset double Offset in dB (negative value will attenuate signal)
#

class GetSignalPowerOffsetResult(CommandResult):

  def __init__(self, signal, offset):
    CommandResult.__init__(self, "GetSignalPowerOffsetResult")
    self.setSignal(signal)
    self.setOffset(offset)

  def isSuccess(self):
    return True

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Set power offset default value for the SBAS Service Provider given in argument
#
# Name            Type   Description
# --------------- ------ ------------------------------------------------------------------------------
# ServiceProvider string Service Provider key, allowed values: "WAAS", "EGNOS", "MSAS", "GAGAN", "SDCM"
# Offset          double Offset in dB (negative value will attenuate signal)
#

class SetPowerSbasOffset(CommandBase):

  def __init__(self, serviceProvider, offset):
    CommandBase.__init__(self, "SetPowerSbasOffset")
    self.setServiceProvider(serviceProvider)
    self.setOffset(offset)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Get power offset default value for the SBAS Service Provider given in argument
#
# Name            Type   Description
# --------------- ------ ------------------------------------------------------------------------------
# ServiceProvider string Service Provider key, allowed values: "WAAS", "EGNOS", "MSAS", "GAGAN", "SDCM"
#

class GetPowerSbasOffset(CommandBase):

  def __init__(self, serviceProvider):
    CommandBase.__init__(self, "GetPowerSbasOffset")
    self.setServiceProvider(serviceProvider)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

#
# Result of GetPowerSbasOffset.
#
# Name            Type   Description
# --------------- ------ ------------------------------------------------------------------------------
# ServiceProvider string Service Provider key, allowed values: "WAAS", "EGNOS", "MSAS", "GAGAN", "SDCM"
# Offset          double Offset in dB (negative value will attenuate signal)
#

class GetPowerSbasOffsetResult(CommandResult):

  def __init__(self, serviceProvider, offset):
    CommandResult.__init__(self, "GetPowerSbasOffsetResult")
    self.setServiceProvider(serviceProvider)
    self.setOffset(offset)

  def isSuccess(self):
    return True

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Set a modulation target.
# If Id is not set, or if new, a new target is added.
# For setter : If the Id is already used, the corresponding target is updated.
#
# Name            Type   Description
# --------------- ------ ------------------------------------------------------------------------------------------------------------------------------------
# Type            string Target type can be "Anechoic Chamber", "DTA-2115B", "File", "N310", "None", "NoneRT", "X300" or "Wavefront Controller".
# Path            string File path. Optional, use only if type is "File".
# Address         string Optional. IP Address if type is "N310" or "X300".
# ClockIsExternal bool   Indicate 10 MHz reference clock is external (true) or internal (false). Optional, use only if type is "DTA-2115B", "N310" or "X300".
# Id              string Unique identifier automatically set by simulator
#

class SetModulationTarget(CommandBase):

  def __init__(self, type, path, address, clockIsExternal, id):
    CommandBase.__init__(self, "SetModulationTarget")
    self.setType(type)
    self.setPath(path)
    self.setAddress(address)
    self.setClockIsExternal(clockIsExternal)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

  def address(self):
    return self.get("Address")

  def setAddress(self, value):
    return self.set("Address", value)

  def clockIsExternal(self):
    return self.get("ClockIsExternal")

  def setClockIsExternal(self, value):
    return self.set("ClockIsExternal", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get a modulation target.
# If Id is not set, or if new, a new target is added.
# For setter : If the Id is already used, the corresponding target is updated.
#
# Name Type   Description
# ---- ------ ------------------------------------------------
# Id   string Unique identifier automatically set by simulator
#

class GetModulationTarget(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetModulationTarget")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetModulationTarget.
#
# Name            Type   Description
# --------------- ------ ------------------------------------------------------------------------------------------------------------------------------------
# Type            string Target type can be "Anechoic Chamber", "DTA-2115B", "File", "N310", "None", "NoneRT", "X300" or "Wavefront Controller".
# Path            string File path. Optional, use only if type is "File".
# Address         string Optional. IP Address if type is "N310" or "X300".
# ClockIsExternal bool   Indicate 10 MHz reference clock is external (true) or internal (false). Optional, use only if type is "DTA-2115B", "N310" or "X300".
# Id              string Unique identifier automatically set by simulator
#

class GetModulationTargetResult(CommandResult):

  def __init__(self, type, path, address, clockIsExternal, id):
    CommandResult.__init__(self, "GetModulationTargetResult")
    self.setType(type)
    self.setPath(path)
    self.setAddress(address)
    self.setClockIsExternal(clockIsExternal)
    self.setId(id)

  def isSuccess(self):
    return True

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

  def address(self):
    return self.get("Address")

  def setAddress(self, value):
    return self.set("Address", value)

  def clockIsExternal(self):
    return self.get("ClockIsExternal")

  def setClockIsExternal(self, value):
    return self.set("ClockIsExternal", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set the GPU associated with a RF output of a modulation target.
#
# Name   Type   Description
# ------ ------ --------------------------------------
# GpuIdx int    The gpu associated with the RF output.
# Output int    Output index (zero based)
# Id     string Target identifier
#

class SetGpu(CommandBase):

  def __init__(self, gpuIdx, output, id):
    CommandBase.__init__(self, "SetGpu")
    self.setGpuIdx(gpuIdx)
    self.setOutput(output)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def gpuIdx(self):
    return self.get("GpuIdx")

  def setGpuIdx(self, value):
    return self.set("GpuIdx", value)

  def output(self):
    return self.get("Output")

  def setOutput(self, value):
    return self.set("Output", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get the GPU associated with a RF output of a modulation target.
#
# Name   Type   Description
# ------ ------ -------------------------
# Output int    Output index (zero based)
# Id     string Target identifier
#

class GetGpu(CommandBase):

  def __init__(self, output, id):
    CommandBase.__init__(self, "GetGpu")
    self.setOutput(output)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def output(self):
    return self.get("Output")

  def setOutput(self, value):
    return self.set("Output", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetGpu.
#
# Name   Type   Description
# ------ ------ --------------------------------------
# GpuIdx int    The gpu associated with the RF output.
# Output int    Output index (zero based)
# Id     string Target identifier
#

class GetGpuResult(CommandResult):

  def __init__(self, gpuIdx, output, id):
    CommandResult.__init__(self, "GetGpuResult")
    self.setGpuIdx(gpuIdx)
    self.setOutput(output)
    self.setId(id)

  def isSuccess(self):
    return True

  def gpuIdx(self):
    return self.get("GpuIdx")

  def setGpuIdx(self, value):
    return self.set("GpuIdx", value)

  def output(self):
    return self.get("Output")

  def setOutput(self, value):
    return self.set("Output", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get all the modulation targets IDs
#
#

class GetAllModulationTargets(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetAllModulationTargets")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetAllModulationTargets.
#
# Name Type         Description
# ---- ------------ ---------------
# Ids  array string list of all IDs
#

class GetAllModulationTargetsResult(CommandResult):

  def __init__(self, ids):
    CommandResult.__init__(self, "GetAllModulationTargetsResult")
    self.setIds(ids)

  def isSuccess(self):
    return True

  def ids(self):
    return self.get("Ids")

  def setIds(self, value):
    return self.set("Ids", value)

#
# Remove a modulation target.
#
# Name Type   Description
# ---- ------ -----------------
# Id   string Target identifier
#

class RemoveModulationTarget(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "RemoveModulationTarget")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Remove all modulation targets.
#
#

class RemoveAllModulationTargets(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "RemoveAllModulationTargets")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Change the modulation target name. The name is only used for display purpose.
#
# Name       Type   Description
# ---------- ------ -----------------
# TargetName string New target name
# Id         string Target identifier
#

class ChangeModulationTargetName(CommandBase):

  def __init__(self, targetName, id):
    CommandBase.__init__(self, "ChangeModulationTargetName")
    self.setTargetName(targetName)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def targetName(self):
    return self.get("TargetName")

  def setTargetName(self, value):
    return self.set("TargetName", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set the signals for the specified target and output index.
# Skydel tries to keep the sampling rate as low as possible,
# but it is possible to set constaints with MinRate and MaxRate.
#
# Name             Type            Description
# ---------------- --------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Output           int             Output index (zero based)
# MinRate          int             Minimum sampling rate (12500000, 25000000, 50000000, 60000000, 100000000)
# MaxRate          int             Maximum sampling rate (12500000, 25000000, 50000000, 60000000, 100000000)
# Band             string          Frequency band is "LowerL" or "UpperL"
# Signal           string          Comma separated signal keys, accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
# Gain             int             The gain associated to this output (dB). This value has to be between the radio minimum value and 115. A negative value means to use the radio default value.
# GaussianNoise    bool            If true, add Gaussian noise to ensure realistic signal to noise ratio. When combining multiple outputs, only one should have Gaussian noise enabled.
# Id               string          Target identifier
# CentralFrequency optional double Forced central frequency to this value. Central frequency can only be one of this values: 1176450000, 1191795000, 1202000000, 1207140000, 1217370000, 1222000000, 1227000000, 1227600000, 1230000000, 1235000000, 1246000000, 1561098000, 1575420000, 1582000000, 1584000000, 1586000000, 1602000000.
#

class ChangeModulationTargetSignals(CommandBase):

  def __init__(self, output, minRate, maxRate, band, signal, gain, gaussianNoise, id, centralFrequency = None):
    CommandBase.__init__(self, "ChangeModulationTargetSignals")
    self.setOutput(output)
    self.setMinRate(minRate)
    self.setMaxRate(maxRate)
    self.setBand(band)
    self.setSignal(signal)
    self.setGain(gain)
    self.setGaussianNoise(gaussianNoise)
    self.setId(id)
    self.setCentralFrequency(centralFrequency)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def output(self):
    return self.get("Output")

  def setOutput(self, value):
    return self.set("Output", value)

  def minRate(self):
    return self.get("MinRate")

  def setMinRate(self, value):
    return self.set("MinRate", value)

  def maxRate(self):
    return self.get("MaxRate")

  def setMaxRate(self, value):
    return self.set("MaxRate", value)

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def gain(self):
    return self.get("Gain")

  def setGain(self, value):
    return self.set("Gain", value)

  def gaussianNoise(self):
    return self.get("GaussianNoise")

  def setGaussianNoise(self, value):
    return self.set("GaussianNoise", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

  def centralFrequency(self):
    return self.get("CentralFrequency")

  def setCentralFrequency(self, value):
    return self.set("CentralFrequency", value)

#
# Get the signals for the specified target and output index.
# Skydel tries to keep the sampling rate as low as possible,
# but it is possible to set constaints with MinRate and MaxRate.
#
# Name   Type   Description
# ------ ------ -------------------------
# Output int    Output index (zero based)
# Id     string Target identifier
#

class GetModulationTargetSignals(CommandBase):

  def __init__(self, output, id):
    CommandBase.__init__(self, "GetModulationTargetSignals")
    self.setOutput(output)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def output(self):
    return self.get("Output")

  def setOutput(self, value):
    return self.set("Output", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetModulationTargetSignals.
#
# Name             Type            Description
# ---------------- --------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Output           int             Output index (zero based)
# MinRate          int             Minimum sampling rate (12500000, 25000000, 50000000, 60000000, 100000000)
# MaxRate          int             Maximum sampling rate (12500000, 25000000, 50000000, 60000000, 100000000)
# Band             string          Frequency band is "LowerL" or "UpperL"
# Signal           string          Comma separated signal keys, accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
# Gain             int             The gain associated to this output (dB). This value has to be between the radio minimum value and 115. A negative value means to use the radio default value.
# GaussianNoise    bool            If true, add Gaussian noise to ensure realistic signal to noise ratio. When combining multiple outputs, only one should have Gaussian noise enabled.
# Id               string          Target identifier
# CentralFrequency optional double Forced central frequency to this value. Central frequency can only be one of this values: 1176450000, 1191795000, 1202000000, 1207140000, 1217370000, 1222000000, 1227000000, 1227600000, 1230000000, 1235000000, 1246000000, 1561098000, 1575420000, 1582000000, 1584000000, 1586000000, 1602000000.
#

class GetModulationTargetSignalsResult(CommandResult):

  def __init__(self, output, minRate, maxRate, band, signal, gain, gaussianNoise, id, centralFrequency = None):
    CommandResult.__init__(self, "GetModulationTargetSignalsResult")
    self.setOutput(output)
    self.setMinRate(minRate)
    self.setMaxRate(maxRate)
    self.setBand(band)
    self.setSignal(signal)
    self.setGain(gain)
    self.setGaussianNoise(gaussianNoise)
    self.setId(id)
    self.setCentralFrequency(centralFrequency)

  def isSuccess(self):
    return True

  def output(self):
    return self.get("Output")

  def setOutput(self, value):
    return self.set("Output", value)

  def minRate(self):
    return self.get("MinRate")

  def setMinRate(self, value):
    return self.set("MinRate", value)

  def maxRate(self):
    return self.get("MaxRate")

  def setMaxRate(self, value):
    return self.set("MaxRate", value)

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def gain(self):
    return self.get("Gain")

  def setGain(self, value):
    return self.set("Gain", value)

  def gaussianNoise(self):
    return self.get("GaussianNoise")

  def setGaussianNoise(self, value):
    return self.set("GaussianNoise", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

  def centralFrequency(self):
    return self.get("CentralFrequency")

  def setCentralFrequency(self, value):
    return self.set("CentralFrequency", value)

#
# Set the specified target and output index to a group of interferences.
# An interference transmitter is mapped to a specific RF output by using the same Interference Group Number.
# Skydel tries to keep the sampling rate as low as possible,
# but it is possible to set constaints with MinRate and MaxRate.
#
# Name        Type            Description
# ----------- --------------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Output      int             Output index (zero based)
# MinRate     int             Minimum sampling rate (12500000, 25000000, 50000000, 60000000, 100000000)
# MaxRate     int             Maximum sampling rate (12500000, 25000000, 50000000. 60000000, 100000000)
# Group       int             Interference group number [1..16] or 0 for no group
# CentralFreq double          Central frequency (Hz). Put 0.0 and complete signal list to let Skydel choose automaticly the central frequency.
# Gain        int             The gain associated to this output (dB). As of today, accepted values are 0, 20, 40, 60 and 80. Values at 40 and under are not recommended. Use a negative value to use the default value (60).
# Id          string          Target identifier
# Signal      optional string Comma separated signal keys if you want to match central frequency and sampling rate with a particular list of signals. Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
#

class ChangeModulationTargetInterference(CommandBase):

  def __init__(self, output, minRate, maxRate, group, centralFreq, gain, id, signal = None):
    CommandBase.__init__(self, "ChangeModulationTargetInterference")
    self.setOutput(output)
    self.setMinRate(minRate)
    self.setMaxRate(maxRate)
    self.setGroup(group)
    self.setCentralFreq(centralFreq)
    self.setGain(gain)
    self.setId(id)
    self.setSignal(signal)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def output(self):
    return self.get("Output")

  def setOutput(self, value):
    return self.set("Output", value)

  def minRate(self):
    return self.get("MinRate")

  def setMinRate(self, value):
    return self.set("MinRate", value)

  def maxRate(self):
    return self.get("MaxRate")

  def setMaxRate(self, value):
    return self.set("MaxRate", value)

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

  def centralFreq(self):
    return self.get("CentralFreq")

  def setCentralFreq(self, value):
    return self.set("CentralFreq", value)

  def gain(self):
    return self.get("Gain")

  def setGain(self, value):
    return self.set("Gain", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

#
# Get the specified target and output index to a group of interferences.
# An interference transmitter is mapped to a specific RF output by using the same Interference Group Number.
# Skydel tries to keep the sampling rate as low as possible,
# but it is possible to set constaints with MinRate and MaxRate.
#
# Name   Type   Description
# ------ ------ -------------------------
# Output int    Output index (zero based)
# Id     string Target identifier
#

class GetModulationTargetInterferences(CommandBase):

  def __init__(self, output, id):
    CommandBase.__init__(self, "GetModulationTargetInterferences")
    self.setOutput(output)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def output(self):
    return self.get("Output")

  def setOutput(self, value):
    return self.set("Output", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetModulationTargetInterferences.
#
# Name        Type            Description
# ----------- --------------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Output      int             Output index (zero based)
# MinRate     int             Minimum sampling rate (12500000, 25000000, 50000000, 60000000, 100000000)
# MaxRate     int             Maximum sampling rate (12500000, 25000000, 50000000. 60000000, 100000000)
# Group       int             Interference group number [1..16] or 0 for no group
# CentralFreq double          Central frequency (Hz). Put 0.0 and complete signal list to let Skydel choose automaticly the central frequency.
# Gain        int             The gain associated to this output (dB). As of today, accepted values are 0, 20, 40, 60 and 80. Values at 40 and under are not recommended. Use a negative value to use the default value (60).
# Id          string          Target identifier
# Signal      optional string Comma separated signal keys if you want to match central frequency and sampling rate with a particular list of signals. Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
#

class GetModulationTargetInterferencesResult(CommandResult):

  def __init__(self, output, minRate, maxRate, group, centralFreq, gain, id, signal = None):
    CommandResult.__init__(self, "GetModulationTargetInterferencesResult")
    self.setOutput(output)
    self.setMinRate(minRate)
    self.setMaxRate(maxRate)
    self.setGroup(group)
    self.setCentralFreq(centralFreq)
    self.setGain(gain)
    self.setId(id)
    self.setSignal(signal)

  def isSuccess(self):
    return True

  def output(self):
    return self.get("Output")

  def setOutput(self, value):
    return self.set("Output", value)

  def minRate(self):
    return self.get("MinRate")

  def setMinRate(self, value):
    return self.set("MinRate", value)

  def maxRate(self):
    return self.get("MaxRate")

  def setMaxRate(self, value):
    return self.set("MaxRate", value)

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

  def centralFreq(self):
    return self.get("CentralFreq")

  def setCentralFreq(self, value):
    return self.set("CentralFreq", value)

  def gain(self):
    return self.get("Gain")

  def setGain(self, value):
    return self.set("Gain", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

#
# Assign an output to a specific interference group. This command works only
# for Anechoic Chamber target.
#
# Name        Type   Description
# ----------- ------ -------------------------------------------------------------------------------------------
# Group       int    Interference group number [1..16]
# Output      string Output is radio name and RF output. For example, RF output B on radio 3 is referred as "3B"
# CentralFreq double Central frequency (Hz)
#

class ChangeModulationAnechoicTargetInterference(CommandBase):

  def __init__(self, group, output, centralFreq):
    CommandBase.__init__(self, "ChangeModulationAnechoicTargetInterference")
    self.setGroup(group)
    self.setOutput(output)
    self.setCentralFreq(centralFreq)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

  def output(self):
    return self.get("Output")

  def setOutput(self, value):
    return self.set("Output", value)

  def centralFreq(self):
    return self.get("CentralFreq")

  def setCentralFreq(self, value):
    return self.set("CentralFreq", value)

#
# Remove output assignation. This command works only for Anechoic Chamber
# target.
#
# Name  Type Description
# ----- ---- ---------------------------------
# Group int  Interference group number [1..16]
#

class RemoveModulationAnechoicTargetInterference(CommandBase):

  def __init__(self, group):
    CommandBase.__init__(self, "RemoveModulationAnechoicTargetInterference")
    self.setGroup(group)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

#
# USE AT YOUR OWN RISKS. Set the RF Gain of the SDR
#
# Name   Type   Description
# ------ ------ -----------------------------------------------------------------------
# Output int    Output index (zero based)
# Gain   double RF Gain of the SDR, in dB. Default value is 0. Only supported for USRP.
#

class SetRfGain(CommandBase):

  def __init__(self, output, gain):
    CommandBase.__init__(self, "SetRfGain")
    self.setOutput(output)
    self.setGain(gain)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def output(self):
    return self.get("Output")

  def setOutput(self, value):
    return self.set("Output", value)

  def gain(self):
    return self.get("Gain")

  def setGain(self, value):
    return self.set("Gain", value)

#
# Import navigation message file for the specified constellation. This could be Rinex, SEM or YUMA file for GPS. Only Rinex for the others.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# System      string          "GPS", "GLONASS", "Galileo", "SBAS", "BeiDou", "QZSS" or "NavIC"
# Path        string          File path
# Rollover    optional int    Rollover for file types that does not precise it (YUMA, SEM). Default value is the current rollover.
# DataSetName optional string Name of the data set to import. This parameter is optional, the default value will be the name of the imported file. Constellations that support this parameter are  "GPS", "Galileo", "BeiDou", "QZSS" and "NavIC"
#

class ImportConstellationParameters(CommandBase):

  def __init__(self, system, path, rollover = None, dataSetName = None):
    CommandBase.__init__(self, "ImportConstellationParameters")
    self.setSystem(system)
    self.setPath(path)
    self.setRollover(rollover)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

  def rollover(self):
    return self.get("Rollover")

  def setRollover(self, value):
    return self.set("Rollover", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Import ionospheric parameters from a Rinex file.
#
# Name Type            Description
# ---- --------------- ------------------------------------------------------------------------------
# Path string          File path
# Type optional string Ionospheric parameters type: "Klobuchar" or "BDGIM". The default is Klobuchar.
#

class ImportIonoParameters(CommandBase):

  def __init__(self, path, type = None):
    CommandBase.__init__(self, "ImportIonoParameters")
    self.setPath(path)
    self.setType(type)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

#
# Import MODIP data file.
#
# Name Type   Description
# ---- ------ -----------
# Path string File path.
#

class ImportMODIPFile(CommandBase):

  def __init__(self, path):
    CommandBase.__init__(self, "ImportMODIPFile")
    self.setPath(path)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

#
# Import all the CCIR data files from the specified directory.
#
# Name Type   Description
# ---- ------ ---------------
# Path string Directory path.
#

class ImportCCIRFilesFromDirectory(CommandBase):

  def __init__(self, path):
    CommandBase.__init__(self, "ImportCCIRFilesFromDirectory")
    self.setPath(path)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

#
# Import GLONASS almanac file
#
# Name Type   Description
# ---- ------ -----------------
# Path string Almanac file path
#

class ImportGlonassAlmanac(CommandBase):

  def __init__(self, path):
    CommandBase.__init__(self, "ImportGlonassAlmanac")
    self.setPath(path)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

#
# Import NMEA track file
#
# Name Type   Description
# ---- ------ --------------
# Path string NMEA file path
#

class ImportNmeaTrack(CommandBase):

  def __init__(self, path):
    CommandBase.__init__(self, "ImportNmeaTrack")
    self.setPath(path)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

#
# Clear NMEA trajectory file
#
#

class ClearVehiculeTrajectory(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "ClearVehiculeTrajectory")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Set the default vehicle antenna model.
#
# Name Type   Description
# ---- ------ ---------------------------
# Name string Default antenna model name.
#

class SetDefaultVehicleAntennaModel(CommandBase):

  def __init__(self, name):
    CommandBase.__init__(self, "SetDefaultVehicleAntennaModel")
    self.setName(name)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Get the default vehicle antenna model.
#
#

class GetDefaultVehicleAntennaModel(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetDefaultVehicleAntennaModel")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetDefaultVehicleAntennaModel.
#
# Name Type   Description
# ---- ------ ---------------------------
# Name string Default antenna model name.
#

class GetDefaultVehicleAntennaModelResult(CommandResult):

  def __init__(self, name):
    CommandResult.__init__(self, "GetDefaultVehicleAntennaModelResult")
    self.setName(name)

  def isSuccess(self):
    return True

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Get a list of all vehicle antenna names
#
#

class GetAllVehicleAntennaNames(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetAllVehicleAntennaNames")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetAllVehicleAntennaNames.
#
# Name         Type         Description
# ------------ ------------ -----------------------------
# AntennaNames array string A list of antenna model names
#

class GetAllVehicleAntennaNamesResult(CommandResult):

  def __init__(self, antennaNames):
    CommandResult.__init__(self, "GetAllVehicleAntennaNamesResult")
    self.setAntennaNames(antennaNames)

  def isSuccess(self):
    return True

  def antennaNames(self):
    return self.get("AntennaNames")

  def setAntennaNames(self, value):
    return self.set("AntennaNames", value)

#
# Set Vehicle gain antenna pattern. If no name is specified, the command is aplied to Basic vehicle Antenna.
#
# Name Type               Description
# ---- ------------------ -------------------------------------------------------------------------------------------------------------------------
# Gain array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
# Type AntennaPatternType Pattern type
# Band GNSSBand           Frequency band
# Name optional string    Vehicle antenna name
#

class SetVehicleAntennaGain(CommandBase):

  def __init__(self, gain, type, band, name = None):
    CommandBase.__init__(self, "SetVehicleAntennaGain")
    self.setGain(gain)
    self.setType(type)
    self.setBand(band)
    self.setName(name)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def gain(self):
    return self.get("Gain")

  def setGain(self, value):
    return self.set("Gain", value)

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Get Vehicle gain antenna pattern. If no name is specified, the command is aplied to Basic vehicle Antenna.
#
# Name Type            Description
# ---- --------------- --------------------
# Band GNSSBand        Frequency band
# Name optional string Vehicle antenna name
#

class GetVehicleAntennaGain(CommandBase):

  def __init__(self, band, name = None):
    CommandBase.__init__(self, "GetVehicleAntennaGain")
    self.setBand(band)
    self.setName(name)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Result of GetVehicleAntennaGain.
#
# Name Type               Description
# ---- ------------------ -------------------------------------------------------------------------------------------------------------------------
# Gain array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
# Type AntennaPatternType Pattern type
# Band GNSSBand           Frequency band
# Name optional string    Vehicle antenna name
#

class GetVehicleAntennaGainResult(CommandResult):

  def __init__(self, gain, type, band, name = None):
    CommandResult.__init__(self, "GetVehicleAntennaGainResult")
    self.setGain(gain)
    self.setType(type)
    self.setBand(band)
    self.setName(name)

  def isSuccess(self):
    return True

  def gain(self):
    return self.get("Gain")

  def setGain(self, value):
    return self.set("Gain", value)

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Set Vehicle phase offset antenna pattern. If no name is specified, the command is aplied to Basic Vehicle Antenna.
#
# Name        Type               Description
# ----------- ------------------ ----------------------------------------------------------------------------------------------------------------------------------
# PhaseOffset array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
# Type        AntennaPatternType Pattern type
# Band        GNSSBand           Frequency band
# Name        optional string    Vehicle antenna name
#

class SetVehicleAntennaPhaseOffset(CommandBase):

  def __init__(self, phaseOffset, type, band, name = None):
    CommandBase.__init__(self, "SetVehicleAntennaPhaseOffset")
    self.setPhaseOffset(phaseOffset)
    self.setType(type)
    self.setBand(band)
    self.setName(name)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def phaseOffset(self):
    return self.get("PhaseOffset")

  def setPhaseOffset(self, value):
    return self.set("PhaseOffset", value)

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Get Vehicle phase offset antenna pattern. If no name is specified, the command is aplied to Basic Vehicle Antenna.
#
# Name Type            Description
# ---- --------------- --------------------
# Band GNSSBand        Frequency band
# Name optional string Vehicle antenna name
#

class GetVehicleAntennaPhaseOffset(CommandBase):

  def __init__(self, band, name = None):
    CommandBase.__init__(self, "GetVehicleAntennaPhaseOffset")
    self.setBand(band)
    self.setName(name)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Result of GetVehicleAntennaPhaseOffset.
#
# Name        Type               Description
# ----------- ------------------ ----------------------------------------------------------------------------------------------------------------------------------
# PhaseOffset array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
# Type        AntennaPatternType Pattern type
# Band        GNSSBand           Frequency band
# Name        optional string    Vehicle antenna name
#

class GetVehicleAntennaPhaseOffsetResult(CommandResult):

  def __init__(self, phaseOffset, type, band, name = None):
    CommandResult.__init__(self, "GetVehicleAntennaPhaseOffsetResult")
    self.setPhaseOffset(phaseOffset)
    self.setType(type)
    self.setBand(band)
    self.setName(name)

  def isSuccess(self):
    return True

  def phaseOffset(self):
    return self.get("PhaseOffset")

  def setPhaseOffset(self, value):
    return self.set("PhaseOffset", value)

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Set vehicle gain antenna pattern from a CSV file. If no name is specified, the command is aplied to Basic vehicle Antenna.
#
# Name     Type               Description
# -------- ------------------ ----------------------------------------------------------------------------------------------------------------------
# FilePath string             File path of the CSV (see user manual for CSV file format details). For Default and None types, leave this field empty
# Type     AntennaPatternType Pattern type
# Band     GNSSBand           Frequency band
# Name     optional string    Vehicle antenna name
#

class SetVehicleAntennaGainCSV(CommandBase):

  def __init__(self, filePath, type, band, name = None):
    CommandBase.__init__(self, "SetVehicleAntennaGainCSV")
    self.setFilePath(filePath)
    self.setType(type)
    self.setBand(band)
    self.setName(name)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def filePath(self):
    return self.get("FilePath")

  def setFilePath(self, value):
    return self.set("FilePath", value)

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Set vehicle phase offset antenna pattern from a CSV file. If no name is specified, the command is aplied to Basic vehicle Antenna.
#
# Name       Type                   Description
# ---------- ---------------------- ------------------------------------------------------------------------------------------------------------------
# FilePath   string                 File path of the CSV. For Default and None type, lets it empty. See formats in user manual part 8.7.9.2.1. Models.
# FileFormat AntennaPatternFileType Values' unit of the CSV File: "Degrees", "Radians" or "NoneFile" in case of None-pattern type.
# Type       AntennaPatternType     Pattern type
# Band       GNSSBand               Frequency band
# Name       optional string        Vehicle antenna name
#

class SetVehicleAntennaPhaseOffsetCSV(CommandBase):

  def __init__(self, filePath, fileFormat, type, band, name = None):
    CommandBase.__init__(self, "SetVehicleAntennaPhaseOffsetCSV")
    self.setFilePath(filePath)
    self.setFileFormat(fileFormat)
    self.setType(type)
    self.setBand(band)
    self.setName(name)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def filePath(self):
    return self.get("FilePath")

  def setFilePath(self, value):
    return self.set("FilePath", value)

  def fileFormat(self):
    return self.get("FileFormat")

  def setFileFormat(self, value):
    return self.set("FileFormat", value)

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Add an offset (in db) for all values of the pattern.
#
# Name        Type            Description
# ----------- --------------- ------------------------------------------------------------------------------------
# Band        GNSSBand        Offset will be apply to this band.
# Offset      double          Power offset
# AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
#

class AddVehicleGainPatternOffset(CommandBase):

  def __init__(self, band, offset, antennaName = None):
    CommandBase.__init__(self, "AddVehicleGainPatternOffset")
    self.setBand(band)
    self.setOffset(offset)
    self.setAntennaName(antennaName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

  def antennaName(self):
    return self.get("AntennaName")

  def setAntennaName(self, value):
    return self.set("AntennaName", value)

#
# Get the offset (in dB) for the antenna gain pattern of the band.
#
# Name        Type            Description
# ----------- --------------- ------------------------------------------------------------------------------------
# Band        GNSSBand        Offset will be apply to this band.
# AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
#

class GetVehicleGainPatternOffset(CommandBase):

  def __init__(self, band, antennaName = None):
    CommandBase.__init__(self, "GetVehicleGainPatternOffset")
    self.setBand(band)
    self.setAntennaName(antennaName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def antennaName(self):
    return self.get("AntennaName")

  def setAntennaName(self, value):
    return self.set("AntennaName", value)

#
# Result of GetVehicleGainPatternOffset.
#
# Name        Type            Description
# ----------- --------------- ------------------------------------------------------------------------------------
# Band        GNSSBand        Offset will be apply to this band.
# Offset      double          Power offset
# AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
#

class GetVehicleGainPatternOffsetResult(CommandResult):

  def __init__(self, band, offset, antennaName = None):
    CommandResult.__init__(self, "GetVehicleGainPatternOffsetResult")
    self.setBand(band)
    self.setOffset(offset)
    self.setAntennaName(antennaName)

  def isSuccess(self):
    return True

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

  def antennaName(self):
    return self.get("AntennaName")

  def setAntennaName(self, value):
    return self.set("AntennaName", value)

#
# Add an offset (in rad) for all values of the phase pattern.
#
# Name        Type            Description
# ----------- --------------- ------------------------------------------------------------------------------------
# Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
# Offset      double          Phase offset (in rad)
# AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
#

class AddVehiclePhasePatternOffset(CommandBase):

  def __init__(self, band, offset, antennaName = None):
    CommandBase.__init__(self, "AddVehiclePhasePatternOffset")
    self.setBand(band)
    self.setOffset(offset)
    self.setAntennaName(antennaName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

  def antennaName(self):
    return self.get("AntennaName")

  def setAntennaName(self, value):
    return self.set("AntennaName", value)

#
# Get the offset (in rad) for the antenna phase pattern of the band.
#
# Name        Type            Description
# ----------- --------------- ------------------------------------------------------------------------------------
# Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
# AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
#

class GetVehiclePhasePatternOffset(CommandBase):

  def __init__(self, band, antennaName = None):
    CommandBase.__init__(self, "GetVehiclePhasePatternOffset")
    self.setBand(band)
    self.setAntennaName(antennaName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def antennaName(self):
    return self.get("AntennaName")

  def setAntennaName(self, value):
    return self.set("AntennaName", value)

#
# Result of GetVehiclePhasePatternOffset.
#
# Name        Type            Description
# ----------- --------------- ------------------------------------------------------------------------------------
# Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
# Offset      double          Phase offset (in rad)
# AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
#

class GetVehiclePhasePatternOffsetResult(CommandResult):

  def __init__(self, band, offset, antennaName = None):
    CommandResult.__init__(self, "GetVehiclePhasePatternOffsetResult")
    self.setBand(band)
    self.setOffset(offset)
    self.setAntennaName(antennaName)

  def isSuccess(self):
    return True

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

  def antennaName(self):
    return self.get("AntennaName")

  def setAntennaName(self, value):
    return self.set("AntennaName", value)

#
# CSV file format of antenna pattern
#

class AntennaPatternFileType:
  NotAngle = 0
  Degrees = 1
  Radians = 2
  NoneFile = 3

#
# Set antenna offset and orientation relative to body frame.
# The origin of the body frame follows the vehicle trajectory.
# When the body yaw/pitch/roll are zeros, the body X-axis is pointing north
#                          Y-axis is pointing east
#                          Z-axis is pointing down
# The antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and
# the Roll is rotating arond the X-axis of the body frame.
#
# Name  Type            Description
# ----- --------------- --------------------------------------------
# X     double          Antenna X offset in the body frame (meter)
# Y     double          Antenna Y offset in the body frame (meter)
# Z     double          Antenna Z offset in the body frame (meter)
# Yaw   double          Antenna Yaw offset in the body frame (rad)
# Pitch double          Antenna Pitch offset in the body frame (rad)
# Roll  double          Antenna Roll offset in the body frame (rad)
# Name  optional string Unique vehicle antenna name
#

class SetVehicleAntennaOffset(CommandBase):

  def __init__(self, x, y, z, yaw, pitch, roll, name = None):
    CommandBase.__init__(self, "SetVehicleAntennaOffset")
    self.setX(x)
    self.setY(y)
    self.setZ(z)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)
    self.setName(name)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Get the vehicle antenna offset infos. If no name is specified, the default vehicle antenna is get.
#
# Name Type            Description
# ---- --------------- ---------------------------
# Name optional string Unique vehicle antenna name
#

class GetVehicleAntennaOffset(CommandBase):

  def __init__(self, name = None):
    CommandBase.__init__(self, "GetVehicleAntennaOffset")
    self.setName(name)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Result of GetVehicleAntennaOffset.
#
# Name  Type            Description
# ----- --------------- --------------------------------------------
# X     double          Antenna X offset in the body frame (meter)
# Y     double          Antenna Y offset in the body frame (meter)
# Z     double          Antenna Z offset in the body frame (meter)
# Yaw   double          Antenna Yaw offset in the body frame (rad)
# Pitch double          Antenna Pitch offset in the body frame (rad)
# Roll  double          Antenna Roll offset in the body frame (rad)
# Name  optional string Unique vehicle antenna name
#

class GetVehicleAntennaOffsetResult(CommandResult):

  def __init__(self, x, y, z, yaw, pitch, roll, name = None):
    CommandResult.__init__(self, "GetVehicleAntennaOffsetResult")
    self.setX(x)
    self.setY(y)
    self.setZ(z)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)
    self.setName(name)

  def isSuccess(self):
    return True

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Create an empty vehicle antenna model.
#
# Name Type   Description
# ---- ------ --------------------------
# Name string Vehicle antenna model name
#

class AddEmptyVehicleAntennaModel(CommandBase):

  def __init__(self, name):
    CommandBase.__init__(self, "AddEmptyVehicleAntennaModel")
    self.setName(name)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Delete a vehicle antenna model. The default vehicle antenna model can't be deleted.
#
# Name Type   Description
# ---- ------ --------------------------
# Name string Vehicle antenna model name
#

class DeleteVehicleAntennaModel(CommandBase):

  def __init__(self, name):
    CommandBase.__init__(self, "DeleteVehicleAntennaModel")
    self.setName(name)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Rename a vehicle antenna model.
#
# Name    Type   Description
# ------- ------ ------------------------------------
# Name    string Reference vehicle antenna model name
# NewName string New vehicle antenna model name
#

class RenameVehicleAntennaModel(CommandBase):

  def __init__(self, name, newName):
    CommandBase.__init__(self, "RenameVehicleAntennaModel")
    self.setName(name)
    self.setNewName(newName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

  def newName(self):
    return self.get("NewName")

  def setNewName(self, value):
    return self.set("NewName", value)

#
# Copy a vehicle antenna model.
#
# Name     Type   Description
# -------- ------ ------------------------------------
# Name     string Reference vehicle antenna model name
# CopyName string Copy vehicle antenna model name
#

class CopyVehicleAntennaModel(CommandBase):

  def __init__(self, name, copyName):
    CommandBase.__init__(self, "CopyVehicleAntennaModel")
    self.setName(name)
    self.setCopyName(copyName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

  def copyName(self):
    return self.get("CopyName")

  def setCopyName(self, value):
    return self.set("CopyName", value)

#
# Get  all infos about this antenna model.
#
# Name Type   Description
# ---- ------ --------------------------
# Name string Vehicle antenna model name
#

class GetVehicleAntennaModel(CommandBase):

  def __init__(self, name):
    CommandBase.__init__(self, "GetVehicleAntennaModel")
    self.setName(name)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Result of GetVehicleAntennaModel.
#
# Name                 Type               Description
# -------------------- ------------------ ----------------------------------------------------------------------------------------------------------------------------------
# GainL1               array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
# GainTypeL1           AntennaPatternType Pattern type
# GainOffsetL1         double             Pattern offset
# GainL2               array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
# GainTypeL2           AntennaPatternType Pattern type
# GainOffsetL2         double             Pattern offset
# GainL5               array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
# GainTypeL5           AntennaPatternType Pattern type
# GainOffsetL5         double             Pattern offset
# GainE6               array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
# GainTypeE6           AntennaPatternType Pattern type
# GainOffsetE6         double             Pattern offset
# PhaseOffsetL1        array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
# PhaseOffsetTypeL1    AntennaPatternType Pattern type
# PhasePatternOffsetL1 double             Pattern offset
# PhaseOffsetL2        array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
# PhaseOffsetTypeL2    AntennaPatternType Pattern type
# PhasePatternOffsetL2 double             Pattern offset
# PhaseOffsetL5        array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
# PhaseOffsetTypeL5    AntennaPatternType Pattern type
# PhasePatternOffsetL5 double             Pattern offset
# PhaseOffsetE6        array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
# PhaseOffsetTypeE6    AntennaPatternType Pattern type
# PhasePatternOffsetE6 double             Pattern offset
# X                    double             Antenna X offset in the body frame (meter)
# Y                    double             Antenna Y offset in the body frame (meter)
# Z                    double             Antenna Z offset in the body frame (meter)
# Yaw                  double             Antenna Yaw offset in the body frame (rad)
# Pitch                double             Antenna Pitch offset in the body frame (rad)
# Roll                 double             Antenna Roll offset in the body frame (rad)
# Name                 string             Vehicle antenna model name
#

class GetVehicleAntennaModelResult(CommandResult):

  def __init__(self, gainL1, gainTypeL1, gainOffsetL1, gainL2, gainTypeL2, gainOffsetL2, gainL5, gainTypeL5, gainOffsetL5, gainE6, gainTypeE6, gainOffsetE6, phaseOffsetL1, phaseOffsetTypeL1, phasePatternOffsetL1, phaseOffsetL2, phaseOffsetTypeL2, phasePatternOffsetL2, phaseOffsetL5, phaseOffsetTypeL5, phasePatternOffsetL5, phaseOffsetE6, phaseOffsetTypeE6, phasePatternOffsetE6, x, y, z, yaw, pitch, roll, name):
    CommandResult.__init__(self, "GetVehicleAntennaModelResult")
    self.setGainL1(gainL1)
    self.setGainTypeL1(gainTypeL1)
    self.setGainOffsetL1(gainOffsetL1)
    self.setGainL2(gainL2)
    self.setGainTypeL2(gainTypeL2)
    self.setGainOffsetL2(gainOffsetL2)
    self.setGainL5(gainL5)
    self.setGainTypeL5(gainTypeL5)
    self.setGainOffsetL5(gainOffsetL5)
    self.setGainE6(gainE6)
    self.setGainTypeE6(gainTypeE6)
    self.setGainOffsetE6(gainOffsetE6)
    self.setPhaseOffsetL1(phaseOffsetL1)
    self.setPhaseOffsetTypeL1(phaseOffsetTypeL1)
    self.setPhasePatternOffsetL1(phasePatternOffsetL1)
    self.setPhaseOffsetL2(phaseOffsetL2)
    self.setPhaseOffsetTypeL2(phaseOffsetTypeL2)
    self.setPhasePatternOffsetL2(phasePatternOffsetL2)
    self.setPhaseOffsetL5(phaseOffsetL5)
    self.setPhaseOffsetTypeL5(phaseOffsetTypeL5)
    self.setPhasePatternOffsetL5(phasePatternOffsetL5)
    self.setPhaseOffsetE6(phaseOffsetE6)
    self.setPhaseOffsetTypeE6(phaseOffsetTypeE6)
    self.setPhasePatternOffsetE6(phasePatternOffsetE6)
    self.setX(x)
    self.setY(y)
    self.setZ(z)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)
    self.setName(name)

  def isSuccess(self):
    return True

  def gainL1(self):
    return self.get("GainL1")

  def setGainL1(self, value):
    return self.set("GainL1", value)

  def gainTypeL1(self):
    return self.get("GainTypeL1")

  def setGainTypeL1(self, value):
    return self.set("GainTypeL1", value)

  def gainOffsetL1(self):
    return self.get("GainOffsetL1")

  def setGainOffsetL1(self, value):
    return self.set("GainOffsetL1", value)

  def gainL2(self):
    return self.get("GainL2")

  def setGainL2(self, value):
    return self.set("GainL2", value)

  def gainTypeL2(self):
    return self.get("GainTypeL2")

  def setGainTypeL2(self, value):
    return self.set("GainTypeL2", value)

  def gainOffsetL2(self):
    return self.get("GainOffsetL2")

  def setGainOffsetL2(self, value):
    return self.set("GainOffsetL2", value)

  def gainL5(self):
    return self.get("GainL5")

  def setGainL5(self, value):
    return self.set("GainL5", value)

  def gainTypeL5(self):
    return self.get("GainTypeL5")

  def setGainTypeL5(self, value):
    return self.set("GainTypeL5", value)

  def gainOffsetL5(self):
    return self.get("GainOffsetL5")

  def setGainOffsetL5(self, value):
    return self.set("GainOffsetL5", value)

  def gainE6(self):
    return self.get("GainE6")

  def setGainE6(self, value):
    return self.set("GainE6", value)

  def gainTypeE6(self):
    return self.get("GainTypeE6")

  def setGainTypeE6(self, value):
    return self.set("GainTypeE6", value)

  def gainOffsetE6(self):
    return self.get("GainOffsetE6")

  def setGainOffsetE6(self, value):
    return self.set("GainOffsetE6", value)

  def phaseOffsetL1(self):
    return self.get("PhaseOffsetL1")

  def setPhaseOffsetL1(self, value):
    return self.set("PhaseOffsetL1", value)

  def phaseOffsetTypeL1(self):
    return self.get("PhaseOffsetTypeL1")

  def setPhaseOffsetTypeL1(self, value):
    return self.set("PhaseOffsetTypeL1", value)

  def phasePatternOffsetL1(self):
    return self.get("PhasePatternOffsetL1")

  def setPhasePatternOffsetL1(self, value):
    return self.set("PhasePatternOffsetL1", value)

  def phaseOffsetL2(self):
    return self.get("PhaseOffsetL2")

  def setPhaseOffsetL2(self, value):
    return self.set("PhaseOffsetL2", value)

  def phaseOffsetTypeL2(self):
    return self.get("PhaseOffsetTypeL2")

  def setPhaseOffsetTypeL2(self, value):
    return self.set("PhaseOffsetTypeL2", value)

  def phasePatternOffsetL2(self):
    return self.get("PhasePatternOffsetL2")

  def setPhasePatternOffsetL2(self, value):
    return self.set("PhasePatternOffsetL2", value)

  def phaseOffsetL5(self):
    return self.get("PhaseOffsetL5")

  def setPhaseOffsetL5(self, value):
    return self.set("PhaseOffsetL5", value)

  def phaseOffsetTypeL5(self):
    return self.get("PhaseOffsetTypeL5")

  def setPhaseOffsetTypeL5(self, value):
    return self.set("PhaseOffsetTypeL5", value)

  def phasePatternOffsetL5(self):
    return self.get("PhasePatternOffsetL5")

  def setPhasePatternOffsetL5(self, value):
    return self.set("PhasePatternOffsetL5", value)

  def phaseOffsetE6(self):
    return self.get("PhaseOffsetE6")

  def setPhaseOffsetE6(self, value):
    return self.set("PhaseOffsetE6", value)

  def phaseOffsetTypeE6(self):
    return self.get("PhaseOffsetTypeE6")

  def setPhaseOffsetTypeE6(self, value):
    return self.set("PhaseOffsetTypeE6", value)

  def phasePatternOffsetE6(self):
    return self.get("PhasePatternOffsetE6")

  def setPhasePatternOffsetE6(self, value):
    return self.set("PhasePatternOffsetE6", value)

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Import a vehicle antenna model from a XML file.
#
# Name     Type   Description
# -------- ------ ------------------------------
# FilePath string File path of the antenna model
#

class ImportVehicleAntennaModel(CommandBase):

  def __init__(self, filePath):
    CommandBase.__init__(self, "ImportVehicleAntennaModel")
    self.setFilePath(filePath)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def filePath(self):
    return self.get("FilePath")

  def setFilePath(self, value):
    return self.set("FilePath", value)

#
# Export a vehicle antenna model in a XML file.
#
# Name        Type   Description
# ----------- ------ -----------------------------------------------------
# AntennaName string Vehicle antenna model name
# FilePath    string The antenna model will be exported in this file path.
# Overwriting bool   Overwrite the old file if true.
#

class ExportVehicleAntennaModel(CommandBase):

  def __init__(self, antennaName, filePath, overwriting):
    CommandBase.__init__(self, "ExportVehicleAntennaModel")
    self.setAntennaName(antennaName)
    self.setFilePath(filePath)
    self.setOverwriting(overwriting)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def antennaName(self):
    return self.get("AntennaName")

  def setAntennaName(self, value):
    return self.set("AntennaName", value)

  def filePath(self):
    return self.get("FilePath")

  def setFilePath(self, value):
    return self.set("FilePath", value)

  def overwriting(self):
    return self.get("Overwriting")

  def setOverwriting(self, value):
    return self.set("Overwriting", value)

#
# Add/edit an antenna change.
#
# Name      Type   Description
# --------- ------ --------------------------------------------------
# StartTime double Elapsed time in seconds since start of simulation.
# Antenna   string Antenna model name
# Id        string Unique identifier of the event
#

class SetAntennaChange(CommandBase):

  def __init__(self, startTime, antenna, id):
    CommandBase.__init__(self, "SetAntennaChange")
    self.setStartTime(startTime)
    self.setAntenna(antenna)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def antenna(self):
    return self.get("Antenna")

  def setAntenna(self, value):
    return self.set("Antenna", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get an antenna change.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Unique identifier of the event
#

class GetAntennaChange(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetAntennaChange")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetAntennaChange.
#
# Name      Type   Description
# --------- ------ --------------------------------------------------
# StartTime double Elapsed time in seconds since start of simulation.
# Antenna   string Antenna model name
# Id        string Unique identifier of the event
#

class GetAntennaChangeResult(CommandResult):

  def __init__(self, startTime, antenna, id):
    CommandResult.__init__(self, "GetAntennaChangeResult")
    self.setStartTime(startTime)
    self.setAntenna(antenna)
    self.setId(id)

  def isSuccess(self):
    return True

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def antenna(self):
    return self.get("Antenna")

  def setAntenna(self, value):
    return self.set("Antenna", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Removes an antenna change.
#
# Name Type   Description
# ---- ------ -------------------------------------
# Id   string Unique identifier (see AntennaChange)
#

class RemoveAntennaChange(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "RemoveAntennaChange")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Clear all antenna changes.
#
#

class ClearAllAntennaChanges(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "ClearAllAntennaChanges")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Set WF antenna offset and orientation relative to body frame.
# The origin of the body frame follows the vehicle trajectory.
# When the body yaw/pitch/roll are zeros, the body X-axis is pointing north
#                          Y-axis is pointing east
#                          Z-axis is pointing down
# The antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and
# the Roll is rotating arond the X-axis of the body frame.
#
# Name  Type   Description
# ----- ------ -----------------------------------------------
# X     double WF Antenna X offset in the body frame (meter)
# Y     double WF Antenna Y offset in the body frame (meter)
# Z     double WF Antenna Z offset in the body frame (meter)
# Yaw   double WF Antenna Yaw offset in the body frame (rad)
# Pitch double WF Antenna Pitch offset in the body frame (rad)
# Roll  double WF Antenna Roll offset in the body frame (rad)
#

class SetWFAntennaOffset(CommandBase):

  def __init__(self, x, y, z, yaw, pitch, roll):
    CommandBase.__init__(self, "SetWFAntennaOffset")
    self.setX(x)
    self.setY(y)
    self.setZ(z)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

#
# Get the WF antenna offset infos.
#
#

class GetWFAntennaOffset(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetWFAntennaOffset")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetWFAntennaOffset.
#
# Name  Type   Description
# ----- ------ -----------------------------------------------
# X     double WF Antenna X offset in the body frame (meter)
# Y     double WF Antenna Y offset in the body frame (meter)
# Z     double WF Antenna Z offset in the body frame (meter)
# Yaw   double WF Antenna Yaw offset in the body frame (rad)
# Pitch double WF Antenna Pitch offset in the body frame (rad)
# Roll  double WF Antenna Roll offset in the body frame (rad)
#

class GetWFAntennaOffsetResult(CommandResult):

  def __init__(self, x, y, z, yaw, pitch, roll):
    CommandResult.__init__(self, "GetWFAntennaOffsetResult")
    self.setX(x)
    self.setY(y)
    self.setZ(z)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)

  def isSuccess(self):
    return True

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

#
# Set WF antenna offset and orientation relative to CRPA Antenna frame for the specified element index.
#
# Name    Type   Description
# ------- ------ -------------------------------------------------------
# X       double WF Element X offset in the CRPA antenna frame (meter)
# Y       double WF Element Y offset in the CRPA antenna frame (meter)
# Z       double WF Element Z offset in the CRPA antenna frame (meter)
# Yaw     double WF Element Yaw offset in the CRPA antenna frame (rad)
# Pitch   double WF Element Pitch offset in the CRPA antenna frame (rad)
# Roll    double WF Element Roll offset in the CRPA antenna frame (rad)
# Element int    One-based index for element in antenna.
#

class SetWFAntennaElementOffset(CommandBase):

  def __init__(self, x, y, z, yaw, pitch, roll, element):
    CommandBase.__init__(self, "SetWFAntennaElementOffset")
    self.setX(x)
    self.setY(y)
    self.setZ(z)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)
    self.setElement(element)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

  def element(self):
    return self.get("Element")

  def setElement(self, value):
    return self.set("Element", value)

#
# Get the WF antenna offset infos for this element.
#
# Name    Type Description
# ------- ---- ---------------------------------------
# Element int  One-based index for element in antenna.
#

class GetWFAntennaElementOffset(CommandBase):

  def __init__(self, element):
    CommandBase.__init__(self, "GetWFAntennaElementOffset")
    self.setElement(element)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def element(self):
    return self.get("Element")

  def setElement(self, value):
    return self.set("Element", value)

#
# Result of GetWFAntennaElementOffset.
#
# Name    Type   Description
# ------- ------ -------------------------------------------------------
# X       double WF Element X offset in the CRPA antenna frame (meter)
# Y       double WF Element Y offset in the CRPA antenna frame (meter)
# Z       double WF Element Z offset in the CRPA antenna frame (meter)
# Yaw     double WF Element Yaw offset in the CRPA antenna frame (rad)
# Pitch   double WF Element Pitch offset in the CRPA antenna frame (rad)
# Roll    double WF Element Roll offset in the CRPA antenna frame (rad)
# Element int    One-based index for element in antenna.
#

class GetWFAntennaElementOffsetResult(CommandResult):

  def __init__(self, x, y, z, yaw, pitch, roll, element):
    CommandResult.__init__(self, "GetWFAntennaElementOffsetResult")
    self.setX(x)
    self.setY(y)
    self.setZ(z)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)
    self.setElement(element)

  def isSuccess(self):
    return True

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

  def element(self):
    return self.get("Element")

  def setElement(self, value):
    return self.set("Element", value)

#
# Set WF Antenna model for this element
#
# Name             Type   Description
# ---------------- ------ ----------------------------------------------------------------------------------------------------
# AntennaModelName string Antenna Model name to set for this element. Antenna models must be defined in vehicle antenna model.
# Element          int    One-based index for element in antenna.
#

class SetWFAntennaElementModel(CommandBase):

  def __init__(self, antennaModelName, element):
    CommandBase.__init__(self, "SetWFAntennaElementModel")
    self.setAntennaModelName(antennaModelName)
    self.setElement(element)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def antennaModelName(self):
    return self.get("AntennaModelName")

  def setAntennaModelName(self, value):
    return self.set("AntennaModelName", value)

  def element(self):
    return self.get("Element")

  def setElement(self, value):
    return self.set("Element", value)

#
# Get WF Antenna model for this element
#
# Name    Type Description
# ------- ---- ---------------------------------------
# Element int  One-based index for element in antenna.
#

class GetWFAntennaElementModel(CommandBase):

  def __init__(self, element):
    CommandBase.__init__(self, "GetWFAntennaElementModel")
    self.setElement(element)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def element(self):
    return self.get("Element")

  def setElement(self, value):
    return self.set("Element", value)

#
# Result of GetWFAntennaElementModel.
#
# Name             Type   Description
# ---------------- ------ ----------------------------------------------------------------------------------------------------
# AntennaModelName string Antenna Model name to set for this element. Antenna models must be defined in vehicle antenna model.
# Element          int    One-based index for element in antenna.
#

class GetWFAntennaElementModelResult(CommandResult):

  def __init__(self, antennaModelName, element):
    CommandResult.__init__(self, "GetWFAntennaElementModelResult")
    self.setAntennaModelName(antennaModelName)
    self.setElement(element)

  def isSuccess(self):
    return True

  def antennaModelName(self):
    return self.get("AntennaModelName")

  def setAntennaModelName(self, value):
    return self.set("AntennaModelName", value)

  def element(self):
    return self.get("Element")

  def setElement(self, value):
    return self.set("Element", value)

#
# Set WF Antenna phase pattern offset (in rad) for this element
#
# Name        Type   Description
# ----------- ------ -------------------------------------------------------------------------
# PhaseOffset double Antenna phase pattern offset (in rad) to set for this element. [-Pi ; Pi]
# Element     int    One-based index for element in antenna.
#

class SetWFAntennaElementPhasePatternOffset(CommandBase):

  def __init__(self, phaseOffset, element):
    CommandBase.__init__(self, "SetWFAntennaElementPhasePatternOffset")
    self.setPhaseOffset(phaseOffset)
    self.setElement(element)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def phaseOffset(self):
    return self.get("PhaseOffset")

  def setPhaseOffset(self, value):
    return self.set("PhaseOffset", value)

  def element(self):
    return self.get("Element")

  def setElement(self, value):
    return self.set("Element", value)

#
# Get WF Antenna phase pattern offset (in rad) for this element
#
# Name    Type Description
# ------- ---- ---------------------------------------
# Element int  One-based index for element in antenna.
#

class GetWFAntennaElementPhasePatternOffset(CommandBase):

  def __init__(self, element):
    CommandBase.__init__(self, "GetWFAntennaElementPhasePatternOffset")
    self.setElement(element)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def element(self):
    return self.get("Element")

  def setElement(self, value):
    return self.set("Element", value)

#
# Result of GetWFAntennaElementPhasePatternOffset.
#
# Name        Type   Description
# ----------- ------ -------------------------------------------------------------------------
# PhaseOffset double Antenna phase pattern offset (in rad) to set for this element. [-Pi ; Pi]
# Element     int    One-based index for element in antenna.
#

class GetWFAntennaElementPhasePatternOffsetResult(CommandResult):

  def __init__(self, phaseOffset, element):
    CommandResult.__init__(self, "GetWFAntennaElementPhasePatternOffsetResult")
    self.setPhaseOffset(phaseOffset)
    self.setElement(element)

  def isSuccess(self):
    return True

  def phaseOffset(self):
    return self.get("PhaseOffset")

  def setPhaseOffset(self, value):
    return self.set("PhaseOffset", value)

  def element(self):
    return self.get("Element")

  def setElement(self, value):
    return self.set("Element", value)

#
# Set WF antenna element enabled or disabled. A disabled antenna element is not simulated at all.
#
# Name    Type Description
# ------- ---- -------------------------------------------------
# Element int  One-based index for element in antenna.
# Enabled bool If True, this antenna element will bil simulated.
#

class SetWFAntennaElementEnabled(CommandBase):

  def __init__(self, element, enabled):
    CommandBase.__init__(self, "SetWFAntennaElementEnabled")
    self.setElement(element)
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def element(self):
    return self.get("Element")

  def setElement(self, value):
    return self.set("Element", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Get whether an antenna element is enabled or disabled.
#
# Name    Type Description
# ------- ---- ---------------------------------------
# Element int  One-based index for element in antenna.
#

class IsWFAntennaElementEnabled(CommandBase):

  def __init__(self, element):
    CommandBase.__init__(self, "IsWFAntennaElementEnabled")
    self.setElement(element)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def element(self):
    return self.get("Element")

  def setElement(self, value):
    return self.set("Element", value)

#
# Result of IsWFAntennaElementEnabled.
#
# Name    Type Description
# ------- ---- -------------------------------------------------
# Element int  One-based index for element in antenna.
# Enabled bool If True, this antenna element will bil simulated.
#

class IsWFAntennaElementEnabledResult(CommandResult):

  def __init__(self, element, enabled):
    CommandResult.__init__(self, "IsWFAntennaElementEnabledResult")
    self.setElement(element)
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def element(self):
    return self.get("Element")

  def setElement(self, value):
    return self.set("Element", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Get a list of all space vehicle antenna names.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class GetAllSVAntennaNames(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "GetAllSVAntennaNames")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Result of GetAllSVAntennaNames.
#
# Name         Type         Description
# ------------ ------------ ----------------------------------------------------------------
# System       string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# AntennaNames array string A list of antenna model names.
#

class GetAllSVAntennaNamesResult(CommandResult):

  def __init__(self, system, antennaNames):
    CommandResult.__init__(self, "GetAllSVAntennaNamesResult")
    self.setSystem(system)
    self.setAntennaNames(antennaNames)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def antennaNames(self):
    return self.get("AntennaNames")

  def setAntennaNames(self, value):
    return self.set("AntennaNames", value)

#
# Add an offset (in dB) for all values of the pattern.
#
# Name        Type            Description
# ----------- --------------- ------------------------------------------------------------------------------------
# Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
# System      string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Offset      double          Power offset
# AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
#

class AddSVGainPatternOffset(CommandBase):

  def __init__(self, band, system, offset, antennaName = None):
    CommandBase.__init__(self, "AddSVGainPatternOffset")
    self.setBand(band)
    self.setSystem(system)
    self.setOffset(offset)
    self.setAntennaName(antennaName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

  def antennaName(self):
    return self.get("AntennaName")

  def setAntennaName(self, value):
    return self.set("AntennaName", value)

#
# Get the offset (in dB) for the antenna gain pattern of the band.
#
# Name        Type            Description
# ----------- --------------- ------------------------------------------------------------------------------------
# Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
# System      string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
#

class GetSVGainPatternOffset(CommandBase):

  def __init__(self, band, system, antennaName = None):
    CommandBase.__init__(self, "GetSVGainPatternOffset")
    self.setBand(band)
    self.setSystem(system)
    self.setAntennaName(antennaName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def antennaName(self):
    return self.get("AntennaName")

  def setAntennaName(self, value):
    return self.set("AntennaName", value)

#
# Result of GetSVGainPatternOffset.
#
# Name        Type            Description
# ----------- --------------- ------------------------------------------------------------------------------------
# Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
# System      string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Offset      double          Power offset
# AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
#

class GetSVGainPatternOffsetResult(CommandResult):

  def __init__(self, band, system, offset, antennaName = None):
    CommandResult.__init__(self, "GetSVGainPatternOffsetResult")
    self.setBand(band)
    self.setSystem(system)
    self.setOffset(offset)
    self.setAntennaName(antennaName)

  def isSuccess(self):
    return True

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

  def antennaName(self):
    return self.get("AntennaName")

  def setAntennaName(self, value):
    return self.set("AntennaName", value)

#
# Add an offset (in rad) for all values of the phase pattern.
#
# Name        Type            Description
# ----------- --------------- ------------------------------------------------------------------------------------
# Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
# System      string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Offset      double          Phase offset (in rad)
# AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
#

class AddSVPhasePatternOffset(CommandBase):

  def __init__(self, band, system, offset, antennaName = None):
    CommandBase.__init__(self, "AddSVPhasePatternOffset")
    self.setBand(band)
    self.setSystem(system)
    self.setOffset(offset)
    self.setAntennaName(antennaName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

  def antennaName(self):
    return self.get("AntennaName")

  def setAntennaName(self, value):
    return self.set("AntennaName", value)

#
# Get the offset (in rad) for the antenna phase pattern of the band.
#
# Name        Type            Description
# ----------- --------------- ------------------------------------------------------------------------------------
# Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
# System      string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
#

class GetSVPhasePatternOffset(CommandBase):

  def __init__(self, band, system, antennaName = None):
    CommandBase.__init__(self, "GetSVPhasePatternOffset")
    self.setBand(band)
    self.setSystem(system)
    self.setAntennaName(antennaName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def antennaName(self):
    return self.get("AntennaName")

  def setAntennaName(self, value):
    return self.set("AntennaName", value)

#
# Result of GetSVPhasePatternOffset.
#
# Name        Type            Description
# ----------- --------------- ------------------------------------------------------------------------------------
# Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
# System      string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Offset      double          Phase offset (in rad)
# AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
#

class GetSVPhasePatternOffsetResult(CommandResult):

  def __init__(self, band, system, offset, antennaName = None):
    CommandResult.__init__(self, "GetSVPhasePatternOffsetResult")
    self.setBand(band)
    self.setSystem(system)
    self.setOffset(offset)
    self.setAntennaName(antennaName)

  def isSuccess(self):
    return True

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

  def antennaName(self):
    return self.get("AntennaName")

  def setAntennaName(self, value):
    return self.set("AntennaName", value)

#
# Set space vehicle gain antenna pattern. If no name is specified, the command is aplied to Basic SV Antenna.
#
# Name   Type               Description
# ------ ------------------ -------------------------------------------------------------------------------------------------------------------------
# Gain   array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
# Type   AntennaPatternType Pattern type
# Band   GNSSBand           Frequency band
# System string             "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Name   optional string    SV antenna name
#

class SetSVAntennaGain(CommandBase):

  def __init__(self, gain, type, band, system, name = None):
    CommandBase.__init__(self, "SetSVAntennaGain")
    self.setGain(gain)
    self.setType(type)
    self.setBand(band)
    self.setSystem(system)
    self.setName(name)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def gain(self):
    return self.get("Gain")

  def setGain(self, value):
    return self.set("Gain", value)

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Get space vehicle gain antenna pattern. If no name is specified, the command is aplied to Basic SV Antenna.
#
# Name   Type            Description
# ------ --------------- ----------------------------------------------------------------
# Band   GNSSBand        Frequency band
# System string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Name   optional string SV antenna name
#

class GetSVAntennaGain(CommandBase):

  def __init__(self, band, system, name = None):
    CommandBase.__init__(self, "GetSVAntennaGain")
    self.setBand(band)
    self.setSystem(system)
    self.setName(name)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Result of GetSVAntennaGain.
#
# Name   Type               Description
# ------ ------------------ -------------------------------------------------------------------------------------------------------------------------
# Gain   array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
# Type   AntennaPatternType Pattern type
# Band   GNSSBand           Frequency band
# System string             "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Name   optional string    SV antenna name
#

class GetSVAntennaGainResult(CommandResult):

  def __init__(self, gain, type, band, system, name = None):
    CommandResult.__init__(self, "GetSVAntennaGainResult")
    self.setGain(gain)
    self.setType(type)
    self.setBand(band)
    self.setSystem(system)
    self.setName(name)

  def isSuccess(self):
    return True

  def gain(self):
    return self.get("Gain")

  def setGain(self, value):
    return self.set("Gain", value)

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Set space vehicle phase offset antenna pattern. If no name is specified, the command is aplied to Basic Vehicle Antenna.
#
# Name        Type               Description
# ----------- ------------------ ----------------------------------------------------------------------------------------------------------------------------------
# PhaseOffset array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
# Type        AntennaPatternType Pattern type
# Band        GNSSBand           Frequency band
# System      string             "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Name        optional string    SV antenna name
#

class SetSVAntennaPhaseOffset(CommandBase):

  def __init__(self, phaseOffset, type, band, system, name = None):
    CommandBase.__init__(self, "SetSVAntennaPhaseOffset")
    self.setPhaseOffset(phaseOffset)
    self.setType(type)
    self.setBand(band)
    self.setSystem(system)
    self.setName(name)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def phaseOffset(self):
    return self.get("PhaseOffset")

  def setPhaseOffset(self, value):
    return self.set("PhaseOffset", value)

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Get space vehicle phase offset antenna pattern. If no name is specified, the command is aplied to Basic Vehicle Antenna.
#
# Name   Type            Description
# ------ --------------- ----------------------------------------------------------------
# Band   GNSSBand        Frequency band
# System string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Name   optional string SV antenna name
#

class GetSVAntennaPhaseOffset(CommandBase):

  def __init__(self, band, system, name = None):
    CommandBase.__init__(self, "GetSVAntennaPhaseOffset")
    self.setBand(band)
    self.setSystem(system)
    self.setName(name)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Result of GetSVAntennaPhaseOffset.
#
# Name        Type               Description
# ----------- ------------------ ----------------------------------------------------------------------------------------------------------------------------------
# PhaseOffset array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
# Type        AntennaPatternType Pattern type
# Band        GNSSBand           Frequency band
# System      string             "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Name        optional string    SV antenna name
#

class GetSVAntennaPhaseOffsetResult(CommandResult):

  def __init__(self, phaseOffset, type, band, system, name = None):
    CommandResult.__init__(self, "GetSVAntennaPhaseOffsetResult")
    self.setPhaseOffset(phaseOffset)
    self.setType(type)
    self.setBand(band)
    self.setSystem(system)
    self.setName(name)

  def isSuccess(self):
    return True

  def phaseOffset(self):
    return self.get("PhaseOffset")

  def setPhaseOffset(self, value):
    return self.set("PhaseOffset", value)

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Set space vehicle gain antenna pattern from a CSV file. If no name is specified, the command is aplied to Basic SV Antenna.
#
# Name     Type               Description
# -------- ------------------ ------------------------------------------------------------------------------------------------------------------
# FilePath string             File path of the CSV. For Default and None type, lets it empty. See formats in user manual part 8.7.9.2.1. Models.
# Type     AntennaPatternType Pattern type
# Band     GNSSBand           Frequency band
# System   string             "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Name     optional string    Vehicle antenna name
#

class SetSVAntennaGainCSV(CommandBase):

  def __init__(self, filePath, type, band, system, name = None):
    CommandBase.__init__(self, "SetSVAntennaGainCSV")
    self.setFilePath(filePath)
    self.setType(type)
    self.setBand(band)
    self.setSystem(system)
    self.setName(name)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def filePath(self):
    return self.get("FilePath")

  def setFilePath(self, value):
    return self.set("FilePath", value)

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Set space vehicle phase offset antenna pattern from a CSV file. If no name is specified, the command is aplied to Basic SV Antenna.
#
# Name       Type                   Description
# ---------- ---------------------- ------------------------------------------------------------------------------------------------------------------
# FilePath   string                 File path of the CSV. For Default and None type, lets it empty. See formats in user manual part 8.7.9.2.1. Models.
# FileFormat AntennaPatternFileType Values' unit of the CSV File: "Degrees", "Radians" or "NoneFile" in case of None-pattern type.
# Type       AntennaPatternType     Pattern type
# Band       GNSSBand               Frequency band
# System     string                 "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Name       optional string        SV antenna name
#

class SetSVAntennaPhaseOffsetCSV(CommandBase):

  def __init__(self, filePath, fileFormat, type, band, system, name = None):
    CommandBase.__init__(self, "SetSVAntennaPhaseOffsetCSV")
    self.setFilePath(filePath)
    self.setFileFormat(fileFormat)
    self.setType(type)
    self.setBand(band)
    self.setSystem(system)
    self.setName(name)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def filePath(self):
    return self.get("FilePath")

  def setFilePath(self, value):
    return self.set("FilePath", value)

  def fileFormat(self):
    return self.get("FileFormat")

  def setFileFormat(self, value):
    return self.set("FileFormat", value)

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Create an empty space vehicle antenna model.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# Name   string SV antenna model name
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class AddEmptySVAntennaModel(CommandBase):

  def __init__(self, name, system):
    CommandBase.__init__(self, "AddEmptySVAntennaModel")
    self.setName(name)
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Delete a space vehicle antenna model. The default SV antenna model can't be deleted.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# Name   string SV antenna model name
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class DeleteSVAntennaModel(CommandBase):

  def __init__(self, name, system):
    CommandBase.__init__(self, "DeleteSVAntennaModel")
    self.setName(name)
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Rename a space vehicle antenna model.
#
# Name    Type   Description
# ------- ------ ----------------------------------------------------------------
# Name    string Reference space vehicle antenna model name
# NewName string New space vehicle antenna model name
# System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class RenameSVAntennaModel(CommandBase):

  def __init__(self, name, newName, system):
    CommandBase.__init__(self, "RenameSVAntennaModel")
    self.setName(name)
    self.setNewName(newName)
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

  def newName(self):
    return self.get("NewName")

  def setNewName(self, value):
    return self.set("NewName", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Copy a space vehicle antenna model.
#
# Name     Type   Description
# -------- ------ ----------------------------------------------------------------
# Name     string Reference space vehicle antenna model name
# CopyName string Copy space vehicle antenna model name
# System   string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class CopySVAntennaModel(CommandBase):

  def __init__(self, name, copyName, system):
    CommandBase.__init__(self, "CopySVAntennaModel")
    self.setName(name)
    self.setCopyName(copyName)
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

  def copyName(self):
    return self.get("CopyName")

  def setCopyName(self, value):
    return self.set("CopyName", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Import a space vehicle antenna model from a XML file.
#
# Name     Type   Description
# -------- ------ ----------------------------------------------------------------
# FilePath string File path of the antenna model
# System   string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class ImportSVAntennaModel(CommandBase):

  def __init__(self, filePath, system):
    CommandBase.__init__(self, "ImportSVAntennaModel")
    self.setFilePath(filePath)
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def filePath(self):
    return self.get("FilePath")

  def setFilePath(self, value):
    return self.set("FilePath", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Export a space vehicle antenna model in a XML file.
#
# Name        Type   Description
# ----------- ------ ----------------------------------------------------------------
# AntennaName string SV antenna model name
# System      string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# FilePath    string The antenna model will be exported in this file path.
# Overwriting bool   Overwrite the old file if true.
#

class ExportSVAntennaModel(CommandBase):

  def __init__(self, antennaName, system, filePath, overwriting):
    CommandBase.__init__(self, "ExportSVAntennaModel")
    self.setAntennaName(antennaName)
    self.setSystem(system)
    self.setFilePath(filePath)
    self.setOverwriting(overwriting)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def antennaName(self):
    return self.get("AntennaName")

  def setAntennaName(self, value):
    return self.set("AntennaName", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def filePath(self):
    return self.get("FilePath")

  def setFilePath(self, value):
    return self.set("FilePath", value)

  def overwriting(self):
    return self.get("Overwriting")

  def setOverwriting(self, value):
    return self.set("Overwriting", value)

#
# Set the antenna model used by the SV.
#
# Name             Type   Description
# ---------------- ------ -----------------------------------------------------------------
# System           string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
# SvId             int    The satellite's SV ID.
# AntennaModelName string SV antenna model name.
#

class SetSVAntennaModelForSV(CommandBase):

  def __init__(self, system, svId, antennaModelName):
    CommandBase.__init__(self, "SetSVAntennaModelForSV")
    self.setSystem(system)
    self.setSvId(svId)
    self.setAntennaModelName(antennaModelName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def antennaModelName(self):
    return self.get("AntennaModelName")

  def setAntennaModelName(self, value):
    return self.set("AntennaModelName", value)

#
# Get the antenna model used by the SV.
#
# Name   Type   Description
# ------ ------ -----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
# SvId   int    The satellite's SV ID.
#

class GetSVAntennaModelForSV(CommandBase):

  def __init__(self, system, svId):
    CommandBase.__init__(self, "GetSVAntennaModelForSV")
    self.setSystem(system)
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Result of GetSVAntennaModelForSV.
#
# Name             Type   Description
# ---------------- ------ -----------------------------------------------------------------
# System           string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
# SvId             int    The satellite's SV ID.
# AntennaModelName string SV antenna model name.
#

class GetSVAntennaModelForSVResult(CommandResult):

  def __init__(self, system, svId, antennaModelName):
    CommandResult.__init__(self, "GetSVAntennaModelForSVResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setAntennaModelName(antennaModelName)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def antennaModelName(self):
    return self.get("AntennaModelName")

  def setAntennaModelName(self, value):
    return self.set("AntennaModelName", value)

#
# Set the antenna model for all satellites.
#
# Name              Type         Description
# ----------------- ------------ -----------------------------------------------------------------------------------------------------
# System            string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# AntennaModelNames array string Antenna model name for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
#

class SetSVAntennaModelForEachSV(CommandBase):

  def __init__(self, system, antennaModelNames):
    CommandBase.__init__(self, "SetSVAntennaModelForEachSV")
    self.setSystem(system)
    self.setAntennaModelNames(antennaModelNames)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def antennaModelNames(self):
    return self.get("AntennaModelNames")

  def setAntennaModelNames(self, value):
    return self.set("AntennaModelNames", value)

#
# Get the antenna model for all satellites.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class GetSVAntennaModelForEachSV(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "GetSVAntennaModelForEachSV")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Result of GetSVAntennaModelForEachSV.
#
# Name              Type         Description
# ----------------- ------------ -----------------------------------------------------------------------------------------------------
# System            string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# AntennaModelNames array string Antenna model name for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
#

class GetSVAntennaModelForEachSVResult(CommandResult):

  def __init__(self, system, antennaModelNames):
    CommandResult.__init__(self, "GetSVAntennaModelForEachSVResult")
    self.setSystem(system)
    self.setAntennaModelNames(antennaModelNames)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def antennaModelNames(self):
    return self.get("AntennaModelNames")

  def setAntennaModelNames(self, value):
    return self.set("AntennaModelNames", value)

#
# Set the type of a SV.
# Satellite SV ID accepted values (0 for all SVs):
# QZSS 1..10
#
# Name   Type   Description
# ------ ------ -------------------------------------------------------------
# System string Only "QZSS" supported.
# SvId   int    Satellite SV ID, see command description for accepted values.
# SvType string Type of the SV. QZSS: "BlockI", "BlockII".
#

class SetSVType(CommandBase):

  def __init__(self, system, svId, svType):
    CommandBase.__init__(self, "SetSVType")
    self.setSystem(system)
    self.setSvId(svId)
    self.setSvType(svType)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def svType(self):
    return self.get("SvType")

  def setSvType(self, value):
    return self.set("SvType", value)

#
# Get the type of a SV.
# Satellite SV ID accepted values:
# QZSS 1..10
#
# Name   Type   Description
# ------ ------ -------------------------------------------------------------
# System string Only "QZSS" supported.
# SvId   int    Satellite SV ID, see command description for accepted values.
#

class GetSVType(CommandBase):

  def __init__(self, system, svId):
    CommandBase.__init__(self, "GetSVType")
    self.setSystem(system)
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Result of GetSVType.
#
# Name   Type   Description
# ------ ------ -------------------------------------------------------------
# System string Only "QZSS" supported.
# SvId   int    Satellite SV ID, see command description for accepted values.
# SvType string Type of the SV. QZSS: "BlockI", "BlockII".
#

class GetSVTypeResult(CommandResult):

  def __init__(self, system, svId, svType):
    CommandResult.__init__(self, "GetSVTypeResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setSvType(svType)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def svType(self):
    return self.get("SvType")

  def setSvType(self, value):
    return self.set("SvType", value)

#
# Set the PRNs transmitted by the SV ID for these signals.
#
# Name          Type            Description
# ------------- --------------- -------------------------------------------------------------------------------
# SvId          int             Satellite SV ID.
# SignalPrnDict dict string:int A dictionary of signal prn pairs.
#                               Accepted keys are: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C",
#                                                  "B2a", "B3I", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB",
#                                                  "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S" and
#                                                  "NAVICL5"
#

class SetTransmittedPrnForSV(CommandBase):

  def __init__(self, svId, signalPrnDict):
    CommandBase.__init__(self, "SetTransmittedPrnForSV")
    self.setSvId(svId)
    self.setSignalPrnDict(signalPrnDict)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def signalPrnDict(self):
    return self.get("SignalPrnDict")

  def setSignalPrnDict(self, value):
    return self.set("SignalPrnDict", value)

#
# Get the PRNs transmitted by the SV ID for these signals.
#
# Name        Type         Description
# ----------- ------------ ---------------------------------------------------------------------------
# SvId        int          Satellite SV ID.
# SignalArray array string An array of signals.
#                          Accepted values are: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2",
#                                               "B1C", "B2a", "B3I", "SBASL1", "SBASL5", "QZSSL1CA",
#                                               "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S",
#                                               "QZSSL5S" and "NAVICL5"
#

class GetTransmittedPrnForSV(CommandBase):

  def __init__(self, svId, signalArray):
    CommandBase.__init__(self, "GetTransmittedPrnForSV")
    self.setSvId(svId)
    self.setSignalArray(signalArray)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

#
# Result of GetTransmittedPrnForSV.
#
# Name          Type            Description
# ------------- --------------- -------------------------------------------------------------------------------
# SvId          int             Satellite SV ID.
# SignalPrnDict dict string:int A dictionary of signal prn pairs.
#                               Accepted keys are: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C",
#                                                  "B2a", "B3I", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB",
#                                                  "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S" and
#                                                  "NAVICL5"
#

class GetTransmittedPrnForSVResult(CommandResult):

  def __init__(self, svId, signalPrnDict):
    CommandResult.__init__(self, "GetTransmittedPrnForSVResult")
    self.setSvId(svId)
    self.setSignalPrnDict(signalPrnDict)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def signalPrnDict(self):
    return self.get("SignalPrnDict")

  def setSignalPrnDict(self, value):
    return self.set("SignalPrnDict", value)

#
# Set the PRN transmitted by the SV ID for this signal.
#
# Name   Type   Description
# ------ ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Signal string Accepted signal keys: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
# SvId   int    Satellite SV ID.
# Prn    int    PRN number.
#

class SetPrnOfSVID(CommandBase):

  def __init__(self, signal, svId, prn):
    CommandBase.__init__(self, "SetPrnOfSVID")
    self.setSignal(signal)
    self.setSvId(svId)
    self.setPrn(prn)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def prn(self):
    return self.get("Prn")

  def setPrn(self, value):
    return self.set("Prn", value)

#
# Get the PRN transmitted by the SV ID for this signal.
#
# Name   Type   Description
# ------ ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Signal string Accepted signal keys: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
# SvId   int    Satellite SV ID.
#

class GetPrnOfSVID(CommandBase):

  def __init__(self, signal, svId):
    CommandBase.__init__(self, "GetPrnOfSVID")
    self.setSignal(signal)
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Result of GetPrnOfSVID.
#
# Name   Type   Description
# ------ ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Signal string Accepted signal keys: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
# SvId   int    Satellite SV ID.
# Prn    int    PRN number.
#

class GetPrnOfSVIDResult(CommandResult):

  def __init__(self, signal, svId, prn):
    CommandResult.__init__(self, "GetPrnOfSVIDResult")
    self.setSignal(signal)
    self.setSvId(svId)
    self.setPrn(prn)

  def isSuccess(self):
    return True

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def prn(self):
    return self.get("Prn")

  def setPrn(self, value):
    return self.set("Prn", value)

#
# Set the PRN for each satellite for specified signals.
#
# Name   Type      Description
# ------ --------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Signal string    Accepted signal keys: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
# Prn    array int PRN value to set for each satellite. Zero based index (index 0 => PRN for SV ID 1, index 1 => PRN for SV ID 2, etc)
#

class SetPrnForEachSV(CommandBase):

  def __init__(self, signal, prn):
    CommandBase.__init__(self, "SetPrnForEachSV")
    self.setSignal(signal)
    self.setPrn(prn)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def prn(self):
    return self.get("Prn")

  def setPrn(self, value):
    return self.set("Prn", value)

#
# Get the PRN for each satellite for specified signals.
#
# Name   Type   Description
# ------ ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Signal string Accepted signal keys: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
#

class GetPrnForEachSV(CommandBase):

  def __init__(self, signal):
    CommandBase.__init__(self, "GetPrnForEachSV")
    self.setSignal(signal)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

#
# Result of GetPrnForEachSV.
#
# Name   Type      Description
# ------ --------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Signal string    Accepted signal keys: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
# Prn    array int PRN value to set for each satellite. Zero based index (index 0 => PRN for SV ID 1, index 1 => PRN for SV ID 2, etc)
#

class GetPrnForEachSVResult(CommandResult):

  def __init__(self, signal, prn):
    CommandResult.__init__(self, "GetPrnForEachSVResult")
    self.setSignal(signal)
    self.setPrn(prn)

  def isSuccess(self):
    return True

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def prn(self):
    return self.get("Prn")

  def setPrn(self, value):
    return self.set("Prn", value)

#
# Reset the PRNs of all satellites in specified system, for all signals.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class ResetToDefaultPrn(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "ResetToDefaultPrn")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Set trajectory smoothing for Track or Route enabled or disabled
#
# Name    Type Description
# ------- ---- ------------------------------------------------------
# Enabled bool If true, trajectory will be smoothed during simulation
#

class EnableTrajectorySmoothing(CommandBase):

  def __init__(self, enabled):
    CommandBase.__init__(self, "EnableTrajectorySmoothing")
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Get trajectory smoothing for Track or Route enabled or disabled
#
#

class IsTrajectorySmoothingEnabled(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "IsTrajectorySmoothingEnabled")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of IsTrajectorySmoothingEnabled.
#
# Name    Type Description
# ------- ---- ------------------------------------------------------
# Enabled bool If true, trajectory will be smoothed during simulation
#

class IsTrajectorySmoothingEnabledResult(CommandResult):

  def __init__(self, enabled):
    CommandResult.__init__(self, "IsTrajectorySmoothingEnabledResult")
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Set simulation automatic stop when the vehicle reaches trajectory end enabled or disabled. Only effective with Tracks and Routes
#
# Name    Type Description
# ------- ---- ------------------------------------------------------------------------
# Enabled bool If true, simulation will stop when the vehicle will reach trajectory end
#

class EnableSimulationStopAtTrajectoryEnd(CommandBase):

  def __init__(self, enabled):
    CommandBase.__init__(self, "EnableSimulationStopAtTrajectoryEnd")
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Get simulation automatic stop when the vehicle reaches trajectory end enabled or disabled. Only effective with Tracks and Routes
#
#

class IsSimulationStopAtTrajectoryEndEnabled(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "IsSimulationStopAtTrajectoryEndEnabled")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of IsSimulationStopAtTrajectoryEndEnabled.
#
# Name    Type Description
# ------- ---- ------------------------------------------------------------------------
# Enabled bool If true, simulation will stop when the vehicle will reach trajectory end
#

class IsSimulationStopAtTrajectoryEndEnabledResult(CommandResult):

  def __init__(self, enabled):
    CommandResult.__init__(self, "IsSimulationStopAtTrajectoryEndEnabledResult")
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Set force vehicle yaw, pitch and roll to zero enabled or disabled
#
# Name    Type Description
# ------- ---- -----------------------------------------------
# Enabled bool If true, vehicle won't rotate during simulation
#

class ForceAttitudeToZero(CommandBase):

  def __init__(self, enabled):
    CommandBase.__init__(self, "ForceAttitudeToZero")
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Get force vehicle yaw, pitch and roll to zero enabled or disabled
#
#

class IsAttitudeToZeroForced(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "IsAttitudeToZeroForced")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of IsAttitudeToZeroForced.
#
# Name    Type Description
# ------- ---- -----------------------------------------------
# Enabled bool If true, vehicle won't rotate during simulation
#

class IsAttitudeToZeroForcedResult(CommandResult):

  def __init__(self, enabled):
    CommandResult.__init__(self, "IsAttitudeToZeroForcedResult")
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Set vehicle trajectory type
#
# Name Type   Description
# ---- ------ -----------------------------------------------------------------------
# Type string Trajectory type ("Fix", "Circular", "HIL", "Track", "Route" or "Orbit")
#

class SetVehicleTrajectory(CommandBase):

  def __init__(self, type):
    CommandBase.__init__(self, "SetVehicleTrajectory")
    self.setType(type)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

#
# Get vehicle trajectory type
#
#

class GetVehicleTrajectory(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetVehicleTrajectory")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetVehicleTrajectory.
#
# Name Type   Description
# ---- ------ -----------------------------------------------------------------------
# Type string Trajectory type ("Fix", "Circular", "HIL", "Track", "Route" or "Orbit")
#

class GetVehicleTrajectoryResult(CommandResult):

  def __init__(self, type):
    CommandResult.__init__(self, "GetVehicleTrajectoryResult")
    self.setType(type)

  def isSuccess(self):
    return True

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

#
# Set vehicle type for Route Trajectory
#
# Name Type   Description
# ---- ------ ----------------------------------------------------------
# Type string Vehicle type ("Ground / Water" or "Airborne / Spaceborne")
#

class SetVehicleType(CommandBase):

  def __init__(self, type):
    CommandBase.__init__(self, "SetVehicleType")
    self.setType(type)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

#
# Get vehicle type for Route Trajectory
#
#

class GetVehicleType(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetVehicleType")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetVehicleType.
#
# Name Type   Description
# ---- ------ ----------------------------------------------------------
# Type string Vehicle type ("Ground / Water" or "Airborne / Spaceborne")
#

class GetVehicleTypeResult(CommandResult):

  def __init__(self, type):
    CommandResult.__init__(self, "GetVehicleTypeResult")
    self.setType(type)

  def isSuccess(self):
    return True

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

#
# Begins a new track definition. Actual track remains unchanged until
# EndTrackDefinition command is sent and successful. After this command, the
# client must push time and position pairs to form a complete track. Once all the
# positions are sent, the client must send the command EndTrackDefinition.
#
#

class BeginTrackDefinition(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "BeginTrackDefinition")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Push a track ecef node. Must be called after BeginTrackDefinition and before EndTrackDefinition.
#
# Name Type   Description
# ---- ------ --------------------------------------
# Time int    Node Timestamp in miliseconds
# X    double X distance from earth-center in meters
# Y    double Y distance from earth-center in meters
# Z    double Z distance from earth-center in meters
#

class PushTrackEcef(CommandBase):

  def __init__(self, time, x, y, z):
    CommandBase.__init__(self, "PushTrackEcef")
    self.setTime(time)
    self.setX(x)
    self.setY(y)
    self.setZ(z)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def time(self):
    return self.get("Time")

  def setTime(self, value):
    return self.set("Time", value)

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

#
# Push a track ecef and ned attitude node. Must be called after BeginTrackDefinition and before EndTrackDefinition.
#
# Name  Type   Description
# ----- ------ --------------------------------------
# Time  int    Node Timestamp in miliseconds
# X     double X distance from earth-center in meters
# Y     double Y distance from earth-center in meters
# Z     double Z distance from earth-center in meters
# Yaw   double Yaw in radians
# Pitch double Pitch in radians
# Roll  double Roll in radians
#

class PushTrackEcefNed(CommandBase):

  def __init__(self, time, x, y, z, yaw, pitch, roll):
    CommandBase.__init__(self, "PushTrackEcefNed")
    self.setTime(time)
    self.setX(x)
    self.setY(y)
    self.setZ(z)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def time(self):
    return self.get("Time")

  def setTime(self, value):
    return self.set("Time", value)

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

#
# This command completes the track started with BeginTrackDefinition command. If
# the track is accepted, the current track in the configuration is replaced with
# this new track. If the track is not accepted, the current track in the config
# remains unchanged.
#
#

class EndTrackDefinition(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "EndTrackDefinition")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# EndTrackDefinition Result with created track informations.
#
# Name  Type Description
# ----- ---- ----------------------------------------------------------------------------------------------------
# Count int  Number of nodes in the track. The client can compare this value with the number of positions pushed.
#

class EndTrackDefinitionResult(CommandResult):

  def __init__(self, count):
    CommandResult.__init__(self, "EndTrackDefinitionResult")
    self.setCount(count)

  def isSuccess(self):
    return True

  def count(self):
    return self.get("Count")

  def setCount(self, value):
    return self.set("Count", value)

#
# Begins a new route definition. Actual route remains unchanged until
# EndRouteDefinition command is sent and successful. After this command, the
# client must push time and position pairs to form a complete route. Once all the
# positions are sent, the client must send the command EndRouteDefinition.
#
#

class BeginRouteDefinition(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "BeginRouteDefinition")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Push a route ecef node with speed. Must be called after BeginRouteDefinition and before EndRouteDefinition.
#
# Name  Type   Description
# ----- ------ --------------------------------------
# Speed double Node speed in meters per second
# X     double X distance from earth-center in meters
# Y     double Y distance from earth-center in meters
# Z     double Z distance from earth-center in meters
#

class PushRouteEcef(CommandBase):

  def __init__(self, speed, x, y, z):
    CommandBase.__init__(self, "PushRouteEcef")
    self.setSpeed(speed)
    self.setX(x)
    self.setY(y)
    self.setZ(z)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def speed(self):
    return self.get("Speed")

  def setSpeed(self, value):
    return self.set("Speed", value)

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

#
# This command completes the route started with BeginRouteDefinition command. If
# the route is accepted, the current route in the configuration is replaced with
# this new route. If the route is not accepted, the current route in the config
# remains unchanged.
#
#

class EndRouteDefinition(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "EndRouteDefinition")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# EndRouteDefinition Result with created route informations.
#
# Name  Type Description
# ----- ---- ----------------------------------------------------------------------------------------------------
# Count int  Number of nodes in the route. The client can compare this value with the number of positions pushed.
#

class EndRouteDefinitionResult(CommandResult):

  def __init__(self, count):
    CommandResult.__init__(self, "EndRouteDefinitionResult")
    self.setCount(count)

  def isSuccess(self):
    return True

  def count(self):
    return self.get("Count")

  def setCount(self, value):
    return self.set("Count", value)

#
# Set vehicle static position and orientation
#
# Name  Type   Description
# ----- ------ -----------------------
# Type  string Trajectory type ("Fix")
# Lat   double Latitude (rad)
# Lon   double Longitude (rad)
# Alt   double Altitude (m)
# Yaw   double Yaw (rad)
# Pitch double Pitch (rad)
# Roll  double Roll (rad)
#

class SetVehicleTrajectoryFix(CommandBase):

  def __init__(self, type, lat, lon, alt, yaw, pitch, roll):
    CommandBase.__init__(self, "SetVehicleTrajectoryFix")
    self.setType(type)
    self.setLat(lat)
    self.setLon(lon)
    self.setAlt(alt)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def lat(self):
    return self.get("Lat")

  def setLat(self, value):
    return self.set("Lat", value)

  def lon(self):
    return self.get("Lon")

  def setLon(self, value):
    return self.set("Lon", value)

  def alt(self):
    return self.get("Alt")

  def setAlt(self, value):
    return self.set("Alt", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

#
# Get vehicle static position and orientation
#
#

class GetVehicleTrajectoryFix(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetVehicleTrajectoryFix")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetVehicleTrajectoryFix.
#
# Name  Type   Description
# ----- ------ -----------------------
# Type  string Trajectory type ("Fix")
# Lat   double Latitude (rad)
# Lon   double Longitude (rad)
# Alt   double Altitude (m)
# Yaw   double Yaw (rad)
# Pitch double Pitch (rad)
# Roll  double Roll (rad)
#

class GetVehicleTrajectoryFixResult(CommandResult):

  def __init__(self, type, lat, lon, alt, yaw, pitch, roll):
    CommandResult.__init__(self, "GetVehicleTrajectoryFixResult")
    self.setType(type)
    self.setLat(lat)
    self.setLon(lon)
    self.setAlt(alt)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)

  def isSuccess(self):
    return True

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def lat(self):
    return self.get("Lat")

  def setLat(self, value):
    return self.set("Lat", value)

  def lon(self):
    return self.get("Lon")

  def setLon(self, value):
    return self.set("Lon", value)

  def alt(self):
    return self.get("Alt")

  def setAlt(self, value):
    return self.set("Alt", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

#
# Set vehicle static position and orientation
#
# Name  Type   Description
# ----- ------ -----------------------
# Type  string Trajectory type ("Fix")
# X     double ECEF X (m)
# Y     double ECEF Y (m)
# Z     double ECEF Z (m)
# Yaw   double Yaw (rad)
# Pitch double Pitch (rad)
# Roll  double Roll (rad)
#

class SetVehicleTrajectoryFixEcef(CommandBase):

  def __init__(self, type, x, y, z, yaw, pitch, roll):
    CommandBase.__init__(self, "SetVehicleTrajectoryFixEcef")
    self.setType(type)
    self.setX(x)
    self.setY(y)
    self.setZ(z)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

#
# Get vehicle static position and orientation
#
#

class GetVehicleTrajectoryFixEcef(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetVehicleTrajectoryFixEcef")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetVehicleTrajectoryFixEcef.
#
# Name  Type   Description
# ----- ------ -----------------------
# Type  string Trajectory type ("Fix")
# X     double ECEF X (m)
# Y     double ECEF Y (m)
# Z     double ECEF Z (m)
# Yaw   double Yaw (rad)
# Pitch double Pitch (rad)
# Roll  double Roll (rad)
#

class GetVehicleTrajectoryFixEcefResult(CommandResult):

  def __init__(self, type, x, y, z, yaw, pitch, roll):
    CommandResult.__init__(self, "GetVehicleTrajectoryFixEcefResult")
    self.setType(type)
    self.setX(x)
    self.setY(y)
    self.setZ(z)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)

  def isSuccess(self):
    return True

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

#
# Set vehicle circular trajectory
#
# Name        Type            Description
# ----------- --------------- --------------------------------
# Type        string          Trajectory type ("Circular")
# Lat         double          Center latitude (rad)
# Lon         double          Center longitude (rad)
# Alt         double          Altitude (m)
# Radius      double          Radius (m)
# Speed       double          Speed (m/s)
# Clockwise   bool            If true, vehicle turns clockwise
# OriginAngle optional double Vehicle angle at elapsed time 0.
#

class SetVehicleTrajectoryCircular(CommandBase):

  def __init__(self, type, lat, lon, alt, radius, speed, clockwise, originAngle = None):
    CommandBase.__init__(self, "SetVehicleTrajectoryCircular")
    self.setType(type)
    self.setLat(lat)
    self.setLon(lon)
    self.setAlt(alt)
    self.setRadius(radius)
    self.setSpeed(speed)
    self.setClockwise(clockwise)
    self.setOriginAngle(originAngle)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def lat(self):
    return self.get("Lat")

  def setLat(self, value):
    return self.set("Lat", value)

  def lon(self):
    return self.get("Lon")

  def setLon(self, value):
    return self.set("Lon", value)

  def alt(self):
    return self.get("Alt")

  def setAlt(self, value):
    return self.set("Alt", value)

  def radius(self):
    return self.get("Radius")

  def setRadius(self, value):
    return self.set("Radius", value)

  def speed(self):
    return self.get("Speed")

  def setSpeed(self, value):
    return self.set("Speed", value)

  def clockwise(self):
    return self.get("Clockwise")

  def setClockwise(self, value):
    return self.set("Clockwise", value)

  def originAngle(self):
    return self.get("OriginAngle")

  def setOriginAngle(self, value):
    return self.set("OriginAngle", value)

#
# Get vehicle circular trajectory
#
#

class GetVehicleTrajectoryCircular(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetVehicleTrajectoryCircular")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetVehicleTrajectoryCircular.
#
# Name        Type            Description
# ----------- --------------- --------------------------------
# Type        string          Trajectory type ("Circular")
# Lat         double          Center latitude (rad)
# Lon         double          Center longitude (rad)
# Alt         double          Altitude (m)
# Radius      double          Radius (m)
# Speed       double          Speed (m/s)
# Clockwise   bool            If true, vehicle turns clockwise
# OriginAngle optional double Vehicle angle at elapsed time 0.
#

class GetVehicleTrajectoryCircularResult(CommandResult):

  def __init__(self, type, lat, lon, alt, radius, speed, clockwise, originAngle = None):
    CommandResult.__init__(self, "GetVehicleTrajectoryCircularResult")
    self.setType(type)
    self.setLat(lat)
    self.setLon(lon)
    self.setAlt(alt)
    self.setRadius(radius)
    self.setSpeed(speed)
    self.setClockwise(clockwise)
    self.setOriginAngle(originAngle)

  def isSuccess(self):
    return True

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def lat(self):
    return self.get("Lat")

  def setLat(self, value):
    return self.set("Lat", value)

  def lon(self):
    return self.get("Lon")

  def setLon(self, value):
    return self.set("Lon", value)

  def alt(self):
    return self.get("Alt")

  def setAlt(self, value):
    return self.set("Alt", value)

  def radius(self):
    return self.get("Radius")

  def setRadius(self, value):
    return self.set("Radius", value)

  def speed(self):
    return self.get("Speed")

  def setSpeed(self, value):
    return self.set("Speed", value)

  def clockwise(self):
    return self.get("Clockwise")

  def setClockwise(self, value):
    return self.set("Clockwise", value)

  def originAngle(self):
    return self.get("OriginAngle")

  def setOriginAngle(self, value):
    return self.set("OriginAngle", value)

#
# Set earth-orbiting spacecraft trajectory.
#
# Name              Type     Description
# ----------------- -------- ---------------------------------------------------------------------
# Type              string   Trajectory type ("Orbit")
# Reference         datetime Orbital parameters reference time (UTC)
# SemiMajorAxis     double   Semi-major axis (meter)
# Inclination       double   Inclination angle (rad)
# RightAscension    double   Geographic longitude of the ascending node of the orbital plane (rad)
# Eccentricity      double   Eccentricity
# MeanAnomaly       double   Mean anomaly (rad)
# ArgumentOfPerigee double   Argument of perigee (rad)
#

class SetVehicleTrajectoryOrbit(CommandBase):

  def __init__(self, type, reference, semiMajorAxis, inclination, rightAscension, eccentricity, meanAnomaly, argumentOfPerigee):
    CommandBase.__init__(self, "SetVehicleTrajectoryOrbit")
    self.setType(type)
    self.setReference(reference)
    self.setSemiMajorAxis(semiMajorAxis)
    self.setInclination(inclination)
    self.setRightAscension(rightAscension)
    self.setEccentricity(eccentricity)
    self.setMeanAnomaly(meanAnomaly)
    self.setArgumentOfPerigee(argumentOfPerigee)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def reference(self):
    return self.get("Reference")

  def setReference(self, value):
    return self.set("Reference", value)

  def semiMajorAxis(self):
    return self.get("SemiMajorAxis")

  def setSemiMajorAxis(self, value):
    return self.set("SemiMajorAxis", value)

  def inclination(self):
    return self.get("Inclination")

  def setInclination(self, value):
    return self.set("Inclination", value)

  def rightAscension(self):
    return self.get("RightAscension")

  def setRightAscension(self, value):
    return self.set("RightAscension", value)

  def eccentricity(self):
    return self.get("Eccentricity")

  def setEccentricity(self, value):
    return self.set("Eccentricity", value)

  def meanAnomaly(self):
    return self.get("MeanAnomaly")

  def setMeanAnomaly(self, value):
    return self.set("MeanAnomaly", value)

  def argumentOfPerigee(self):
    return self.get("ArgumentOfPerigee")

  def setArgumentOfPerigee(self, value):
    return self.set("ArgumentOfPerigee", value)

#
# Get earth-orbiting spacecraft trajectory.
#
#

class GetVehicleTrajectoryOrbit(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetVehicleTrajectoryOrbit")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetVehicleTrajectoryOrbit.
#
# Name              Type     Description
# ----------------- -------- ---------------------------------------------------------------------
# Type              string   Trajectory type ("Orbit")
# Reference         datetime Orbital parameters reference time (UTC)
# SemiMajorAxis     double   Semi-major axis (meter)
# Inclination       double   Inclination angle (rad)
# RightAscension    double   Geographic longitude of the ascending node of the orbital plane (rad)
# Eccentricity      double   Eccentricity
# MeanAnomaly       double   Mean anomaly (rad)
# ArgumentOfPerigee double   Argument of perigee (rad)
#

class GetVehicleTrajectoryOrbitResult(CommandResult):

  def __init__(self, type, reference, semiMajorAxis, inclination, rightAscension, eccentricity, meanAnomaly, argumentOfPerigee):
    CommandResult.__init__(self, "GetVehicleTrajectoryOrbitResult")
    self.setType(type)
    self.setReference(reference)
    self.setSemiMajorAxis(semiMajorAxis)
    self.setInclination(inclination)
    self.setRightAscension(rightAscension)
    self.setEccentricity(eccentricity)
    self.setMeanAnomaly(meanAnomaly)
    self.setArgumentOfPerigee(argumentOfPerigee)

  def isSuccess(self):
    return True

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def reference(self):
    return self.get("Reference")

  def setReference(self, value):
    return self.set("Reference", value)

  def semiMajorAxis(self):
    return self.get("SemiMajorAxis")

  def setSemiMajorAxis(self, value):
    return self.set("SemiMajorAxis", value)

  def inclination(self):
    return self.get("Inclination")

  def setInclination(self, value):
    return self.set("Inclination", value)

  def rightAscension(self):
    return self.get("RightAscension")

  def setRightAscension(self, value):
    return self.set("RightAscension", value)

  def eccentricity(self):
    return self.get("Eccentricity")

  def setEccentricity(self, value):
    return self.set("Eccentricity", value)

  def meanAnomaly(self):
    return self.get("MeanAnomaly")

  def setMeanAnomaly(self, value):
    return self.set("MeanAnomaly", value)

  def argumentOfPerigee(self):
    return self.get("ArgumentOfPerigee")

  def setArgumentOfPerigee(self, value):
    return self.set("ArgumentOfPerigee", value)

#
# Get Hardware in the loop trajectory server port.
#
#

class GetHilPort(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetHilPort")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of GetHilPort.
#
# Name Type Description
# ---- ---- ---------------
# Port int  Hil Server Port
#

class HilPortResult(CommandResult):

  def __init__(self, port):
    CommandResult.__init__(self, "HilPortResult")
    self.setPort(port)

  def isSuccess(self):
    return True

  def port(self):
    return self.get("Port")

  def setPort(self, value):
    return self.set("Port", value)

#
# HIL extrapolation state.
#

class HilExtrapolationState:
  Deterministic = 0
  NonDeterministic = 1
  Snap = 2

#
# Get last Hardware in the loop extrapolation state. The states are defined as
# the following increasing priority levels: Deterministic, NonDeterministic and Snap.
# The state will stay on the highest level until polled. Polling the extrapolation state will reset it.
# Returns GetHilExtrapolationStateResult.
#
#

class GetHilExtrapolationState(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetHilExtrapolationState")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of GetHilExtrapolationState.
#
# Name        Type                  Description
# ----------- --------------------- ---------------------------------------------------------
# State       HilExtrapolationState HIL Extrapolation State.
# ElapsedTime int                   Time in milliseconds of the returned extrapolation state.
#

class GetHilExtrapolationStateResult(CommandResult):

  def __init__(self, state, elapsedTime):
    CommandResult.__init__(self, "GetHilExtrapolationStateResult")
    self.setState(state)
    self.setElapsedTime(elapsedTime)

  def isSuccess(self):
    return True

  def state(self):
    return self.get("State")

  def setState(self, value):
    return self.set("State", value)

  def elapsedTime(self):
    return self.get("ElapsedTime")

  def setElapsedTime(self, value):
    return self.set("ElapsedTime", value)

#
# Set the ephemeris reference time for the specified constellation.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
# SvId        int             The satellite's SV ID.
# Time        datetime        GPS date and time (it is the GPS time expressed in UTC format)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetEphemerisReferenceTimeForSV(CommandBase):

  def __init__(self, system, svId, time, dataSetName = None):
    CommandBase.__init__(self, "SetEphemerisReferenceTimeForSV")
    self.setSystem(system)
    self.setSvId(svId)
    self.setTime(time)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def time(self):
    return self.get("Time")

  def setTime(self, value):
    return self.set("Time", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetEphemerisReferenceTime is deprecated since 21.3. You may use SetEphemerisReferenceTimeForSV.
# 
# Set the ephemeris reference time for the specified constellation.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
# SvId        int             The satellite's SV ID.
# Time        datetime        GPS date and time (it is the GPS time expressed in UTC format)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetEphemerisReferenceTime(CommandBase):

  def __init__(self, system, svId, time, dataSetName = None):
    CommandBase.__init__(self, "SetEphemerisReferenceTime")
    self.setSystem(system)
    self.setSvId(svId)
    self.setTime(time)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def time(self):
    return self.get("Time")

  def setTime(self, value):
    return self.set("Time", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get the ephemeris reference time for the specified constellation.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
# SvId        int             The satellite's SV ID.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetEphemerisReferenceTimeForSV(CommandBase):

  def __init__(self, system, svId, dataSetName = None):
    CommandBase.__init__(self, "GetEphemerisReferenceTimeForSV")
    self.setSystem(system)
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetEphemerisReferenceTime is deprecated since 21.3. You may use GetEphemerisReferenceTimeForSV.
# 
# Get the ephemeris reference time for the specified constellation.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
# SvId        int             The satellite's SV ID.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetEphemerisReferenceTime(CommandBase):

  def __init__(self, system, svId, dataSetName = None):
    CommandBase.__init__(self, "GetEphemerisReferenceTime")
    self.setSystem(system)
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetEphemerisReferenceTimeForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
# SvId        int             The satellite's SV ID.
# Time        datetime        GPS date and time (it is the GPS time expressed in UTC format)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetEphemerisReferenceTimeForSVResult(CommandResult):

  def __init__(self, system, svId, time, dataSetName = None):
    CommandResult.__init__(self, "GetEphemerisReferenceTimeForSVResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setTime(time)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def time(self):
    return self.get("Time")

  def setTime(self, value):
    return self.set("Time", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set various parameters in the GPS ephemeris
# 
#   ParamName         Unit
#   "ClockBias"       sec
#   "ClockDrift"      sec/sec
#   "ClockDriftRate"  sec/sec^2
#   "Crs"             meter
#   "Crc"             meter
#   "Cis"             rad
#   "Cic"             rad
#   "Cus"             rad
#   "Cuc"             rad
#   "DeltaN"          rad/sec
#   "M0"              rad
#   "Eccentricity"    -
#   "SqrtA"           sqrt(meter)
#   "BigOmega"        rad
#   "I0"              rad
#   "LittleOmega"     rad
#   "BigOmegaDot"     rad/sec
#   "Idot"            rad/sec
#   "Accuracy"        meter
#   "Adot"            meters/sec
#   "DeltaN0dot"      rad/sec^2
#   "Tgd"             sec
#   "IscL1Ca"         sec
#   "IscL2C"          sec
#   "IscL5I5"         sec
#   "IscL5Q5"         sec
#   "IscL1CP"         sec
#   "IscL1CD"         sec
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..32, or use 0 to apply new value to all satellites.
# ParamName   string          Parameter name (see table above for accepted names)
# Val         double          Parameter value (see table above for unit)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGpsEphDoubleParamForSV(CommandBase):

  def __init__(self, svId, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetGpsEphDoubleParamForSV")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get various parameters in the GPS ephemeris
# 
#   ParamName         Unit
#   "ClockBias"       sec
#   "ClockDrift"      sec/sec
#   "ClockDriftRate"  sec/sec^2
#   "Crs"             meter
#   "Crc"             meter
#   "Cis"             rad
#   "Cic"             rad
#   "Cus"             rad
#   "Cuc"             rad
#   "DeltaN"          rad/sec
#   "M0"              rad
#   "Eccentricity"    -
#   "SqrtA"           sqrt(meter)
#   "BigOmega"        rad
#   "I0"              rad
#   "LittleOmega"     rad
#   "BigOmegaDot"     rad/sec
#   "Idot"            rad/sec
#   "Accuracy"        meter
#   "Adot"            meters/sec
#   "DeltaN0dot"      rad/sec^2
#   "Tgd"             sec
#   "IscL1Ca"         sec
#   "IscL2C"          sec
#   "IscL5I5"         sec
#   "IscL5Q5"         sec
#   "IscL1CP"         sec
#   "IscL1CD"         sec
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..32, or use 0 to apply new value to all satellites.
# ParamName   string          Parameter name (see table above for accepted names)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsEphDoubleParamForSV(CommandBase):

  def __init__(self, svId, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetGpsEphDoubleParamForSV")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetGpsEphDoubleParamForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..32, or use 0 to apply new value to all satellites.
# ParamName   string          Parameter name (see table above for accepted names)
# Val         double          Parameter value (see table above for unit)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsEphDoubleParamForSVResult(CommandResult):

  def __init__(self, svId, paramName, val, dataSetName = None):
    CommandResult.__init__(self, "GetGpsEphDoubleParamForSVResult")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set various parameters in the Galileo ephemeris
# 
#   ParamName         Unit
#   "ClockBias"       sec
#   "ClockDrift"      sec/sec
#   "ClockDriftRate"  sec/sec^2
#   "Crs"             meter
#   "Crc"             meter
#   "Cis"             rad
#   "Cic"             rad
#   "Cus"             rad
#   "Cuc"             rad
#   "DeltaN"          rad/sec
#   "M0"              rad
#   "Eccentricity"    -
#   "SqrtA"           sqrt(meter)
#   "BigOmega"        rad
#   "I0"              rad
#   "LittleOmega"     rad
#   "BigOmegaDot"     rad/sec
#   "Idot"            rad/sec
#   "Accuracy"        meter
#   "Adot"            meters/sec
#   "DeltaN0dot"      rad/sec^2
#   "Tgd"             sec
#   "BgdE1E5a"        ns
#   "BgdE1E5b"        ns
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..36, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# Val         double          Parameter value (see table above for unit)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGalileoEphDoubleParamForSV(CommandBase):

  def __init__(self, svId, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetGalileoEphDoubleParamForSV")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get various parameters in the Galileo ephemeris
# 
#   ParamName         Unit
#   "ClockBias"       sec
#   "ClockDrift"      sec/sec
#   "ClockDriftRate"  sec/sec^2
#   "Crs"             meter
#   "Crc"             meter
#   "Cis"             rad
#   "Cic"             rad
#   "Cus"             rad
#   "Cuc"             rad
#   "DeltaN"          rad/sec
#   "M0"              rad
#   "Eccentricity"    -
#   "SqrtA"           sqrt(meter)
#   "BigOmega"        rad
#   "I0"              rad
#   "LittleOmega"     rad
#   "BigOmegaDot"     rad/sec
#   "Idot"            rad/sec
#   "Accuracy"        meter
#   "Adot"            meters/sec
#   "DeltaN0dot"      rad/sec^2
#   "Tgd"             sec
#   "BgdE1E5a"        ns
#   "BgdE1E5b"        ns
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..36, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGalileoEphDoubleParamForSV(CommandBase):

  def __init__(self, svId, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetGalileoEphDoubleParamForSV")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetGalileoEphDoubleParamForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..36, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# Val         double          Parameter value (see table above for unit)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGalileoEphDoubleParamForSVResult(CommandResult):

  def __init__(self, svId, paramName, val, dataSetName = None):
    CommandResult.__init__(self, "GetGalileoEphDoubleParamForSVResult")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set various parameters in the BeiDou ephemeris
# 
#   ParamName         Unit
#   "ClockBias"       sec
#   "ClockDrift"      sec/sec
#   "ClockDriftRate"  sec/sec^2
#   "Crs"             meter
#   "Crc"             meter
#   "Cis"             rad
#   "Cic"             rad
#   "Cus"             rad
#   "Cuc"             rad
#   "DeltaN"          rad/sec
#   "M0"              rad
#   "Eccentricity"    -
#   "SqrtA"           sqrt(meter)
#   "BigOmega"        rad
#   "I0"              rad
#   "LittleOmega"     rad
#   "BigOmegaDot"     rad/sec
#   "Idot"            rad/sec
#   "Accuracy"        meter
#   "Adot"            meters/sec
#   "DeltaN0dot"      rad/sec^2
#   "Tgd1"            sec
#   "Tgd2"            sec
#   "TgdB1Cp"         sec
#   "TgdB2Ap"         sec
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# Val         double          Parameter value (see table above for unit)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetBeiDouEphDoubleParamForSV(CommandBase):

  def __init__(self, svId, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetBeiDouEphDoubleParamForSV")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get various parameters in the BeiDou ephemeris
# 
#   ParamName         Unit
#   "ClockBias"       sec
#   "ClockDrift"      sec/sec
#   "ClockDriftRate"  sec/sec^2
#   "Crs"             meter
#   "Crc"             meter
#   "Cis"             rad
#   "Cic"             rad
#   "Cus"             rad
#   "Cuc"             rad
#   "DeltaN"          rad/sec
#   "M0"              rad
#   "Eccentricity"    -
#   "SqrtA"           sqrt(meter)
#   "BigOmega"        rad
#   "I0"              rad
#   "LittleOmega"     rad
#   "BigOmegaDot"     rad/sec
#   "Idot"            rad/sec
#   "Accuracy"        meter
#   "Adot"            meters/sec
#   "DeltaN0dot"      rad/sec^2
#   "Tgd1"            sec
#   "Tgd2"            sec
#   "TgdB1Cp"         sec
#   "TgdB2Ap"         sec
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetBeiDouEphDoubleParamForSV(CommandBase):

  def __init__(self, svId, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetBeiDouEphDoubleParamForSV")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetBeiDouEphDoubleParamForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# Val         double          Parameter value (see table above for unit)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetBeiDouEphDoubleParamForSVResult(CommandResult):

  def __init__(self, svId, paramName, val, dataSetName = None):
    CommandResult.__init__(self, "GetBeiDouEphDoubleParamForSVResult")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set various parameters for GLONASS
# 
#   ParamName       Unit               Range          Description
#   "TauC"          sec                +/- 1          GLONASS time scale correction to UTC(SU) time
#   "TauGps"        day                +/- 1.9x10^-3  Correction to GPS time relative to GLONASS time
#   "TauN"          sec                +/- 1.9x10^-3  Coarse value of satellite time correction to GLONASS time
#   "TLambda"       sec                0..44100       Time of the first ascending node passage
#   "Lambda"        semicircle         +/- 1          Longitude of the first ascending node
#   "DeltaI"        semicircle         +/- 0.067      Correction to the mean value of inclination
#   "Omega"         semicircle         +/- 1          Argument of perigee
#   "Eccentricity"  -                  0..0.03        Eccentricity
#   "DeltaT"        sec/orb. period    +/- 3.6x10^3   Correction to the mean value of Draconian period
#   "DeltaTRate"    sec/orb. period^2  +/- 2^-8       Rate of change of Draconian period
#
# Name      Type   Description
# --------- ------ --------------------------------------------------------------------
# SvId      int    Satellite SV ID 1..24, or use 0 to apply new value to all satellites
# ParamName string Parameter name (see table above for accepted names)
# Val       double Parameter value (see table above for unit)
#

class SetGlonassEphDoubleParamForSV(CommandBase):

  def __init__(self, svId, paramName, val):
    CommandBase.__init__(self, "SetGlonassEphDoubleParamForSV")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

#
# Get various parameters for GLONASS
# 
#   ParamName       Unit               Range          Description
#   "TauC"          sec                +/- 1          GLONASS time scale correction to UTC(SU) time
#   "TauGps"        day                +/- 1.9x10^-3  Correction to GPS time relative to GLONASS time
#   "TauN"          sec                +/- 1.9x10^-3  Coarse value of satellite time correction to GLONASS time
#   "TLambda"       sec                0..44100       Time of the first ascending node passage
#   "Lambda"        semicircle         +/- 1          Longitude of the first ascending node
#   "DeltaI"        semicircle         +/- 0.067      Correction to the mean value of inclination
#   "Omega"         semicircle         +/- 1          Argument of perigee
#   "Eccentricity"  -                  0..0.03        Eccentricity
#   "DeltaT"        sec/orb. period    +/- 3.6x10^3   Correction to the mean value of Draconian period
#   "DeltaTRate"    sec/orb. period^2  +/- 2^-8       Rate of change of Draconian period
#
# Name      Type   Description
# --------- ------ --------------------------------------------------------------------
# SvId      int    Satellite SV ID 1..24, or use 0 to apply new value to all satellites
# ParamName string Parameter name (see table above for accepted names)
#

class GetGlonassEphDoubleParamForSV(CommandBase):

  def __init__(self, svId, paramName):
    CommandBase.__init__(self, "GetGlonassEphDoubleParamForSV")
    self.setSvId(svId)
    self.setParamName(paramName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

#
# Result of GetGlonassEphDoubleParamForSV.
#
# Name      Type   Description
# --------- ------ --------------------------------------------------------------------
# SvId      int    Satellite SV ID 1..24, or use 0 to apply new value to all satellites
# ParamName string Parameter name (see table above for accepted names)
# Val       double Parameter value (see table above for unit)
#

class GetGlonassEphDoubleParamForSVResult(CommandResult):

  def __init__(self, svId, paramName, val):
    CommandResult.__init__(self, "GetGlonassEphDoubleParamForSVResult")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

#
# Set various parameters in the QZSS ephemeris.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             The satellite's SV ID 1..10 (use 0 to apply to all satellites)
# ParamName   string          In meters:  "Crs", "Crc"
#                             In radians: "Cis", "Cic", "Cus", "Cuc"
#                             In seconds: "Tgd", "IscL1Ca", "IscL2C", "IscL5I5", "IscL5Q5", "IscL1CP", "IscL1CD"
# Val         double          Parameter value (see ParamName above for unit)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssEphDoubleParamForSV(CommandBase):

  def __init__(self, svId, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetQzssEphDoubleParamForSV")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetQzssEphemerisDoubleParam is deprecated since 21.3. You may use SetQzssEphDoubleParamForSV.
# 
# Set various parameters in the QZSS ephemeris.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             The satellite's SV ID 1..10 (use 0 to apply to all satellites)
# ParamName   string          In meters:  "Crs", "Crc"
#                             In radians: "Cis", "Cic", "Cus", "Cuc"
#                             In seconds: "Tgd", "IscL1Ca", "IscL2C", "IscL5I5", "IscL5Q5", "IscL1CP", "IscL1CD"
# Val         double          Parameter value (see ParamName above for unit)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssEphemerisDoubleParam(CommandBase):

  def __init__(self, svId, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetQzssEphemerisDoubleParam")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get various parameters in the QZSS ephemeris.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             The satellite's SV ID 1..10 (use 0 to apply to all satellites)
# ParamName   string          In meters:  "Crs", "Crc"
#                             In radians: "Cis", "Cic", "Cus", "Cuc"
#                             In seconds: "Tgd", "IscL1Ca", "IscL2C", "IscL5I5", "IscL5Q5", "IscL1CP", "IscL1CD"
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssEphDoubleParamForSV(CommandBase):

  def __init__(self, svId, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetQzssEphDoubleParamForSV")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetQzssEphemerisDoubleParam is deprecated since 21.3. You may use GetQzssEphDoubleParamForSV.
# 
# Get various parameters in the QZSS ephemeris.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             The satellite's SV ID 1..10 (use 0 to apply to all satellites)
# ParamName   string          In meters:  "Crs", "Crc"
#                             In radians: "Cis", "Cic", "Cus", "Cuc"
#                             In seconds: "Tgd", "IscL1Ca", "IscL2C", "IscL5I5", "IscL5Q5", "IscL1CP", "IscL1CD"
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssEphemerisDoubleParam(CommandBase):

  def __init__(self, svId, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetQzssEphemerisDoubleParam")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetQzssEphDoubleParamForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             The satellite's SV ID 1..10 (use 0 to apply to all satellites)
# ParamName   string          In meters:  "Crs", "Crc"
#                             In radians: "Cis", "Cic", "Cus", "Cuc"
#                             In seconds: "Tgd", "IscL1Ca", "IscL2C", "IscL5I5", "IscL5Q5", "IscL1CP", "IscL1CD"
# Val         double          Parameter value (see ParamName above for unit)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssEphDoubleParamForSVResult(CommandResult):

  def __init__(self, svId, paramName, val, dataSetName = None):
    CommandResult.__init__(self, "GetQzssEphDoubleParamForSVResult")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set various parameters in the NavIC ephemeris
# 
#   ParamName         Unit
#   "ClockBias"       sec
#   "ClockDrift"      sec/sec
#   "ClockDriftRate"  sec/sec^2
#   "Crs"             meter
#   "Crc"             meter
#   "Cis"             rad
#   "Cic"             rad
#   "Cus"             rad
#   "Cuc"             rad
#   "DeltaN"          rad/sec
#   "M0"              rad
#   "Eccentricity"    -
#   "SqrtA"           sqrt(meter)
#   "BigOmega"        rad
#   "I0"              rad
#   "LittleOmega"     rad
#   "BigOmegaDot"     rad/sec
#   "Idot"            rad/sec
#   "Accuracy"        meter
#   "Adot"            meters/sec
#   "DeltaN0dot"      rad/sec^2
#   "Tgd"             sec
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# Val         double          Parameter value (see table above for unit)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetNavICEphDoubleParamForSV(CommandBase):

  def __init__(self, svId, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetNavICEphDoubleParamForSV")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetNavICEphemerisDoubleParam is deprecated since 21.3. You may use SetNavICEphDoubleParamForSV.
# 
# Set various parameters in the NavIC ephemeris
# 
#   ParamName         Unit
#   "ClockBias"       sec
#   "ClockDrift"      sec/sec
#   "ClockDriftRate"  sec/sec^2
#   "Crs"             meter
#   "Crc"             meter
#   "Cis"             rad
#   "Cic"             rad
#   "Cus"             rad
#   "Cuc"             rad
#   "DeltaN"          rad/sec
#   "M0"              rad
#   "Eccentricity"    -
#   "SqrtA"           sqrt(meter)
#   "BigOmega"        rad
#   "I0"              rad
#   "LittleOmega"     rad
#   "BigOmegaDot"     rad/sec
#   "Idot"            rad/sec
#   "Accuracy"        meter
#   "Adot"            meters/sec
#   "DeltaN0dot"      rad/sec^2
#   "Tgd"             sec
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# Val         double          Parameter value (see table above for unit)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetNavICEphemerisDoubleParam(CommandBase):

  def __init__(self, svId, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetNavICEphemerisDoubleParam")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get various parameters in the NavIC ephemeris
# 
#   ParamName         Unit
#   "ClockBias"       sec
#   "ClockDrift"      sec/sec
#   "ClockDriftRate"  sec/sec^2
#   "Crs"             meter
#   "Crc"             meter
#   "Cis"             rad
#   "Cic"             rad
#   "Cus"             rad
#   "Cuc"             rad
#   "DeltaN"          rad/sec
#   "M0"              rad
#   "Eccentricity"    -
#   "SqrtA"           sqrt(meter)
#   "BigOmega"        rad
#   "I0"              rad
#   "LittleOmega"     rad
#   "BigOmegaDot"     rad/sec
#   "Idot"            rad/sec
#   "Accuracy"        meter
#   "Adot"            meters/sec
#   "DeltaN0dot"      rad/sec^2
#   "Tgd"             sec
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetNavICEphDoubleParamForSV(CommandBase):

  def __init__(self, svId, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetNavICEphDoubleParamForSV")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetNavICEphemerisDoubleParam is deprecated since 21.3. You may use GetNavICEphDoubleParamForSV.
# 
# Get various parameters in the NavIC ephemeris
# 
#   ParamName         Unit
#   "ClockBias"       sec
#   "ClockDrift"      sec/sec
#   "ClockDriftRate"  sec/sec^2
#   "Crs"             meter
#   "Crc"             meter
#   "Cis"             rad
#   "Cic"             rad
#   "Cus"             rad
#   "Cuc"             rad
#   "DeltaN"          rad/sec
#   "M0"              rad
#   "Eccentricity"    -
#   "SqrtA"           sqrt(meter)
#   "BigOmega"        rad
#   "I0"              rad
#   "LittleOmega"     rad
#   "BigOmegaDot"     rad/sec
#   "Idot"            rad/sec
#   "Accuracy"        meter
#   "Adot"            meters/sec
#   "DeltaN0dot"      rad/sec^2
#   "Tgd"             sec
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetNavICEphemerisDoubleParam(CommandBase):

  def __init__(self, svId, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetNavICEphemerisDoubleParam")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetNavICEphDoubleParamForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# Val         double          Parameter value (see table above for unit)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetNavICEphDoubleParamForSVResult(CommandResult):

  def __init__(self, svId, paramName, val, dataSetName = None):
    CommandResult.__init__(self, "GetNavICEphDoubleParamForSVResult")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set GPS ephemeris parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetGpsEphDoubleParamForSV for accepted names
# Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGpsEphDoubleParamForEachSV(CommandBase):

  def __init__(self, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetGpsEphDoubleParamForEachSV")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetGpsEphemerisDoubleParams is deprecated since 21.3. You may use SetGpsEphDoubleParamForEachSV.
# 
# Set GPS ephemeris parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetGpsEphDoubleParamForSV for accepted names
# Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGpsEphemerisDoubleParams(CommandBase):

  def __init__(self, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetGpsEphemerisDoubleParams")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get GPS ephemeris parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetGpsEphDoubleParamForSV for accepted names
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsEphDoubleParamForEachSV(CommandBase):

  def __init__(self, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetGpsEphDoubleParamForEachSV")
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetGpsEphemerisDoubleParams is deprecated since 21.3. You may use GetGpsEphDoubleParamForEachSV.
# 
# Get GPS ephemeris parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetGpsEphDoubleParamForSV for accepted names
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsEphemerisDoubleParams(CommandBase):

  def __init__(self, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetGpsEphemerisDoubleParams")
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetGpsEphDoubleParamForEachSV.
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetGpsEphDoubleParamForSV for accepted names
# Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsEphDoubleParamForEachSVResult(CommandResult):

  def __init__(self, paramName, val, dataSetName = None):
    CommandResult.__init__(self, "GetGpsEphDoubleParamForEachSVResult")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set Galileo ephemeris parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetGalileoEphDoubleParamForSV for accepted names
# Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGalileoEphDoubleParamForEachSV(CommandBase):

  def __init__(self, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetGalileoEphDoubleParamForEachSV")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetGalileoEphemerisDoubleParams is deprecated since 21.3. You may use SetGalileoEphDoubleParamForEachSV.
# 
# Set Galileo ephemeris parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetGalileoEphDoubleParamForSV for accepted names
# Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGalileoEphemerisDoubleParams(CommandBase):

  def __init__(self, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetGalileoEphemerisDoubleParams")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get Galileo ephemeris parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetGalileoEphDoubleParamForSV for accepted names
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGalileoEphDoubleParamForEachSV(CommandBase):

  def __init__(self, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetGalileoEphDoubleParamForEachSV")
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetGalileoEphemerisDoubleParams is deprecated since 21.3. You may use GetGalileoEphDoubleParamForEachSV.
# 
# Get Galileo ephemeris parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetGalileoEphDoubleParamForSV for accepted names
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGalileoEphemerisDoubleParams(CommandBase):

  def __init__(self, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetGalileoEphemerisDoubleParams")
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetGalileoEphDoubleParamForEachSV.
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetGalileoEphDoubleParamForSV for accepted names
# Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGalileoEphDoubleParamForEachSVResult(CommandResult):

  def __init__(self, paramName, val, dataSetName = None):
    CommandResult.__init__(self, "GetGalileoEphDoubleParamForEachSVResult")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set BeiDou ephemeris parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetBeiDouEphDoubleParamForSV for accepted names
# Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetBeiDouEphDoubleParamForEachSV(CommandBase):

  def __init__(self, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetBeiDouEphDoubleParamForEachSV")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetBeiDouEphemerisDoubleParams is deprecated since 21.3. You may use SetBeiDouEphDoubleParamForEachSV.
# 
# Set BeiDou ephemeris parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetBeiDouEphDoubleParamForSV for accepted names
# Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetBeiDouEphemerisDoubleParams(CommandBase):

  def __init__(self, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetBeiDouEphemerisDoubleParams")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get BeiDou ephemeris parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetBeiDouEphDoubleParamForSV for accepted names
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetBeiDouEphDoubleParamForEachSV(CommandBase):

  def __init__(self, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetBeiDouEphDoubleParamForEachSV")
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetBeiDouEphemerisDoubleParams is deprecated since 21.3. You may use GetBeiDouEphDoubleParamForEachSV.
# 
# Get BeiDou ephemeris parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetBeiDouEphDoubleParamForSV for accepted names
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetBeiDouEphemerisDoubleParams(CommandBase):

  def __init__(self, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetBeiDouEphemerisDoubleParams")
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetBeiDouEphDoubleParamForEachSV.
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetBeiDouEphDoubleParamForSV for accepted names
# Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetBeiDouEphDoubleParamForEachSVResult(CommandResult):

  def __init__(self, paramName, val, dataSetName = None):
    CommandResult.__init__(self, "GetBeiDouEphDoubleParamForEachSVResult")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set GLONASS parameter value for all satellites
#
# Name      Type         Description
# --------- ------------ --------------------------------------------------------------------------------------------------
# ParamName string       Refer to SetGlonassEphDoubleParamForSV for accepted names
# Val       array double Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
#

class SetGlonassEphDoubleParamForEachSV(CommandBase):

  def __init__(self, paramName, val):
    CommandBase.__init__(self, "SetGlonassEphDoubleParamForEachSV")
    self.setParamName(paramName)
    self.setVal(val)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

#
# Please note the command SetGlonassDoubleParams is deprecated since 21.3. You may use SetGlonassEphDoubleParamForEachSV.
# 
# Set GLONASS parameter value for all satellites
#
# Name      Type         Description
# --------- ------------ --------------------------------------------------------------------------------------------------
# ParamName string       Refer to SetGlonassEphDoubleParamForSV for accepted names
# Val       array double Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
#

class SetGlonassDoubleParams(CommandBase):

  def __init__(self, paramName, val):
    CommandBase.__init__(self, "SetGlonassDoubleParams")
    self.setParamName(paramName)
    self.setVal(val)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

#
# Get GLONASS parameter value for all satellites
#
# Name      Type   Description
# --------- ------ ---------------------------------------------------------
# ParamName string Refer to SetGlonassEphDoubleParamForSV for accepted names
#

class GetGlonassEphDoubleParamForEachSV(CommandBase):

  def __init__(self, paramName):
    CommandBase.__init__(self, "GetGlonassEphDoubleParamForEachSV")
    self.setParamName(paramName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

#
# Please note the command GetGlonassDoubleParams is deprecated since 21.3. You may use GetGlonassEphDoubleParamForEachSV.
# 
# Get GLONASS parameter value for all satellites
#
# Name      Type   Description
# --------- ------ ---------------------------------------------------------
# ParamName string Refer to SetGlonassEphDoubleParamForSV for accepted names
#

class GetGlonassDoubleParams(CommandBase):

  def __init__(self, paramName):
    CommandBase.__init__(self, "GetGlonassDoubleParams")
    self.setParamName(paramName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

#
# Result of GetGlonassEphDoubleParamForEachSV.
#
# Name      Type         Description
# --------- ------------ --------------------------------------------------------------------------------------------------
# ParamName string       Refer to SetGlonassEphDoubleParamForSV for accepted names
# Val       array double Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
#

class GetGlonassEphDoubleParamForEachSVResult(CommandResult):

  def __init__(self, paramName, val):
    CommandResult.__init__(self, "GetGlonassEphDoubleParamForEachSVResult")
    self.setParamName(paramName)
    self.setVal(val)

  def isSuccess(self):
    return True

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

#
# Get GLONASS frequency number for all satellites. Return values range from -7 to 13. Value -8 is an invalid value, it indicates that the almanac for the satellite is invalid.
#
#

class GetGlonassFrequencyNumberForEachSV(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetGlonassFrequencyNumberForEachSV")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetGlonassFrequencyNumberForEachSV
#
# Name            Type      Description
# --------------- --------- --------------------------------------------------------------------------------------------------
# FrequencyNumber array int Frequency number of each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
#

class GetGlonassFrequencyNumberForEachSVResult(CommandResult):

  def __init__(self, frequencyNumber):
    CommandResult.__init__(self, "GetGlonassFrequencyNumberForEachSVResult")
    self.setFrequencyNumber(frequencyNumber)

  def isSuccess(self):
    return True

  def frequencyNumber(self):
    return self.get("FrequencyNumber")

  def setFrequencyNumber(self, value):
    return self.set("FrequencyNumber", value)

#
# Set QZSS ephemeris parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetQzssEphDoubleParamForSV for accepted names
# Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssEphDoubleParamForEachSV(CommandBase):

  def __init__(self, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetQzssEphDoubleParamForEachSV")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetQzssEphemerisDoubleParams is deprecated since 21.3. You may use SetQzssEphDoubleParamForEachSV.
# 
# Set QZSS ephemeris parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetQzssEphDoubleParamForSV for accepted names
# Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssEphemerisDoubleParams(CommandBase):

  def __init__(self, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetQzssEphemerisDoubleParams")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get QZSS ephemeris parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetQzssEphDoubleParamForSV for accepted names
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssEphDoubleParamForEachSV(CommandBase):

  def __init__(self, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetQzssEphDoubleParamForEachSV")
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetQzssEphemerisDoubleParams is deprecated since 21.3. You may use GetQzssEphDoubleParamForEachSV.
# 
# Get QZSS ephemeris parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetQzssEphDoubleParamForSV for accepted names
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssEphemerisDoubleParams(CommandBase):

  def __init__(self, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetQzssEphemerisDoubleParams")
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetQzssEphDoubleParamForEachSV.
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetQzssEphDoubleParamForSV for accepted names
# Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssEphDoubleParamForEachSVResult(CommandResult):

  def __init__(self, paramName, val, dataSetName = None):
    CommandResult.__init__(self, "GetQzssEphDoubleParamForEachSVResult")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set NavIC ephemeris parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetNavICEphDoubleParamForSV for accepted names
# Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetNavICEphDoubleParamForEachSV(CommandBase):

  def __init__(self, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetNavICEphDoubleParamForEachSV")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetNavICEphemerisDoubleParams is deprecated since 21.3. You may use SetNavICEphDoubleParamForEachSV.
# 
# Set NavIC ephemeris parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetNavICEphDoubleParamForSV for accepted names
# Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetNavICEphemerisDoubleParams(CommandBase):

  def __init__(self, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetNavICEphemerisDoubleParams")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get NavIC ephemeris parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetNavICEphDoubleParamForSV for accepted names
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetNavICEphDoubleParamForEachSV(CommandBase):

  def __init__(self, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetNavICEphDoubleParamForEachSV")
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetNavICEphemerisDoubleParams is deprecated since 21.3. You may use GetNavICEphDoubleParamForEachSV.
# 
# Get NavIC ephemeris parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetNavICEphDoubleParamForSV for accepted names
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetNavICEphemerisDoubleParams(CommandBase):

  def __init__(self, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetNavICEphemerisDoubleParams")
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetNavICEphDoubleParamForEachSV.
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetNavICEphDoubleParamForSV for accepted names
# Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetNavICEphDoubleParamForEachSVResult(CommandResult):

  def __init__(self, paramName, val, dataSetName = None):
    CommandResult.__init__(self, "GetNavICEphDoubleParamForEachSVResult")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set various boolean parameters in the GPS ephemeris
# 
#   ParamName
# "IscL1CaAvailable"
# "IscL2CAvailable"
# "IscL5I5Available"
# "IscL5Q5Available"
# "IscL1CPAvailable"
# "IscL1CDAvailable"
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..32, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# Val         bool            Parameter value (see table above for unit)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGpsEphBoolParamForSV(CommandBase):

  def __init__(self, svId, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetGpsEphBoolParamForSV")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get various boolean parameters in the GPS ephemeris
# 
#   ParamName
# "IscL1CaAvailable"
# "IscL2CAvailable"
# "IscL5I5Available"
# "IscL5Q5Available"
# "IscL1CPAvailable"
# "IscL1CDAvailable"
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..32, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsEphBoolParamForSV(CommandBase):

  def __init__(self, svId, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetGpsEphBoolParamForSV")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetGpsEphBoolParamForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..32, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# Val         bool            Parameter value (see table above for unit)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsEphBoolParamForSVResult(CommandResult):

  def __init__(self, svId, paramName, val, dataSetName = None):
    CommandResult.__init__(self, "GetGpsEphBoolParamForSVResult")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set GPS ephemeris boolean parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetGpsEphBoolParamForSV for accepted names
# Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGpsEphBoolParamForEachSV(CommandBase):

  def __init__(self, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetGpsEphBoolParamForEachSV")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetGpsEphemerisBoolParams is deprecated since 21.3. You may use SetGpsEphBoolParamForEachSV.
# 
# Set GPS ephemeris boolean parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetGpsEphBoolParamForSV for accepted names
# Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGpsEphemerisBoolParams(CommandBase):

  def __init__(self, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetGpsEphemerisBoolParams")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get GPS ephemeris boolean parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetGpsEphBoolParamForSV for accepted names
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsEphBoolParamForEachSV(CommandBase):

  def __init__(self, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetGpsEphBoolParamForEachSV")
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetGpsEphemerisBoolParams is deprecated since 21.3. You may use GetGpsEphBoolParamForEachSV.
# 
# Get GPS ephemeris boolean parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetGpsEphBoolParamForSV for accepted names
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsEphemerisBoolParams(CommandBase):

  def __init__(self, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetGpsEphemerisBoolParams")
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetGpsEphBoolParamForEachSV.
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetGpsEphBoolParamForSV for accepted names
# Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetGpsEphBoolParamForEachSVResult(CommandResult):

  def __init__(self, paramName, val, dataSetName = None):
    CommandResult.__init__(self, "GetGpsEphBoolParamForEachSVResult")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set various boolean parameters in the BeiDou ephemeris
# 
#   ParamName
# "IscB1CdAvailable"
# "IscB2adAvailable"
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# Val         bool            Parameter value (see table above for unit)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetBeiDouEphBoolParamForSV(CommandBase):

  def __init__(self, svId, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetBeiDouEphBoolParamForSV")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get various boolean parameters in the BeiDou ephemeris
# 
#   ParamName
# "IscB1CdAvailable"
# "IscB2adAvailable"
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetBeiDouEphBoolParamForSV(CommandBase):

  def __init__(self, svId, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetBeiDouEphBoolParamForSV")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetBeiDouEphBoolParamForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# Val         bool            Parameter value (see table above for unit)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetBeiDouEphBoolParamForSVResult(CommandResult):

  def __init__(self, svId, paramName, val, dataSetName = None):
    CommandResult.__init__(self, "GetBeiDouEphBoolParamForSVResult")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set BeiDou ephemeris boolean parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetBeiDouEphBoolParamForSV for accepted names
# Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetBeiDouEphBoolParamForEachSV(CommandBase):

  def __init__(self, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetBeiDouEphBoolParamForEachSV")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetBeiDouEphemerisBoolParams is deprecated since 21.3. You may use SetBeiDouEphBoolParamForEachSV.
# 
# Set BeiDou ephemeris boolean parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetBeiDouEphBoolParamForSV for accepted names
# Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetBeiDouEphemerisBoolParams(CommandBase):

  def __init__(self, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetBeiDouEphemerisBoolParams")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get BeiDou ephemeris boolean parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetBeiDouEphBoolParamForSV for accepted names
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetBeiDouEphBoolParamForEachSV(CommandBase):

  def __init__(self, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetBeiDouEphBoolParamForEachSV")
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetBeiDouEphemerisBoolParams is deprecated since 21.3. You may use GetBeiDouEphBoolParamForEachSV.
# 
# Get BeiDou ephemeris boolean parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetBeiDouEphBoolParamForSV for accepted names
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetBeiDouEphemerisBoolParams(CommandBase):

  def __init__(self, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetBeiDouEphemerisBoolParams")
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetBeiDouEphBoolParamForEachSV.
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetBeiDouEphBoolParamForSV for accepted names
# Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetBeiDouEphBoolParamForEachSVResult(CommandResult):

  def __init__(self, paramName, val, dataSetName = None):
    CommandResult.__init__(self, "GetBeiDouEphBoolParamForEachSVResult")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set various boolean parameters in the QZSS ephemeris
# 
#   ParamName
# "IscL1CaAvailable"
# "IscL2CAvailable"
# "IscL5I5Available"
# "IscL5Q5Available"
# "IscL1CPAvailable"
# "IscL1CDAvailable"
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# Val         bool            Parameter value (see table above for unit)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssEphBoolParamForSV(CommandBase):

  def __init__(self, svId, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetQzssEphBoolParamForSV")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetQzssEphemerisBoolParam is deprecated since 21.3. You may use SetQzssEphBoolParamForSV.
# 
# Set various boolean parameters in the QZSS ephemeris
# 
#   ParamName
# "IscL1CaAvailable"
# "IscL2CAvailable"
# "IscL5I5Available"
# "IscL5Q5Available"
# "IscL1CPAvailable"
# "IscL1CDAvailable"
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# Val         bool            Parameter value (see table above for unit)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssEphemerisBoolParam(CommandBase):

  def __init__(self, svId, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetQzssEphemerisBoolParam")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get various boolean parameters in the QZSS ephemeris
# 
#   ParamName
# "IscL1CaAvailable"
# "IscL2CAvailable"
# "IscL5I5Available"
# "IscL5Q5Available"
# "IscL1CPAvailable"
# "IscL1CDAvailable"
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssEphBoolParamForSV(CommandBase):

  def __init__(self, svId, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetQzssEphBoolParamForSV")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetQzssEphemerisBoolParam is deprecated since 21.3. You may use GetQzssEphBoolParamForSV.
# 
# Get various boolean parameters in the QZSS ephemeris
# 
#   ParamName
# "IscL1CaAvailable"
# "IscL2CAvailable"
# "IscL5I5Available"
# "IscL5Q5Available"
# "IscL1CPAvailable"
# "IscL1CDAvailable"
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssEphemerisBoolParam(CommandBase):

  def __init__(self, svId, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetQzssEphemerisBoolParam")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetQzssEphBoolParamForSV.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites
# ParamName   string          Parameter name (see table above for accepted names)
# Val         bool            Parameter value (see table above for unit)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssEphBoolParamForSVResult(CommandResult):

  def __init__(self, svId, paramName, val, dataSetName = None):
    CommandResult.__init__(self, "GetQzssEphBoolParamForSVResult")
    self.setSvId(svId)
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set QZSS ephemeris boolean parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetQzssEphemerisBoolParam for accepted names
# Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssEphBoolParamForEachSV(CommandBase):

  def __init__(self, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetQzssEphBoolParamForEachSV")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetQzssEphemerisBoolParams is deprecated since 21.3. You may use SetQzssEphBoolParamForEachSV.
# 
# Set QZSS ephemeris boolean parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetQzssEphemerisBoolParam for accepted names
# Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssEphemerisBoolParams(CommandBase):

  def __init__(self, paramName, val, dataSetName = None):
    CommandBase.__init__(self, "SetQzssEphemerisBoolParams")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get QZSS ephemeris boolean parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetQzssEphemerisBoolParam for accepted names
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssEphBoolParamForEachSV(CommandBase):

  def __init__(self, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetQzssEphBoolParamForEachSV")
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command GetQzssEphemerisBoolParams is deprecated since 21.3. You may use GetQzssEphBoolParamForEachSV.
# 
# Get QZSS ephemeris boolean parameter value for all satellites
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetQzssEphemerisBoolParam for accepted names
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssEphemerisBoolParams(CommandBase):

  def __init__(self, paramName, dataSetName = None):
    CommandBase.__init__(self, "GetQzssEphemerisBoolParams")
    self.setParamName(paramName)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetQzssEphBoolParamForEachSV.
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------
# ParamName   string          Refer to SetQzssEphemerisBoolParam for accepted names
# Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetQzssEphBoolParamForEachSVResult(CommandResult):

  def __init__(self, paramName, val, dataSetName = None):
    CommandResult.__init__(self, "GetQzssEphBoolParamForEachSVResult")
    self.setParamName(paramName)
    self.setVal(val)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def paramName(self):
    return self.get("ParamName")

  def setParamName(self, value):
    return self.set("ParamName", value)

  def val(self):
    return self.get("Val")

  def setVal(self, value):
    return self.set("Val", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set parameters for a SBAS satellite ephemeris (runtime modification only available for health parameter)
#
# Name           Type               Description
# -------------- ------------------ --------------------------------------------------------------------------
# SvId           int                The satellite's SV ID
# ParamValueDict dict string:double A dictionary of param value pairs.
#                                   Accepted keys are: "ClockBias", "RelativeFrequencyBias", "X", "Y", "Z",
#                                                      "VelocityX", "VelocityY", "VelocityZ", "AccelerationX",
#                                                      "AccelerationY", "AccelerationZ", "Health", "URA" and
#                                                      "UraIndex"
#

class SetSbasEphParamsForSV(CommandBase):

  def __init__(self, svId, paramValueDict):
    CommandBase.__init__(self, "SetSbasEphParamsForSV")
    self.setSvId(svId)
    self.setParamValueDict(paramValueDict)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramValueDict(self):
    return self.get("ParamValueDict")

  def setParamValueDict(self, value):
    return self.set("ParamValueDict", value)

#
# Get parameters for a SBAS satellite ephemeris (runtime modification only available for health parameter)
#
# Name       Type         Description
# ---------- ------------ ----------------------------------------------------------------------------
# SvId       int          The satellite's SV ID
# ParamArray array string An array of params.
#                         Accepted values are: "ClockBias", "RelativeFrequencyBias", "X", "Y", "Z",
#                                              "VelocityX", "VelocityY", "VelocityZ", "AccelerationX",
#                                              "AccelerationY", "AccelerationZ", "Health", "URA" and
#                                              "UraIndex"
#

class GetSbasEphParamsForSV(CommandBase):

  def __init__(self, svId, paramArray):
    CommandBase.__init__(self, "GetSbasEphParamsForSV")
    self.setSvId(svId)
    self.setParamArray(paramArray)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramArray(self):
    return self.get("ParamArray")

  def setParamArray(self, value):
    return self.set("ParamArray", value)

#
# Result of GetSbasEphParamsForSV.
#
# Name           Type               Description
# -------------- ------------------ --------------------------------------------------------------------------
# SvId           int                The satellite's SV ID
# ParamValueDict dict string:double A dictionary of param value pairs.
#                                   Accepted keys are: "ClockBias", "RelativeFrequencyBias", "X", "Y", "Z",
#                                                      "VelocityX", "VelocityY", "VelocityZ", "AccelerationX",
#                                                      "AccelerationY", "AccelerationZ", "Health", "URA" and
#                                                      "UraIndex"
#

class GetSbasEphParamsForSVResult(CommandResult):

  def __init__(self, svId, paramValueDict):
    CommandResult.__init__(self, "GetSbasEphParamsForSVResult")
    self.setSvId(svId)
    self.setParamValueDict(paramValueDict)

  def isSuccess(self):
    return True

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def paramValueDict(self):
    return self.get("ParamValueDict")

  def setParamValueDict(self, value):
    return self.set("ParamValueDict", value)

#
# Apply ranging flag for a SBAS satellite
#
# Name   Type Description
# ------ ---- --------------------------
# SvId   int  The satellite's SV ID
# Health bool The ranging unhealthy flag
#

class SetSbasRangingHealthForSV(CommandBase):

  def __init__(self, svId, health):
    CommandBase.__init__(self, "SetSbasRangingHealthForSV")
    self.setSvId(svId)
    self.setHealth(health)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

#
# Apply correction flag for a SBAS satellite
#
# Name   Type Description
# ------ ---- -----------------------------
# SvId   int  The satellite's SV ID
# Health bool The correction unhealthy flag
#

class SetSbasCorrectionsHealthForSV(CommandBase):

  def __init__(self, svId, health):
    CommandBase.__init__(self, "SetSbasCorrectionsHealthForSV")
    self.setSvId(svId)
    self.setHealth(health)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

#
# Apply integrity flag for a SBAS satellite
#
# Name   Type Description
# ------ ---- ----------------------------
# SvId   int  The satellite's SV ID
# Health bool The integrity unhealthy flag
#

class SetSbasIntegrityHealthForSV(CommandBase):

  def __init__(self, svId, health):
    CommandBase.__init__(self, "SetSbasIntegrityHealthForSV")
    self.setSvId(svId)
    self.setHealth(health)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

#
# Apply reserved flag for a SBAS satellite
#
# Name   Type Description
# ------ ---- ---------------------------
# SvId   int  The satellite's SV ID
# Health bool The reserved unhealthy flag
#

class SetSbasReservedHealthForSV(CommandBase):

  def __init__(self, svId, health):
    CommandBase.__init__(self, "SetSbasReservedHealthForSV")
    self.setSvId(svId)
    self.setHealth(health)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

#
# Apply service provider for a satellite
#
# Name   Type Description
# ------ ---- ---------------------
# SvId   int  The satellite's SV ID
# Health int  The service provider
#

class SetSbasServiceHealthForSV(CommandBase):

  def __init__(self, svId, health):
    CommandBase.__init__(self, "SetSbasServiceHealthForSV")
    self.setSvId(svId)
    self.setHealth(health)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def health(self):
    return self.get("Health")

  def setHealth(self, value):
    return self.set("Health", value)

#
# Set orbit perturbations (Crs, Crc, Cis, Cic, Cus and Cuc) to zero for the specified constellation.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
# SvId        int             The satellite's SV ID. Use 0 to apply new value to all satellites in the constellation.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class ResetPerturbations(CommandBase):

  def __init__(self, system, svId, dataSetName = None):
    CommandBase.__init__(self, "ResetPerturbations")
    self.setSystem(system)
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set orbit perturbations (Crs, Crc, Cis, Cic, Cus and Cuc) for the specified constellation.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
# SvId        int             The satellite's SV ID.
# Crs         double          Crs (meter)
# Crc         double          Crc (meter)
# Cis         double          Cis (rad)
# Cic         double          Cic (rad)
# Cus         double          Cus (rad)
# Cuc         double          Cuc (rad)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetPerturbations(CommandBase):

  def __init__(self, system, svId, crs, crc, cis, cic, cus, cuc, dataSetName = None):
    CommandBase.__init__(self, "SetPerturbations")
    self.setSystem(system)
    self.setSvId(svId)
    self.setCrs(crs)
    self.setCrc(crc)
    self.setCis(cis)
    self.setCic(cic)
    self.setCus(cus)
    self.setCuc(cuc)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def crs(self):
    return self.get("Crs")

  def setCrs(self, value):
    return self.set("Crs", value)

  def crc(self):
    return self.get("Crc")

  def setCrc(self, value):
    return self.set("Crc", value)

  def cis(self):
    return self.get("Cis")

  def setCis(self, value):
    return self.set("Cis", value)

  def cic(self):
    return self.get("Cic")

  def setCic(self, value):
    return self.set("Cic", value)

  def cus(self):
    return self.get("Cus")

  def setCus(self, value):
    return self.set("Cus", value)

  def cuc(self):
    return self.get("Cuc")

  def setCuc(self, value):
    return self.set("Cuc", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get orbit perturbations (Crs, Crc, Cis, Cic, Cus and Cuc) for the specified constellation.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
# SvId        int             The satellite's SV ID.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetPerturbations(CommandBase):

  def __init__(self, system, svId, dataSetName = None):
    CommandBase.__init__(self, "GetPerturbations")
    self.setSystem(system)
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetPerturbations.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
# SvId        int             The satellite's SV ID.
# Crs         double          Crs (meter)
# Crc         double          Crc (meter)
# Cis         double          Cis (rad)
# Cic         double          Cic (rad)
# Cus         double          Cus (rad)
# Cuc         double          Cuc (rad)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetPerturbationsResult(CommandResult):

  def __init__(self, system, svId, crs, crc, cis, cic, cus, cuc, dataSetName = None):
    CommandResult.__init__(self, "GetPerturbationsResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setCrs(crs)
    self.setCrc(crc)
    self.setCis(cis)
    self.setCic(cic)
    self.setCus(cus)
    self.setCuc(cuc)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def crs(self):
    return self.get("Crs")

  def setCrs(self, value):
    return self.set("Crs", value)

  def crc(self):
    return self.get("Crc")

  def setCrc(self, value):
    return self.set("Crc", value)

  def cis(self):
    return self.get("Cis")

  def setCis(self, value):
    return self.set("Cis", value)

  def cic(self):
    return self.get("Cic")

  def setCic(self, value):
    return self.set("Cic", value)

  def cus(self):
    return self.get("Cus")

  def setCus(self, value):
    return self.set("Cus", value)

  def cuc(self):
    return self.get("Cuc")

  def setCuc(self, value):
    return self.set("Cuc", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set orbit perturbations (Crs, Crc, Cis, Cic, Cus and Cuc) for all satellites of the specified constellation..
# All parameters are zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
# Crs         array double    Crs (meter)
# Crc         array double    Crc (meter)
# Cis         array double    Cis (rad)
# Cic         array double    Cic (rad)
# Cus         array double    Cus (rad)
# Cuc         array double    Cuc (rad)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetPerturbationsForAllSat(CommandBase):

  def __init__(self, system, crs, crc, cis, cic, cus, cuc, dataSetName = None):
    CommandBase.__init__(self, "SetPerturbationsForAllSat")
    self.setSystem(system)
    self.setCrs(crs)
    self.setCrc(crc)
    self.setCis(cis)
    self.setCic(cic)
    self.setCus(cus)
    self.setCuc(cuc)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def crs(self):
    return self.get("Crs")

  def setCrs(self, value):
    return self.set("Crs", value)

  def crc(self):
    return self.get("Crc")

  def setCrc(self, value):
    return self.set("Crc", value)

  def cis(self):
    return self.get("Cis")

  def setCis(self, value):
    return self.set("Cis", value)

  def cic(self):
    return self.get("Cic")

  def setCic(self, value):
    return self.set("Cic", value)

  def cus(self):
    return self.get("Cus")

  def setCus(self, value):
    return self.set("Cus", value)

  def cuc(self):
    return self.get("Cuc")

  def setCuc(self, value):
    return self.set("Cuc", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get orbit perturbations (Crs, Crc, Cis, Cic, Cus and Cuc) for all satellites of the specified constellation..
# All parameters are zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetPerturbationsForAllSat(CommandBase):

  def __init__(self, system, dataSetName = None):
    CommandBase.__init__(self, "GetPerturbationsForAllSat")
    self.setSystem(system)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of GetPerturbationsForAllSat.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
# Crs         array double    Crs (meter)
# Crc         array double    Crc (meter)
# Cis         array double    Cis (rad)
# Cic         array double    Cic (rad)
# Cus         array double    Cus (rad)
# Cuc         array double    Cuc (rad)
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class GetPerturbationsForAllSatResult(CommandResult):

  def __init__(self, system, crs, crc, cis, cic, cus, cuc, dataSetName = None):
    CommandResult.__init__(self, "GetPerturbationsForAllSatResult")
    self.setSystem(system)
    self.setCrs(crs)
    self.setCrc(crc)
    self.setCis(cis)
    self.setCic(cic)
    self.setCus(cus)
    self.setCuc(cuc)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def crs(self):
    return self.get("Crs")

  def setCrs(self, value):
    return self.set("Crs", value)

  def crc(self):
    return self.get("Crc")

  def setCrc(self, value):
    return self.set("Crc", value)

  def cis(self):
    return self.get("Cis")

  def setCis(self, value):
    return self.set("Cis", value)

  def cic(self):
    return self.get("Cic")

  def setCic(self, value):
    return self.set("Cic", value)

  def cus(self):
    return self.get("Cus")

  def setCus(self, value):
    return self.set("Cus", value)

  def cuc(self):
    return self.get("Cuc")

  def setCuc(self, value):
    return self.set("Cuc", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set (or Modify) event to change GPS CNAV message bits. If you send this command without setting the ID
# parameter, or if you set the ID with a value never used before, a new Modification event will be
# created. If you reuse the same event ID, it will modify the existing event.
# 
# Note that start and stop time are automatically extended to beginning and ending of overlapped
# messages.
# 
# The Condition parameter is optional and allows you to add content matching condition before applying
# bit modifications.
# 
# BitModifications can be an empty string. The Modification will have no effect until you modify it with at
# least one bits mod.
# 
# A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
# index (1 refers to the first transmitted bit) and Bits is a modification mask where each
# character describes a modification to a single bit. The allowed characters are:
#    0 : force bit to 0
#    1 : force bit to 1
#    - : leave bit unchanged
#    X : revert bit (0 becomes 1 and 1 becomes 0)
# 
# For example: "24:X---10XX" will: revert bits 24, 30 and 31
#                  set bit 28 to 1
#                  set bit 29 to 0
# The other bits are not affected.
# 
# You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
#
# Name             Type         Description
# ---------------- ------------ ---------------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "L2C" and "L5" (empty for all)
# SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# MessageType      int          CNAV Message type (use -1 to apply modification to all message types)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class SetMessageModificationToGpsCNav(CommandBase):

  def __init__(self, signalArray, svId, startTime, stopTime, messageType, condition, updateCRC, bitModifications, id):
    CommandBase.__init__(self, "SetMessageModificationToGpsCNav")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setMessageType(messageType)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def messageType(self):
    return self.get("MessageType")

  def setMessageType(self, value):
    return self.set("MessageType", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get infos about the GPS CNAV message modification with this ID.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Unique identifier of the event
#

class GetMessageModificationToGpsCNav(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetMessageModificationToGpsCNav")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetMessageModificationToGpsCNav.
#
# Name             Type         Description
# ---------------- ------------ ---------------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "L2C" and "L5" (empty for all)
# SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# MessageType      int          CNAV Message type (use -1 to apply modification to all message types)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class GetMessageModificationToGpsCNavResult(CommandResult):

  def __init__(self, signalArray, svId, startTime, stopTime, messageType, condition, updateCRC, bitModifications, id):
    CommandResult.__init__(self, "GetMessageModificationToGpsCNavResult")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setMessageType(messageType)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def isSuccess(self):
    return True

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def messageType(self):
    return self.get("MessageType")

  def setMessageType(self, value):
    return self.set("MessageType", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set (or Modify) event to change GPS MNAV message bits. If you send this command without setting the ID
# parameter, or if you set the ID with a value never used before, a new Modification event will be
# created. If you reuse the same event ID, it will modify the existing event.
# 
# Note that start and stop time are automatically extended to beginning and ending of overlapped
# messages.
# 
# The Condition parameter is optional and allows you to add content matching condition before applying
# bit modifications.
# 
# BitModifications can be an empty string. The Modification will have no effect until you modify it with at
# least one bits mod.
# 
# A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
# index (1 refers to the first transmitted bit) and Bits is a modification mask where each
# character describes a modification to a single bit. The allowed characters are:
#    0 : force bit to 0
#    1 : force bit to 1
#    - : leave bit unchanged
#    X : revert bit (0 becomes 1 and 1 becomes 0)
# 
# For example: "24:X---10XX" will: revert bits 24, 30 and 31
#                  set bit 28 to 1
#                  set bit 29 to 0
# The other bits are not affected.
# 
# You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
#
# Name             Type         Description
# ---------------- ------------ ------------------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "L1ME" and "L2ME" (empty for all)
# SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# MessageType      int          MNAV Message type
# Occurrence       int          Occurrence number in message sequence (1 based, or use -1 to match any occurrence)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier automatically set by simulator
#

class SetMessageModificationToGpsMNav(CommandBase):

  def __init__(self, signalArray, svId, startTime, stopTime, messageType, occurrence, condition, bitModifications, id):
    CommandBase.__init__(self, "SetMessageModificationToGpsMNav")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setMessageType(messageType)
    self.setOccurrence(occurrence)
    self.setCondition(condition)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def messageType(self):
    return self.get("MessageType")

  def setMessageType(self, value):
    return self.set("MessageType", value)

  def occurrence(self):
    return self.get("Occurrence")

  def setOccurrence(self, value):
    return self.set("Occurrence", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get infos about the GPS MNAV message modification with this ID.
#
# Name Type   Description
# ---- ------ ------------------------------------------------
# Id   string Unique identifier automatically set by simulator
#

class GetMessageModificationToGpsMNav(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetMessageModificationToGpsMNav")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetMessageModificationToGpsMNav.
#
# Name             Type         Description
# ---------------- ------------ ------------------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "L1ME" and "L2ME" (empty for all)
# SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# MessageType      int          MNAV Message type
# Occurrence       int          Occurrence number in message sequence (1 based, or use -1 to match any occurrence)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier automatically set by simulator
#

class GetMessageModificationToGpsMNavResult(CommandResult):

  def __init__(self, signalArray, svId, startTime, stopTime, messageType, occurrence, condition, bitModifications, id):
    CommandResult.__init__(self, "GetMessageModificationToGpsMNavResult")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setMessageType(messageType)
    self.setOccurrence(occurrence)
    self.setCondition(condition)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def isSuccess(self):
    return True

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def messageType(self):
    return self.get("MessageType")

  def setMessageType(self, value):
    return self.set("MessageType", value)

  def occurrence(self):
    return self.get("Occurrence")

  def setOccurrence(self, value):
    return self.set("Occurrence", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set (or Modify) event to change GPS CNAV-2 message bits. If you send this command without setting the ID
# parameter, or if you set the ID with a value never used before, a new Modification event will be
# created. If you reuse the same event ID, it will modify the existing event.
# 
# Note that start and stop time are automatically extended to beginning and ending of overlapped
# messages.
# 
# The Condition parameter is optional and allows you to add content matching condition before applying
# bit modifications.
# 
# BitModifications can be an empty string. The Modification will have no effect until you modify it with at
# least one bits mod.
# 
# A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
# index (1 refers to the first transmitted bit) and Bits is a modification mask where each
# character describes a modification to a single bit. The allowed characters are:
#    0 : force bit to 0
#    1 : force bit to 1
#    - : leave bit unchanged
#    X : revert bit (0 becomes 1 and 1 becomes 0)
# 
# For example: "24:X---10XX" will: revert bits 24, 30 and 31
#                  set bit 28 to 1
#                  set bit 29 to 0
# The other bits are not affected.
# 
# You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
#
# Name             Type         Description
# ---------------- ------------ ------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "L1C" (empty for all)
# SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Page             int          CNAV-2 page (use 0 to apply modification to all pages)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class SetMessageModificationToGpsCNav2(CommandBase):

  def __init__(self, signalArray, svId, startTime, stopTime, page, condition, updateCRC, bitModifications, id):
    CommandBase.__init__(self, "SetMessageModificationToGpsCNav2")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setPage(page)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def page(self):
    return self.get("Page")

  def setPage(self, value):
    return self.set("Page", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get infos about the GPS CNAV-2 message modification with this ID.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Unique identifier of the event
#

class GetMessageModificationToGpsCNav2(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetMessageModificationToGpsCNav2")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetMessageModificationToGpsCNav2.
#
# Name             Type         Description
# ---------------- ------------ ------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "L1C" (empty for all)
# SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Page             int          CNAV-2 page (use 0 to apply modification to all pages)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class GetMessageModificationToGpsCNav2Result(CommandResult):

  def __init__(self, signalArray, svId, startTime, stopTime, page, condition, updateCRC, bitModifications, id):
    CommandResult.__init__(self, "GetMessageModificationToGpsCNav2Result")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setPage(page)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def isSuccess(self):
    return True

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def page(self):
    return self.get("Page")

  def setPage(self, value):
    return self.set("Page", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set (or Modify) event to change GPS LNAV message bits.
# 
# Note that start and stop time are automatically extended to beginning and ending of overlapped
# subframes. The Modification parameter is a string where the first character applies to the first
# bit of subframe word and last character applies to last bit of subframe word.
#    '0' will force bit to zero
#    '1' will for bit to one
#    'X' will negate bit value
#    any other byte value will have no effect
# 
# Example: "-00------------------1-X------" will force bits 1 and 2 to zero and bit 22 to one
#                       and negate bit 24
# 
# Note: if UpdateParity is true, any modification to bits 25..30 will have no effect.
# 
# The ID parameter is automatically updated with a unique ID by the simulator for future reference.
# If the ID is set with a value other than an empty string, the simulator will try to find a match
# with previously added events. If there is a match, the event is updated with this message
# instead of adding a new event. If there is no match, the event is added and the ID is not
# changed.
#
# Name             Type         Description
# ---------------- ------------ ------------------------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "L1CA", "L1P" and "L2P" (empty for all)
# SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes)
# Page             int          Page 1..25 (use 0 to apply modification to all pages)
# Word             int          Word 1..10 (use 0 to apply modification to all words)
# UpdateParity     bool         Recalculate parity after making modification
# WordModification string       Modification string must be 30 bits long
# Id               string       Unique identifier of the event
#

class SetMessageModificationToGpsLNav(CommandBase):

  def __init__(self, signalArray, svId, startTime, stopTime, subframe, page, word, updateParity, wordModification, id):
    CommandBase.__init__(self, "SetMessageModificationToGpsLNav")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setSubframe(subframe)
    self.setPage(page)
    self.setWord(word)
    self.setUpdateParity(updateParity)
    self.setWordModification(wordModification)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def subframe(self):
    return self.get("Subframe")

  def setSubframe(self, value):
    return self.set("Subframe", value)

  def page(self):
    return self.get("Page")

  def setPage(self, value):
    return self.set("Page", value)

  def word(self):
    return self.get("Word")

  def setWord(self, value):
    return self.set("Word", value)

  def updateParity(self):
    return self.get("UpdateParity")

  def setUpdateParity(self, value):
    return self.set("UpdateParity", value)

  def wordModification(self):
    return self.get("WordModification")

  def setWordModification(self, value):
    return self.set("WordModification", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get infos about the GPS LNAV message modification with this ID.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Unique identifier of the event
#

class GetMessageModificationToGpsLNav(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetMessageModificationToGpsLNav")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetMessageModificationToGpsLNav.
#
# Name             Type         Description
# ---------------- ------------ ------------------------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "L1CA", "L1P" and "L2P" (empty for all)
# SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes)
# Page             int          Page 1..25 (use 0 to apply modification to all pages)
# Word             int          Word 1..10 (use 0 to apply modification to all words)
# UpdateParity     bool         Recalculate parity after making modification
# WordModification string       Modification string must be 30 bits long
# Id               string       Unique identifier of the event
#

class GetMessageModificationToGpsLNavResult(CommandResult):

  def __init__(self, signalArray, svId, startTime, stopTime, subframe, page, word, updateParity, wordModification, id):
    CommandResult.__init__(self, "GetMessageModificationToGpsLNavResult")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setSubframe(subframe)
    self.setPage(page)
    self.setWord(word)
    self.setUpdateParity(updateParity)
    self.setWordModification(wordModification)
    self.setId(id)

  def isSuccess(self):
    return True

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def subframe(self):
    return self.get("Subframe")

  def setSubframe(self, value):
    return self.set("Subframe", value)

  def page(self):
    return self.get("Page")

  def setPage(self, value):
    return self.set("Page", value)

  def word(self):
    return self.get("Word")

  def setWord(self, value):
    return self.set("Word", value)

  def updateParity(self):
    return self.get("UpdateParity")

  def setUpdateParity(self, value):
    return self.set("UpdateParity", value)

  def wordModification(self):
    return self.get("WordModification")

  def setWordModification(self, value):
    return self.set("WordModification", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set (or Modify) event to change Galileo C/NAV message bits. If you send this command without setting the ID
# parameter, or if you set the ID with a value never used before, a new Modification event will be
# created. If you reuse the same event ID, it will modify the existing event.
# 
# Note that start and stop time are automatically extended to beginning and ending of overlapped
# messages.
# 
# BitModifications can be an empty string. The Modification will have no effect until you modify it with at
# least one bits mod.
# 
# A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
# index (1 refers to the first transmitted bit) and Bits is a modification mask where each
# character describes a modification to a single bit. The allowed characters are:
#    0 : force bit to 0
#    1 : force bit to 1
#    - : leave bit unchanged
#    X : revert bit (0 becomes 1 and 1 becomes 0)
# 
# For example: "24:X---10XX" will: revert bits 24, 30 and 31
#                  set bit 28 to 1
#                  set bit 29 to 0
# The other bits are not affected.
# 
# You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
#
# Name             Type         Description
# ---------------- ------------ -------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "E6BC" (empty for all)
# SvId             int          The satellite's SV ID 1..36 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class SetMessageModificationToGalileoCNav(CommandBase):

  def __init__(self, signalArray, svId, startTime, stopTime, updateCRC, bitModifications, id):
    CommandBase.__init__(self, "SetMessageModificationToGalileoCNav")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get infos about the Galileo C/NAV message modification with this ID.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Unique identifier of the event
#

class GetMessageModificationToGalileoCNav(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetMessageModificationToGalileoCNav")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetMessageModificationToGalileoCNav.
#
# Name             Type         Description
# ---------------- ------------ -------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "E6BC" (empty for all)
# SvId             int          The satellite's SV ID 1..36 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class GetMessageModificationToGalileoCNavResult(CommandResult):

  def __init__(self, signalArray, svId, startTime, stopTime, updateCRC, bitModifications, id):
    CommandResult.__init__(self, "GetMessageModificationToGalileoCNavResult")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def isSuccess(self):
    return True

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set (or Modify) event to change Galileo F/NAV message bits. If you send this command without setting the ID
# parameter, or if you set the ID with a value never used before, a new Modification event will be
# created. If you reuse the same event ID, it will modify the existing event.
# 
# Note that start and stop time are automatically extended to beginning and ending of overlapped
# messages.
# 
# BitModifications can be an empty string. The Modification will have no effect until you modify it with at
# least one bits mod.
# 
# A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
# index (1 refers to the first transmitted bit) and Bits is a modification mask where each
# character describes a modification to a single bit. The allowed characters are:
#    0 : force bit to 0
#    1 : force bit to 1
#    - : leave bit unchanged
#    X : revert bit (0 becomes 1 and 1 becomes 0)
# 
# For example: "24:X---10XX" will: revert bits 24, 30 and 31
#                  set bit 28 to 1
#                  set bit 29 to 0
# The other bits are not affected.
# 
# You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
#
# Name             Type         Description
# ---------------- ------------ ------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "E5a" (empty for all)
# SvId             int          The satellite's SV ID 1..36 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Subframe         int          Subframe 1..12 (use 0 to apply modification to all subframes)
# Page             int          Page 1..5 (use 0 to apply modification to all pages)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class SetMessageModificationToGalileoFNav(CommandBase):

  def __init__(self, signalArray, svId, startTime, stopTime, subframe, page, condition, updateCRC, bitModifications, id):
    CommandBase.__init__(self, "SetMessageModificationToGalileoFNav")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setSubframe(subframe)
    self.setPage(page)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def subframe(self):
    return self.get("Subframe")

  def setSubframe(self, value):
    return self.set("Subframe", value)

  def page(self):
    return self.get("Page")

  def setPage(self, value):
    return self.set("Page", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get infos about the Galileo F/NAV message modification with this ID.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Unique identifier of the event
#

class GetMessageModificationToGalileoFNav(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetMessageModificationToGalileoFNav")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetMessageModificationToGalileoFNav.
#
# Name             Type         Description
# ---------------- ------------ ------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "E5a" (empty for all)
# SvId             int          The satellite's SV ID 1..36 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Subframe         int          Subframe 1..12 (use 0 to apply modification to all subframes)
# Page             int          Page 1..5 (use 0 to apply modification to all pages)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class GetMessageModificationToGalileoFNavResult(CommandResult):

  def __init__(self, signalArray, svId, startTime, stopTime, subframe, page, condition, updateCRC, bitModifications, id):
    CommandResult.__init__(self, "GetMessageModificationToGalileoFNavResult")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setSubframe(subframe)
    self.setPage(page)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def isSuccess(self):
    return True

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def subframe(self):
    return self.get("Subframe")

  def setSubframe(self, value):
    return self.set("Subframe", value)

  def page(self):
    return self.get("Page")

  def setPage(self, value):
    return self.set("Page", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set (or Modify) event to change Galileo I/NAV message bits. If you send this command without setting the ID
# parameter, or if you set the ID with a value never used before, a new Modification event will be
# created. If you reuse the same event ID, it will modify the existing event.
# 
# Note that start and stop time are automatically extended to beginning and ending of overlapped
# messages.
# 
# BitModifications can be an empty string. The Modification will have no effect until you modify it with at
# least one bits mod.
# 
# A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
# index (1 refers to the first transmitted bit) and Bits is a modification mask where each
# character describes a modification to a single bit. The allowed characters are:
#    0 : force bit to 0
#    1 : force bit to 1
#    - : leave bit unchanged
#    X : revert bit (0 becomes 1 and 1 becomes 0)
# 
# For example: "24:X---10XX" will: revert bits 24, 30 and 31
#                  set bit 28 to 1
#                  set bit 29 to 0
# The other bits are not affected.
# 
# You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
#
# Name             Type         Description
# ---------------- ------------ ---------------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "E1" and "E5b" (empty for all)
# SvId             int          The satellite's SV ID 1..36 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Subframe         int          Subframe 1..24 (use 0 to apply modification to all subframes)
# Page             int          Page 1..15 (use 0 to apply modification to all pages)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class SetMessageModificationToGalileoINav(CommandBase):

  def __init__(self, signalArray, svId, startTime, stopTime, subframe, page, condition, updateCRC, bitModifications, id):
    CommandBase.__init__(self, "SetMessageModificationToGalileoINav")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setSubframe(subframe)
    self.setPage(page)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def subframe(self):
    return self.get("Subframe")

  def setSubframe(self, value):
    return self.set("Subframe", value)

  def page(self):
    return self.get("Page")

  def setPage(self, value):
    return self.set("Page", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get infos about the Galileo I/NAV message modification with this ID.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Unique identifier of the event
#

class GetMessageModificationToGalileoINav(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetMessageModificationToGalileoINav")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetMessageModificationToGalileoINav.
#
# Name             Type         Description
# ---------------- ------------ ---------------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "E1" and "E5b" (empty for all)
# SvId             int          The satellite's SV ID 1..36 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Subframe         int          Subframe 1..24 (use 0 to apply modification to all subframes)
# Page             int          Page 1..15 (use 0 to apply modification to all pages)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class GetMessageModificationToGalileoINavResult(CommandResult):

  def __init__(self, signalArray, svId, startTime, stopTime, subframe, page, condition, updateCRC, bitModifications, id):
    CommandResult.__init__(self, "GetMessageModificationToGalileoINavResult")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setSubframe(subframe)
    self.setPage(page)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def isSuccess(self):
    return True

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def subframe(self):
    return self.get("Subframe")

  def setSubframe(self, value):
    return self.set("Subframe", value)

  def page(self):
    return self.get("Page")

  def setPage(self, value):
    return self.set("Page", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set (or Modify) event to change GLONASS NAV message bits.
# 
# Note that start and stop time are automatically extended to beginning and ending of overlapped
# message strings. The Modification parameter is a string where the first character applies to bit
# 85 of frame string and last character applies to Hamming Code bit 1.
#    '0' will force bit to zero
#    '1' will for bit to one
#    'X' will negate bit value
#    ' ' white space are ignored (use them to separate the string into bytes to help reading)
#    '-' or any other byte value will have no effect
# 
# Example:
# 
# "-0--- 1------- -------- -------- -------- -------- -------- -------- -------- -------- ---1--X-"
#   |  |                                           |  |
#   |  +- Force bit 80 to '1'               Force Hamming code bit 5 to '1' -+  |
#   |                                               |
#   +------ Force bit 84 to 0                   Negate Hamming code bit 2 ----+
# 
# Note: if UpdateHammingCode is true, any modification to bits 1..8 will have no effect.
# 
# The ID parameter is automatically updated with a unique ID by the simulator for future reference.
# If the ID is set with a value other than an empty string, the simulator will try to find a match
# with previously added events. If there is a match, the event is updated with this message
# instead of adding a new event. If there is no match, the event is added and the ID is not
# changed.
#
# Name               Type         Description
# ------------------ ------------ --------------------------------------------------------------------------------------------
# SignalArray        array string Array of signals to apply the message modification to, accepts "G1" and "G2" (empty for all)
# SvId               int          The satellite's SV ID number 1..24 (use 0 to apply modification to all SVs)
# StartTime          int          Elapsed time in seconds since start of simulation
# StopTime           int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Frame              int          Frame 1..5 (use 0 to apply modification to all frames)
# StringNumber       int          String 1..15 (use 0 to apply modification to all strings)
# UpdateHammingCode  bool         Recalculate Hamming Code after making modification
# StringModification string       Modification string must be 85 bits long (or more if using white spaces)
# Id                 string       Unique identifier of the event
#

class SetMessageModificationToGlonassNav(CommandBase):

  def __init__(self, signalArray, svId, startTime, stopTime, frame, stringNumber, updateHammingCode, stringModification, id):
    CommandBase.__init__(self, "SetMessageModificationToGlonassNav")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setFrame(frame)
    self.setStringNumber(stringNumber)
    self.setUpdateHammingCode(updateHammingCode)
    self.setStringModification(stringModification)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def frame(self):
    return self.get("Frame")

  def setFrame(self, value):
    return self.set("Frame", value)

  def stringNumber(self):
    return self.get("StringNumber")

  def setStringNumber(self, value):
    return self.set("StringNumber", value)

  def updateHammingCode(self):
    return self.get("UpdateHammingCode")

  def setUpdateHammingCode(self, value):
    return self.set("UpdateHammingCode", value)

  def stringModification(self):
    return self.get("StringModification")

  def setStringModification(self, value):
    return self.set("StringModification", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get infos about the GLONASS NAV message modification with this ID.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Unique identifier of the event
#

class GetMessageModificationToGlonassNav(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetMessageModificationToGlonassNav")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetMessageModificationToGlonassNav.
#
# Name               Type         Description
# ------------------ ------------ --------------------------------------------------------------------------------------------
# SignalArray        array string Array of signals to apply the message modification to, accepts "G1" and "G2" (empty for all)
# SvId               int          The satellite's SV ID number 1..24 (use 0 to apply modification to all SVs)
# StartTime          int          Elapsed time in seconds since start of simulation
# StopTime           int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Frame              int          Frame 1..5 (use 0 to apply modification to all frames)
# StringNumber       int          String 1..15 (use 0 to apply modification to all strings)
# UpdateHammingCode  bool         Recalculate Hamming Code after making modification
# StringModification string       Modification string must be 85 bits long (or more if using white spaces)
# Id                 string       Unique identifier of the event
#

class GetMessageModificationToGlonassNavResult(CommandResult):

  def __init__(self, signalArray, svId, startTime, stopTime, frame, stringNumber, updateHammingCode, stringModification, id):
    CommandResult.__init__(self, "GetMessageModificationToGlonassNavResult")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setFrame(frame)
    self.setStringNumber(stringNumber)
    self.setUpdateHammingCode(updateHammingCode)
    self.setStringModification(stringModification)
    self.setId(id)

  def isSuccess(self):
    return True

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def frame(self):
    return self.get("Frame")

  def setFrame(self, value):
    return self.set("Frame", value)

  def stringNumber(self):
    return self.get("StringNumber")

  def setStringNumber(self, value):
    return self.set("StringNumber", value)

  def updateHammingCode(self):
    return self.get("UpdateHammingCode")

  def setUpdateHammingCode(self, value):
    return self.set("UpdateHammingCode", value)

  def stringModification(self):
    return self.get("StringModification")

  def setStringModification(self, value):
    return self.set("StringModification", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set (or Modify) event to change BeiDou D1 NAV navigation message bits.
# 
# Note that start and stop time are automatically extended to beginning and ending of overlapped
# subframes. The Modification parameter is a string where the first character applies to the first
# bit of subframe word and last character applies to last bit of subframe word.
#    '0' will force bit to zero
#    '1' will for bit to one
#    'X' will negate bit value
#    any other byte value will have no effect
# 
# Example: "-00------------------1-X------" will force bits 1 and 2 to zero and bit 22 to one
#                       and negate bit 24
# 
# Note: if UpdateParity is true, any modification to parity bits will have no effect.
# 
# The ID parameter is automatically updated with a unique ID by the simulator for future reference.
# If the ID is set with a value other than an empty string, the simulator will try to find a match
# with previously added events. If there is a match, the event is updated with this message
# instead of adding a new event. If there is no match, the event is added and the ID is not
# changed.
#
# Name             Type         Description
# ---------------- ------------ ---------------------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "B1", "B2" and "B3I" (empty for all)
# SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes)
# Page             int          Page 1..24 (use 0 to apply modification to all pages)
# Word             int          Word 1..10 (use 0 to apply modification to all words)
# UpdateParity     bool         Recalculate parity after making modification
# WordModification string       Modification string must be 30 bits long
# Id               string       Unique identifier of the event
#

class SetMessageModificationToBeiDouD1Nav(CommandBase):

  def __init__(self, signalArray, svId, startTime, stopTime, subframe, page, word, updateParity, wordModification, id):
    CommandBase.__init__(self, "SetMessageModificationToBeiDouD1Nav")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setSubframe(subframe)
    self.setPage(page)
    self.setWord(word)
    self.setUpdateParity(updateParity)
    self.setWordModification(wordModification)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def subframe(self):
    return self.get("Subframe")

  def setSubframe(self, value):
    return self.set("Subframe", value)

  def page(self):
    return self.get("Page")

  def setPage(self, value):
    return self.set("Page", value)

  def word(self):
    return self.get("Word")

  def setWord(self, value):
    return self.set("Word", value)

  def updateParity(self):
    return self.get("UpdateParity")

  def setUpdateParity(self, value):
    return self.set("UpdateParity", value)

  def wordModification(self):
    return self.get("WordModification")

  def setWordModification(self, value):
    return self.set("WordModification", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get infos about the BeiDou D1 NAV message modification with this ID.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Unique identifier of the event
#

class GetMessageModificationToBeiDouD1Nav(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetMessageModificationToBeiDouD1Nav")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetMessageModificationToBeiDouD1Nav.
#
# Name             Type         Description
# ---------------- ------------ ---------------------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "B1", "B2" and "B3I" (empty for all)
# SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes)
# Page             int          Page 1..24 (use 0 to apply modification to all pages)
# Word             int          Word 1..10 (use 0 to apply modification to all words)
# UpdateParity     bool         Recalculate parity after making modification
# WordModification string       Modification string must be 30 bits long
# Id               string       Unique identifier of the event
#

class GetMessageModificationToBeiDouD1NavResult(CommandResult):

  def __init__(self, signalArray, svId, startTime, stopTime, subframe, page, word, updateParity, wordModification, id):
    CommandResult.__init__(self, "GetMessageModificationToBeiDouD1NavResult")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setSubframe(subframe)
    self.setPage(page)
    self.setWord(word)
    self.setUpdateParity(updateParity)
    self.setWordModification(wordModification)
    self.setId(id)

  def isSuccess(self):
    return True

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def subframe(self):
    return self.get("Subframe")

  def setSubframe(self, value):
    return self.set("Subframe", value)

  def page(self):
    return self.get("Page")

  def setPage(self, value):
    return self.set("Page", value)

  def word(self):
    return self.get("Word")

  def setWord(self, value):
    return self.set("Word", value)

  def updateParity(self):
    return self.get("UpdateParity")

  def setUpdateParity(self, value):
    return self.set("UpdateParity", value)

  def wordModification(self):
    return self.get("WordModification")

  def setWordModification(self, value):
    return self.set("WordModification", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set (or Modify) event to change BeiDou D2 NAV message bits.
# 
# Note that start and stop time are automatically extended to beginning and ending of overlapped
# subframes. The Modification parameter is a string where the first character applies to the first
# bit of subframe word and last character applies to last bit of subframe word.
#    '0' will force bit to zero
#    '1' will for bit to one
#    'X' will negate bit value
#    any other byte value will have no effect
# 
# Example: "-00------------------1-X------" will force bits 1 and 2 to zero and bit 22 to one
#                       and negate bit 24
# 
# Note: if UpdateParity is true, any modification to parity bits will have no effect.
# 
# The ID parameter is automatically updated with a unique ID by the simulator for future reference.
# If the ID is set with a value other than an empty string, the simulator will try to find a match
# with previously added events. If there is a match, the event is updated with this message
# instead of adding a new event. If there is no match, the event is added and the ID is not
# changed.
#
# Name             Type         Description
# ---------------- ------------ ---------------------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "B1", "B2" and "B3I" (empty for all)
# SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes)
# Page             int          Page 1..120 (use 0 to apply modification to all pages)
# Word             int          Word 1..10 (use 0 to apply modification to all words)
# UpdateParity     bool         Recalculate parity after making modification
# WordModification string       Modification string must be 30 bits long
# Id               string       Unique identifier of the event
#

class SetMessageModificationToBeiDouD2Nav(CommandBase):

  def __init__(self, signalArray, svId, startTime, stopTime, subframe, page, word, updateParity, wordModification, id):
    CommandBase.__init__(self, "SetMessageModificationToBeiDouD2Nav")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setSubframe(subframe)
    self.setPage(page)
    self.setWord(word)
    self.setUpdateParity(updateParity)
    self.setWordModification(wordModification)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def subframe(self):
    return self.get("Subframe")

  def setSubframe(self, value):
    return self.set("Subframe", value)

  def page(self):
    return self.get("Page")

  def setPage(self, value):
    return self.set("Page", value)

  def word(self):
    return self.get("Word")

  def setWord(self, value):
    return self.set("Word", value)

  def updateParity(self):
    return self.get("UpdateParity")

  def setUpdateParity(self, value):
    return self.set("UpdateParity", value)

  def wordModification(self):
    return self.get("WordModification")

  def setWordModification(self, value):
    return self.set("WordModification", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get infos about the BeiDou D2 NAV message modification with this ID.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Unique identifier of the event
#

class GetMessageModificationToBeiDouD2Nav(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetMessageModificationToBeiDouD2Nav")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetMessageModificationToBeiDouD2Nav.
#
# Name             Type         Description
# ---------------- ------------ ---------------------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "B1", "B2" and "B3I" (empty for all)
# SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes)
# Page             int          Page 1..120 (use 0 to apply modification to all pages)
# Word             int          Word 1..10 (use 0 to apply modification to all words)
# UpdateParity     bool         Recalculate parity after making modification
# WordModification string       Modification string must be 30 bits long
# Id               string       Unique identifier of the event
#

class GetMessageModificationToBeiDouD2NavResult(CommandResult):

  def __init__(self, signalArray, svId, startTime, stopTime, subframe, page, word, updateParity, wordModification, id):
    CommandResult.__init__(self, "GetMessageModificationToBeiDouD2NavResult")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setSubframe(subframe)
    self.setPage(page)
    self.setWord(word)
    self.setUpdateParity(updateParity)
    self.setWordModification(wordModification)
    self.setId(id)

  def isSuccess(self):
    return True

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def subframe(self):
    return self.get("Subframe")

  def setSubframe(self, value):
    return self.set("Subframe", value)

  def page(self):
    return self.get("Page")

  def setPage(self, value):
    return self.set("Page", value)

  def word(self):
    return self.get("Word")

  def setWord(self, value):
    return self.set("Word", value)

  def updateParity(self):
    return self.get("UpdateParity")

  def setUpdateParity(self, value):
    return self.set("UpdateParity", value)

  def wordModification(self):
    return self.get("WordModification")

  def setWordModification(self, value):
    return self.set("WordModification", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set (or Modify) event to change BeiDou CNAV1 message bits. If you send this command without setting the ID
# parameter, or if you set the ID with a value never used before, a new Modification event will be
# created. If you reuse the same event ID, it will modify the existing event.
# 
# Note that start and stop time are automatically extended to beginning and ending of overlapped
# messages.
# 
# The Condition parameter is optional and allows you to add content matching condition before applying
# bit modifications.
# 
# BitModifications can be an empty string. The Modification will have no effect until you modify it with at
# least one bits mod.
# 
# A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
# index (1 refers to the first transmitted bit) and Bits is a modification mask where each
# character describes a modification to a single bit. The allowed characters are:
#    0 : force bit to 0
#    1 : force bit to 1
#    - : leave bit unchanged
#    X : revert bit (0 becomes 1 and 1 becomes 0)
# 
# For example: "24:X---10XX" will: revert bits 24, 30 and 31
#                  set bit 28 to 1
#                  set bit 29 to 0
# The other bits are not affected.
# 
# You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
#
# Name             Type         Description
# ---------------- ------------ ------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "B1C" (empty for all)
# SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Page             int          CNAV1 page (use 0 to apply modification to all pages)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class SetMessageModificationToBeiDouCNav1(CommandBase):

  def __init__(self, signalArray, svId, startTime, stopTime, page, condition, updateCRC, bitModifications, id):
    CommandBase.__init__(self, "SetMessageModificationToBeiDouCNav1")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setPage(page)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def page(self):
    return self.get("Page")

  def setPage(self, value):
    return self.set("Page", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get infos about the BeiDou CNAV1 message modification with this ID.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Unique identifier of the event
#

class GetMessageModificationToBeiDouCNav1(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetMessageModificationToBeiDouCNav1")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetMessageModificationToBeiDouCNav1.
#
# Name             Type         Description
# ---------------- ------------ ------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "B1C" (empty for all)
# SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Page             int          CNAV1 page (use 0 to apply modification to all pages)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class GetMessageModificationToBeiDouCNav1Result(CommandResult):

  def __init__(self, signalArray, svId, startTime, stopTime, page, condition, updateCRC, bitModifications, id):
    CommandResult.__init__(self, "GetMessageModificationToBeiDouCNav1Result")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setPage(page)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def isSuccess(self):
    return True

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def page(self):
    return self.get("Page")

  def setPage(self, value):
    return self.set("Page", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set (or Modify) event to change BeiDou CNAV2 message bits. If you send this command without setting the ID
# parameter, or if you set the ID with a value never used before, a new Modification event will be
# created. If you reuse the same event ID, it will modify the existing event.
# 
# Note that start and stop time are automatically extended to beginning and ending of overlapped
# messages.
# 
# The Condition parameter is optional and allows you to add content matching condition before applying
# bit modifications.
# 
# BitModifications can be an empty string. The Modification will have no effect until you modify it with at
# least one bits mod.
# 
# A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
# index (1 refers to the first transmitted bit) and Bits is a modification mask where each
# character describes a modification to a single bit. The allowed characters are:
#    0 : force bit to 0
#    1 : force bit to 1
#    - : leave bit unchanged
#    X : revert bit (0 becomes 1 and 1 becomes 0)
# 
# For example: "24:X---10XX" will: revert bits 24, 30 and 31
#                  set bit 28 to 1
#                  set bit 29 to 0
# The other bits are not affected.
# 
# You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
#
# Name             Type         Description
# ---------------- ------------ ------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "B2a" (empty for all)
# SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# MessageType      int          CNAV2 Message type (use 0 to apply modification to all message types)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class SetMessageModificationToBeiDouCNav2(CommandBase):

  def __init__(self, signalArray, svId, startTime, stopTime, messageType, condition, updateCRC, bitModifications, id):
    CommandBase.__init__(self, "SetMessageModificationToBeiDouCNav2")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setMessageType(messageType)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def messageType(self):
    return self.get("MessageType")

  def setMessageType(self, value):
    return self.set("MessageType", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get infos about the BeiDou CNAV2 message modification with this ID.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Unique identifier of the event
#

class GetMessageModificationToBeiDouCNav2(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetMessageModificationToBeiDouCNav2")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetMessageModificationToBeiDouCNav2.
#
# Name             Type         Description
# ---------------- ------------ ------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "B2a" (empty for all)
# SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# MessageType      int          CNAV2 Message type (use 0 to apply modification to all message types)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class GetMessageModificationToBeiDouCNav2Result(CommandResult):

  def __init__(self, signalArray, svId, startTime, stopTime, messageType, condition, updateCRC, bitModifications, id):
    CommandResult.__init__(self, "GetMessageModificationToBeiDouCNav2Result")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setMessageType(messageType)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def isSuccess(self):
    return True

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def messageType(self):
    return self.get("MessageType")

  def setMessageType(self, value):
    return self.set("MessageType", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set (or Modify) event to change QZSS LNAV message bits.
# 
# Note that start and stop time are automatically extended to beginning and ending of overlapped
# subframes. The Modification parameter is a string where the first character applies to the first
# bit of subframe word and last character applies to last bit of subframe word.
#    '0' will force bit to zero
#    '1' will for bit to one
#    'X' will negate bit value
#    any other byte value will have no effect
# 
# Example: "-00------------------1-X------" will force bits 1 and 2 to zero and bit 22 to one
#                       and negate bit 24
# 
# Note: if UpdateParity is true, any modification to bits 25..30 will have no effect.
# 
# The ID parameter is automatically updated with a unique ID by the simulator for future reference.
# If the ID is set with a value other than an empty string, the simulator will try to find a match
# with previously added events. If there is a match, the event is updated with this message
# instead of adding a new event. If there is no match, the event is added and the ID is not
# changed.
#
# Name             Type         Description
# ---------------- ------------ --------------------------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL1CA" and "QZSSL1CB" (empty for all)
# SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes
# LNavSvId         int          LNAV SV ID in subframe 4 and 5 (use 0 to apply modification to all LNAV SV ID)
# Word             int          Word 1..10 (use 0 to apply modification to all words)
# UpdateParity     bool         Recalculate parity after making modification
# WordModification string       Modification string must be 30 bits long
# Id               string       Unique identifier of the event
#

class SetMessageModificationToQzssLNav(CommandBase):

  def __init__(self, signalArray, svId, startTime, stopTime, subframe, lNavSvId, word, updateParity, wordModification, id):
    CommandBase.__init__(self, "SetMessageModificationToQzssLNav")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setSubframe(subframe)
    self.setLNavSvId(lNavSvId)
    self.setWord(word)
    self.setUpdateParity(updateParity)
    self.setWordModification(wordModification)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def subframe(self):
    return self.get("Subframe")

  def setSubframe(self, value):
    return self.set("Subframe", value)

  def lNavSvId(self):
    return self.get("LNavSvId")

  def setLNavSvId(self, value):
    return self.set("LNavSvId", value)

  def word(self):
    return self.get("Word")

  def setWord(self, value):
    return self.set("Word", value)

  def updateParity(self):
    return self.get("UpdateParity")

  def setUpdateParity(self, value):
    return self.set("UpdateParity", value)

  def wordModification(self):
    return self.get("WordModification")

  def setWordModification(self, value):
    return self.set("WordModification", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get infos about the QZSS LNAV message modification with this ID.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Unique identifier of the event
#

class GetMessageModificationToQzssLNav(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetMessageModificationToQzssLNav")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetMessageModificationToQzssLNav.
#
# Name             Type         Description
# ---------------- ------------ --------------------------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL1CA" and "QZSSL1CB" (empty for all)
# SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes
# LNavSvId         int          LNAV SV ID in subframe 4 and 5 (use 0 to apply modification to all LNAV SV ID)
# Word             int          Word 1..10 (use 0 to apply modification to all words)
# UpdateParity     bool         Recalculate parity after making modification
# WordModification string       Modification string must be 30 bits long
# Id               string       Unique identifier of the event
#

class GetMessageModificationToQzssLNavResult(CommandResult):

  def __init__(self, signalArray, svId, startTime, stopTime, subframe, lNavSvId, word, updateParity, wordModification, id):
    CommandResult.__init__(self, "GetMessageModificationToQzssLNavResult")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setSubframe(subframe)
    self.setLNavSvId(lNavSvId)
    self.setWord(word)
    self.setUpdateParity(updateParity)
    self.setWordModification(wordModification)
    self.setId(id)

  def isSuccess(self):
    return True

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def subframe(self):
    return self.get("Subframe")

  def setSubframe(self, value):
    return self.set("Subframe", value)

  def lNavSvId(self):
    return self.get("LNavSvId")

  def setLNavSvId(self, value):
    return self.set("LNavSvId", value)

  def word(self):
    return self.get("Word")

  def setWord(self, value):
    return self.set("Word", value)

  def updateParity(self):
    return self.get("UpdateParity")

  def setUpdateParity(self, value):
    return self.set("UpdateParity", value)

  def wordModification(self):
    return self.get("WordModification")

  def setWordModification(self, value):
    return self.set("WordModification", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set (or Modify) event to change QZSS SLAS message bits. If you send this command without setting the ID
# parameter, or if you set the ID with a value never used before, a new Modification event will be
# created. If you reuse the same event ID, it will modify the existing event.
# 
# Note that start and stop time are automatically extended to beginning and ending of overlapped
# messages.
# 
# The Condition parameter is optional and allows you to add content matching condition before applying
# bit modifications.
# 
# BitModifications can be an empty string. The Modification will have no effect until you modify it with at
# least one bits mod.
# 
# A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
# index (1 refers to the first transmitted bit) and Bits is a modification mask where each
# character describes a modification to a single bit. The allowed characters are:
#    0 : force bit to 0
#    1 : force bit to 1
#    - : leave bit unchanged
#    X : revert bit (0 becomes 1 and 1 becomes 0)
# 
# For example: "24:X---10XX" will: revert bits 24, 30 and 31
#                  set bit 28 to 1
#                  set bit 29 to 0
# The other bits are not affected.
# 
# You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
#
# Name             Type         Description
# ---------------- ------------ ----------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL1S" (empty for all)
# SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# MessageType      int          SLAS Message type (use -1 to apply modification to all message types)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class SetMessageModificationToQzssSlas(CommandBase):

  def __init__(self, signalArray, svId, startTime, stopTime, messageType, condition, updateCRC, bitModifications, id):
    CommandBase.__init__(self, "SetMessageModificationToQzssSlas")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setMessageType(messageType)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def messageType(self):
    return self.get("MessageType")

  def setMessageType(self, value):
    return self.set("MessageType", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get infos about the QZSS SLAS message modification with this ID.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Unique identifier of the event
#

class GetMessageModificationToQzssSlas(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetMessageModificationToQzssSlas")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetMessageModificationToQzssSlas.
#
# Name             Type         Description
# ---------------- ------------ ----------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL1S" (empty for all)
# SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# MessageType      int          SLAS Message type (use -1 to apply modification to all message types)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class GetMessageModificationToQzssSlasResult(CommandResult):

  def __init__(self, signalArray, svId, startTime, stopTime, messageType, condition, updateCRC, bitModifications, id):
    CommandResult.__init__(self, "GetMessageModificationToQzssSlasResult")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setMessageType(messageType)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def isSuccess(self):
    return True

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def messageType(self):
    return self.get("MessageType")

  def setMessageType(self, value):
    return self.set("MessageType", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set (or Modify) event to change QZSS CNAV message bits. If you send this command without setting the ID
# parameter, or if you set the ID with a value never used before, a new Modification event will be
# created. If you reuse the same event ID, it will modify the existing event.
# 
# Note that start and stop time are automatically extended to beginning and ending of overlapped
# messages.
# 
# The Condition parameter is optional and allows you to add content matching condition before applying
# bit modifications.
# 
# BitModifications can be an empty string. The Modification will have no effect until you modify it with at
# least one bits mod.
# 
# A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
# index (1 refers to the first transmitted bit) and Bits is a modification mask where each
# character describes a modification to a single bit. The allowed characters are:
#    0 : force bit to 0
#    1 : force bit to 1
#    - : leave bit unchanged
#    X : revert bit (0 becomes 1 and 1 becomes 0)
# 
# For example: "24:X---10XX" will: revert bits 24, 30 and 31
#                  set bit 28 to 1
#                  set bit 29 to 0
# The other bits are not affected.
# 
# You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
#
# Name             Type         Description
# ---------------- ------------ -----------------------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL2C" and "QZSSL5" (empty for all)
# SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# MessageType      int          CNAV Message type (use -1 to apply modification to all message types)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class SetMessageModificationToQzssCNav(CommandBase):

  def __init__(self, signalArray, svId, startTime, stopTime, messageType, condition, updateCRC, bitModifications, id):
    CommandBase.__init__(self, "SetMessageModificationToQzssCNav")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setMessageType(messageType)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def messageType(self):
    return self.get("MessageType")

  def setMessageType(self, value):
    return self.set("MessageType", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get infos about the QZSS CNAV message modification with this ID.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Unique identifier of the event
#

class GetMessageModificationToQzssCNav(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetMessageModificationToQzssCNav")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetMessageModificationToQzssCNav.
#
# Name             Type         Description
# ---------------- ------------ -----------------------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL2C" and "QZSSL5" (empty for all)
# SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# MessageType      int          CNAV Message type (use -1 to apply modification to all message types)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class GetMessageModificationToQzssCNavResult(CommandResult):

  def __init__(self, signalArray, svId, startTime, stopTime, messageType, condition, updateCRC, bitModifications, id):
    CommandResult.__init__(self, "GetMessageModificationToQzssCNavResult")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setMessageType(messageType)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def isSuccess(self):
    return True

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def messageType(self):
    return self.get("MessageType")

  def setMessageType(self, value):
    return self.set("MessageType", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set (or Modify) event to change QZSS CNAV2 message bits. If you send this command without setting the ID
# parameter, or if you set the ID with a value never used before, a new Modification event will be
# created. If you reuse the same event ID, it will modify the existing event.
# 
# Note that start and stop time are automatically extended to beginning and ending of overlapped
# messages.
# 
# The Condition parameter is optional and allows you to add content matching condition before applying
# bit modifications.
# 
# BitModifications can be an empty string. The Modification will have no effect until you modify it with at
# least one bits mod.
# 
# A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
# index (1 refers to the first transmitted bit) and Bits is a modification mask where each
# character describes a modification to a single bit. The allowed characters are:
#    0 : force bit to 0
#    1 : force bit to 1
#    - : leave bit unchanged
#    X : revert bit (0 becomes 1 and 1 becomes 0)
# 
# For example: "24:X---10XX" will: revert bits 24, 30 and 31
#                  set bit 28 to 1
#                  set bit 29 to 0
# The other bits are not affected.
# 
# You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
#
# Name             Type         Description
# ---------------- ------------ ----------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL1C" (empty for all)
# SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Page             int          CNAV2 page (use -1 to apply modification to all pages)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class SetMessageModificationToQzssCNav2(CommandBase):

  def __init__(self, signalArray, svId, startTime, stopTime, page, condition, updateCRC, bitModifications, id):
    CommandBase.__init__(self, "SetMessageModificationToQzssCNav2")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setPage(page)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def page(self):
    return self.get("Page")

  def setPage(self, value):
    return self.set("Page", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get infos about the QZSS CNAV2 message modification with this ID.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Unique identifier of the event
#

class GetMessageModificationToQzssCNav2(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetMessageModificationToQzssCNav2")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetMessageModificationToQzssCNav2.
#
# Name             Type         Description
# ---------------- ------------ ----------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL1C" (empty for all)
# SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Page             int          CNAV2 page (use -1 to apply modification to all pages)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class GetMessageModificationToQzssCNav2Result(CommandResult):

  def __init__(self, signalArray, svId, startTime, stopTime, page, condition, updateCRC, bitModifications, id):
    CommandResult.__init__(self, "GetMessageModificationToQzssCNav2Result")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setPage(page)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def isSuccess(self):
    return True

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def page(self):
    return self.get("Page")

  def setPage(self, value):
    return self.set("Page", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set (or Modify) event to change NavIC NAV message bits. If you send this command without setting the ID
# parameter, or if you set the ID with a value never used before, a new Modification event will be
# created. If you reuse the same event ID, it will modify the existing event.
# 
# Note that start and stop time are automatically extended to beginning and ending of overlapped
# messages.
# 
# The Condition parameter is optional and allows you to add content matching condition before applying
# bit modifications.
# 
# BitModifications can be an empty string. The Modification will have no effect until you modify it with at
# least one bits mod.
# 
# A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
# index (1 refers to the first transmitted bit) and Bits is a modification mask where each
# character describes a modification to a single bit. The allowed characters are:
#    0 : force bit to 0
#    1 : force bit to 1
#    - : leave bit unchanged
#    X : revert bit (0 becomes 1 and 1 becomes 0)
# 
# For example: "24:X---10XX" will: revert bits 24, 30 and 31
#                  set bit 28 to 1
#                  set bit 29 to 0
# The other bits are not affected.
# 
# You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
#
# Name             Type         Description
# ---------------- ------------ ----------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "NAVICL5" (empty for all)
# SvId             int          The satellite's SV ID 1..14 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Subframe         int          Subframe 1..4 (use 0 to apply modification to all subframes)
# MessageType      int          NAV Message type (use -1 to apply modification to all message types)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class SetMessageModificationToNavICNav(CommandBase):

  def __init__(self, signalArray, svId, startTime, stopTime, subframe, messageType, condition, updateCRC, bitModifications, id):
    CommandBase.__init__(self, "SetMessageModificationToNavICNav")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setSubframe(subframe)
    self.setMessageType(messageType)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def subframe(self):
    return self.get("Subframe")

  def setSubframe(self, value):
    return self.set("Subframe", value)

  def messageType(self):
    return self.get("MessageType")

  def setMessageType(self, value):
    return self.set("MessageType", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get infos about the NavIC NAV message modification with this ID.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Unique identifier of the event
#

class GetMessageModificationToNavICNav(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetMessageModificationToNavICNav")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetMessageModificationToNavICNav.
#
# Name             Type         Description
# ---------------- ------------ ----------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "NAVICL5" (empty for all)
# SvId             int          The satellite's SV ID 1..14 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# Subframe         int          Subframe 1..4 (use 0 to apply modification to all subframes)
# MessageType      int          NAV Message type (use -1 to apply modification to all message types)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class GetMessageModificationToNavICNavResult(CommandResult):

  def __init__(self, signalArray, svId, startTime, stopTime, subframe, messageType, condition, updateCRC, bitModifications, id):
    CommandResult.__init__(self, "GetMessageModificationToNavICNavResult")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setSubframe(subframe)
    self.setMessageType(messageType)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def isSuccess(self):
    return True

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def subframe(self):
    return self.get("Subframe")

  def setSubframe(self, value):
    return self.set("Subframe", value)

  def messageType(self):
    return self.get("MessageType")

  def setMessageType(self, value):
    return self.set("MessageType", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set (or Modify) event to change SBAS NAV message bits. If you send this command without setting the ID
# parameter, or if you set the ID with a value never used before, a new Modification event will be
# created. If you reuse the same event ID, it will modify the existing event.
# 
# Note that start and stop time are automatically extended to beginning and ending of overlapped
# messages.
# 
# The Condition parameter is optional and allows you to add content matching condition before applying
# bit modifications.
# 
# BitModifications can be an empty string. The Modification will have no effect until you modify it with at
# least one bits mod.
# 
# A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
# index (1 refers to the first transmitted bit) and Bits is a modification mask where each
# character describes a modification to a single bit. The allowed characters are:
#    0 : force bit to 0
#    1 : force bit to 1
#    - : leave bit unchanged
#    X : revert bit (0 becomes 1 and 1 becomes 0)
# 
# For example: "24:X---10XX" will: revert bits 24, 30 and 31
#                  set bit 28 to 1
#                  set bit 29 to 0
# The other bits are not affected.
# 
# You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
#
# Name             Type         Description
# ---------------- ------------ -----------------------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "SBASL1" and "SBASL5" (empty for all).
# SvId             int          The satellite's SV ID 1..39 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# MessageType      int          Message type (use -1 to apply modification to all message types)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class SetMessageModificationToSbasNav(CommandBase):

  def __init__(self, signalArray, svId, startTime, stopTime, messageType, condition, updateCRC, bitModifications, id):
    CommandBase.__init__(self, "SetMessageModificationToSbasNav")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setMessageType(messageType)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def messageType(self):
    return self.get("MessageType")

  def setMessageType(self, value):
    return self.set("MessageType", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get infos about the SBAS NAV message modification with this ID.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Unique identifier of the event
#

class GetMessageModificationToSbasNav(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetMessageModificationToSbasNav")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetMessageModificationToSbasNav.
#
# Name             Type         Description
# ---------------- ------------ -----------------------------------------------------------------------------------------------------
# SignalArray      array string Array of signals to apply the message modification to, accepts "SBASL1" and "SBASL5" (empty for all).
# SvId             int          The satellite's SV ID 1..39 (use 0 to apply modification to all SVs)
# StartTime        int          Elapsed time in seconds since start of simulation
# StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
# MessageType      int          Message type (use -1 to apply modification to all message types)
# Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
# UpdateCRC        bool         Recalculate CRC after making modification
# BitModifications string       Comma separated bit modifications
# Id               string       Unique identifier of the event
#

class GetMessageModificationToSbasNavResult(CommandResult):

  def __init__(self, signalArray, svId, startTime, stopTime, messageType, condition, updateCRC, bitModifications, id):
    CommandResult.__init__(self, "GetMessageModificationToSbasNavResult")
    self.setSignalArray(signalArray)
    self.setSvId(svId)
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setMessageType(messageType)
    self.setCondition(condition)
    self.setUpdateCRC(updateCRC)
    self.setBitModifications(bitModifications)
    self.setId(id)

  def isSuccess(self):
    return True

  def signalArray(self):
    return self.get("SignalArray")

  def setSignalArray(self, value):
    return self.set("SignalArray", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def messageType(self):
    return self.get("MessageType")

  def setMessageType(self, value):
    return self.set("MessageType", value)

  def condition(self):
    return self.get("Condition")

  def setCondition(self, value):
    return self.set("Condition", value)

  def updateCRC(self):
    return self.get("UpdateCRC")

  def setUpdateCRC(self, value):
    return self.set("UpdateCRC", value)

  def bitModifications(self):
    return self.get("BitModifications")

  def setBitModifications(self, value):
    return self.set("BitModifications", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Removes a message modification event for the navigation message family.
#
# Name         Type   Description
# ------------ ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# NavMsgFamily string Navigation message family key, accepted values : "GPS_LNAV", "GPS_CNAV", "GPS_CNAV2", "GPS_MNAV", "GLONASS_NAV", "GALILEO_FNAV", "GALILEO_INAV", "BEIDOU_D1_NAV", "BEIDOU_CNAV1", "BEIDOU_CNAV2", "QZSS_LNAV", "QZSS_SLAS", "NAVIC_NAV" and "SBAS_NAV"
# Id           string Unique identifier
#

class RemoveMessageModificationForNavMsgFamily(CommandBase):

  def __init__(self, navMsgFamily, id):
    CommandBase.__init__(self, "RemoveMessageModificationForNavMsgFamily")
    self.setNavMsgFamily(navMsgFamily)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def navMsgFamily(self):
    return self.get("NavMsgFamily")

  def setNavMsgFamily(self, value):
    return self.set("NavMsgFamily", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Clear all message modification events for this navigation message family.
#
# Name         Type   Description
# ------------ ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# NavMsgFamily string Navigation message family key, accepted values : "GPS_LNAV", "GPS_CNAV", "GPS_CNAV2", "GPS_MNAV", "GLONASS_NAV", "GALILEO_FNAV", "GALILEO_INAV", "BEIDOU_D1_NAV", "BEIDOU_CNAV1", "BEIDOU_CNAV2", "QZSS_LNAV", "QZSS_SLAS", "NAVIC_NAV" and "SBAS_NAV"
#

class ClearAllMessageModificationsForNavMsgFamily(CommandBase):

  def __init__(self, navMsgFamily):
    CommandBase.__init__(self, "ClearAllMessageModificationsForNavMsgFamily")
    self.setNavMsgFamily(navMsgFamily)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def navMsgFamily(self):
    return self.get("NavMsgFamily")

  def setNavMsgFamily(self, value):
    return self.set("NavMsgFamily", value)

#
# Get all the message modification event's IDs for this navigation message family and SV ID.
#
# Name         Type   Description
# ------------ ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# NavMsgFamily string Navigation message family key, accepted values : "GPS_LNAV", "GPS_CNAV", "GPS_CNAV2", "GPS_MNAV", "GLONASS_NAV", "GALILEO_FNAV", "GALILEO_INAV", "BEIDOU_D1_NAV", "BEIDOU_CNAV1", "BEIDOU_CNAV2", "QZSS_LNAV", "QZSS_SLAS", "NAVIC_NAV" and "SBAS_NAV"
# SvId         int    The satellite's SV ID
#

class GetAllMessageModificationIdsForNavMsgFamily(CommandBase):

  def __init__(self, navMsgFamily, svId):
    CommandBase.__init__(self, "GetAllMessageModificationIdsForNavMsgFamily")
    self.setNavMsgFamily(navMsgFamily)
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def navMsgFamily(self):
    return self.get("NavMsgFamily")

  def setNavMsgFamily(self, value):
    return self.set("NavMsgFamily", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Result of GetAllMessageModificationIdsForNavMsgFamily.
#
# Name Type         Description
# ---- ------------ -------------------------------------------------------------------------
# Ids  array string List of event IDs which will modify the navigation message for this SV ID
#

class GetAllMessageModificationIdsForNavMsgFamilyResult(CommandResult):

  def __init__(self, ids):
    CommandResult.__init__(self, "GetAllMessageModificationIdsForNavMsgFamilyResult")
    self.setIds(ids)

  def isSuccess(self):
    return True

  def ids(self):
    return self.get("Ids")

  def setIds(self, value):
    return self.set("Ids", value)

#
# Removes the signal for the message modification.
#
# Name   Type   Description
# ------ ------ --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Signal string Signal key, accepted values : "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B2a", "B1C", "B3I", "QZSSL1CA", "QZSSL1CB", "QZSSL1S", "NAVICL5", "SBASL1" and "SBASL5"
# Id     string Unique identifier
#

class RemoveMessageModificationForSignal(CommandBase):

  def __init__(self, signal, id):
    CommandBase.__init__(self, "RemoveMessageModificationForSignal")
    self.setSignal(signal)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Please note the command RemoveMessageModification is deprecated since 21.3. You may use RemoveMessageModificationForSignal.
# 
# Removes the signal for the message modification.
#
# Name   Type   Description
# ------ ------ --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Signal string Signal key, accepted values : "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B2a", "B1C", "B3I", "QZSSL1CA", "QZSSL1CB", "QZSSL1S", "NAVICL5", "SBASL1" and "SBASL5"
# Id     string Unique identifier
#

class RemoveMessageModification(CommandBase):

  def __init__(self, signal, id):
    CommandBase.__init__(self, "RemoveMessageModification")
    self.setSignal(signal)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Clear the signal for all message modifications.
#
# Name   Type   Description
# ------ ------ --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Signal string Signal key, accepted values : "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B2a", "B1C", "B3I", "QZSSL1CA", "QZSSL1CB", "QZSSL1S", "NAVICL5", "SBASL1" and "SBASL5"
#

class ClearAllMessageModificationsForSignal(CommandBase):

  def __init__(self, signal):
    CommandBase.__init__(self, "ClearAllMessageModificationsForSignal")
    self.setSignal(signal)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

#
# Please note the command ClearAllMessageModifications is deprecated since 21.3. You may use ClearAllMessageModificationsForSignal.
# 
# Clear the signal for all message modifications.
#
# Name   Type   Description
# ------ ------ --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Signal string Signal key, accepted values : "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B2a", "B1C", "B3I", "QZSSL1CA", "QZSSL1CB", "QZSSL1S", "NAVICL5", "SBASL1" and "SBASL5"
#

class ClearAllMessageModifications(CommandBase):

  def __init__(self, signal):
    CommandBase.__init__(self, "ClearAllMessageModifications")
    self.setSignal(signal)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

#
# Get all the message modification event's IDs for this signal and SV ID.
#
# Name   Type   Description
# ------ ------ --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Signal string Signal key, accepted values : "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B2a", "B1C", "B3I", "QZSSL1CA", "QZSSL1CB", "QZSSL1S", "NAVICL5", "SBASL1" and "SBASL5"
# SvId   int    The satellite's SV ID
#

class GetAllMessageModificationIdsForSignal(CommandBase):

  def __init__(self, signal, svId):
    CommandBase.__init__(self, "GetAllMessageModificationIdsForSignal")
    self.setSignal(signal)
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Result of GetAllMessageModificationIdsForSignal.
#
# Name Type         Description
# ---- ------------ -------------------------------------------------------------------------
# Ids  array string List of event IDs which will modify the navigation message for this SV ID
#

class GetAllMessageModificationIdsForSignalResult(CommandResult):

  def __init__(self, ids):
    CommandResult.__init__(self, "GetAllMessageModificationIdsForSignalResult")
    self.setIds(ids)

  def isSuccess(self):
    return True

  def ids(self):
    return self.get("Ids")

  def setIds(self, value):
    return self.set("Ids", value)

#
# Add or update continuous wave interference.
#
# Name        Type   Description
# ----------- ------ -------------------------------------------------
# StartTime   int    Elapsed time in seconds since start of simulation
# StopTime    int    Elapsed time in seconds since start of simulation
# CentralFreq double Central frequency (Hz)
# Power       double Power (dB) relative to nominal power
# Enabled     bool   Interference enable or not
# Id          string Unique identifier automatically set by simulator
#

class SetInterferenceCW(CommandBase):

  def __init__(self, startTime, stopTime, centralFreq, power, enabled, id):
    CommandBase.__init__(self, "SetInterferenceCW")
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setCentralFreq(centralFreq)
    self.setPower(power)
    self.setEnabled(enabled)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def centralFreq(self):
    return self.get("CentralFreq")

  def setCentralFreq(self, value):
    return self.set("CentralFreq", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Add or update chirp signal interference.
#
# Name        Type   Description
# ----------- ------ -------------------------------------------------
# StartTime   int    Elapsed time in seconds since start of simulation
# StopTime    int    Elapsed time in seconds since start of simulation
# CentralFreq double Central frequency (Hz)
# Power       double Power (dB) relative to nominal power
# Bandwidth   double Bandwidth (Hz)
# SweepTime   double Sweep Time (us)
# Enabled     bool   Interference enable or not
# Id          string Unique identifier automatically set by simulator
#

class SetInterferenceChirp(CommandBase):

  def __init__(self, startTime, stopTime, centralFreq, power, bandwidth, sweepTime, enabled, id):
    CommandBase.__init__(self, "SetInterferenceChirp")
    self.setStartTime(startTime)
    self.setStopTime(stopTime)
    self.setCentralFreq(centralFreq)
    self.setPower(power)
    self.setBandwidth(bandwidth)
    self.setSweepTime(sweepTime)
    self.setEnabled(enabled)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def centralFreq(self):
    return self.get("CentralFreq")

  def setCentralFreq(self, value):
    return self.set("CentralFreq", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def bandwidth(self):
    return self.get("Bandwidth")

  def setBandwidth(self, value):
    return self.set("Bandwidth", value)

  def sweepTime(self):
    return self.get("SweepTime")

  def setSweepTime(self, value):
    return self.set("SweepTime", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Removes an interference. When adding an event, the simulator
# sets the Id parameter. Use that Id here to remove the associated interference.
#
# Name Type   Description
# ---- ------ ------------------------------------------------
# Id   string Unique identifier of the interference to remove.
#

class RemoveInterference(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "RemoveInterference")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Clear all interferences
#
#

class RemoveAllInterferences(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "RemoveAllInterferences")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Set PSR ramp event. This function lets user change the pseudorange of any satellite.
# If SV ID is set to 0, the change is applied to all satellites.
# 
#           Hold Start Time
#           |         Hold Stop Time
#           |         |
#           ...........
#          ..         ...
#         ..            ...
#   .......               .........> Time
#         |               |
#         Start Time      Stop Time
#
# Name          Type   Description
# ------------- ------ ----------------------------------------------------------------------------------
# System        string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId          int    The satellite's SV ID.
# Offset        double Change to satellite pseudorange in meter when ramp is at maximum. Range -1e7..+1e7
# StartTime     int    Elapsed time in seconds since start of simulation.
# HoldStartTime int    Elapsed time in seconds since start of simulation. HoldStartTime >= StartTime
# HoldStopTime  int    Elapsed time in seconds since start of simulation. HoldStopTime >= HoldStartTime
# StopTime      int    Elapsed time in seconds since start of simulation. StopTime >= HoldStopTime
# Id            string Unique identifier automatically set by simulator if empty string.
#                      The IDs pool is common between all system.
#

class SetPseudorangeRampForSV(CommandBase):

  def __init__(self, system, svId, offset, startTime, holdStartTime, holdStopTime, stopTime, id):
    CommandBase.__init__(self, "SetPseudorangeRampForSV")
    self.setSystem(system)
    self.setSvId(svId)
    self.setOffset(offset)
    self.setStartTime(startTime)
    self.setHoldStartTime(holdStartTime)
    self.setHoldStopTime(holdStopTime)
    self.setStopTime(stopTime)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def holdStartTime(self):
    return self.get("HoldStartTime")

  def setHoldStartTime(self, value):
    return self.set("HoldStartTime", value)

  def holdStopTime(self):
    return self.get("HoldStopTime")

  def setHoldStopTime(self, value):
    return self.set("HoldStopTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get PSR ramp event. This function lets user change the pseudorange of any satellite.
# If SV ID is set to 0, the change is applied to all satellites.
# 
#           Hold Start Time
#           |         Hold Stop Time
#           |         |
#           ...........
#          ..         ...
#         ..            ...
#   .......               .........> Time
#         |               |
#         Start Time      Stop Time
#
# Name Type   Description
# ---- ------ -----------------------------------------------------------------
# Id   string Unique identifier automatically set by simulator if empty string.
#             The IDs pool is common between all system.
#

class GetPseudorangeRampForSV(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetPseudorangeRampForSV")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetPseudorangeRampForSV.
#
# Name          Type   Description
# ------------- ------ ----------------------------------------------------------------------------------
# System        string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId          int    The satellite's SV ID.
# Offset        double Change to satellite pseudorange in meter when ramp is at maximum. Range -1e7..+1e7
# StartTime     int    Elapsed time in seconds since start of simulation.
# HoldStartTime int    Elapsed time in seconds since start of simulation. HoldStartTime >= StartTime
# HoldStopTime  int    Elapsed time in seconds since start of simulation. HoldStopTime >= HoldStartTime
# StopTime      int    Elapsed time in seconds since start of simulation. StopTime >= HoldStopTime
# Id            string Unique identifier automatically set by simulator if empty string.
#                      The IDs pool is common between all system.
#

class GetPseudorangeRampForSVResult(CommandResult):

  def __init__(self, system, svId, offset, startTime, holdStartTime, holdStopTime, stopTime, id):
    CommandResult.__init__(self, "GetPseudorangeRampForSVResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setOffset(offset)
    self.setStartTime(startTime)
    self.setHoldStartTime(holdStartTime)
    self.setHoldStopTime(holdStopTime)
    self.setStopTime(stopTime)
    self.setId(id)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

  def startTime(self):
    return self.get("StartTime")

  def setStartTime(self, value):
    return self.set("StartTime", value)

  def holdStartTime(self):
    return self.get("HoldStartTime")

  def setHoldStartTime(self, value):
    return self.set("HoldStartTime", value)

  def holdStopTime(self):
    return self.get("HoldStopTime")

  def setHoldStopTime(self, value):
    return self.set("HoldStopTime", value)

  def stopTime(self):
    return self.get("StopTime")

  def setStopTime(self, value):
    return self.set("StopTime", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get a list of all the pseudorange ramps IDs for a system's satellite.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId   int    The satellite's SV ID.
#

class GetAllPseudorangeRampForSV(CommandBase):

  def __init__(self, system, svId):
    CommandBase.__init__(self, "GetAllPseudorangeRampForSV")
    self.setSystem(system)
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Result of GetAllPseudorangeRampForSV.
#
# Name   Type         Description
# ------ ------------ ------------------------------------------------------------------
# System string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId   int          The satellite's SV ID.
# Ids    array string List of all the pseudorange ramps IDs for this system's satellite.
#

class GetAllPseudorangeRampForSVResult(CommandResult):

  def __init__(self, system, svId, ids):
    CommandResult.__init__(self, "GetAllPseudorangeRampForSVResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setIds(ids)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def ids(self):
    return self.get("Ids")

  def setIds(self, value):
    return self.set("Ids", value)

#
# Removes a PSR ramp events. When adding an event, the simulator
# sets the Id parameter. Use that Id here to remove the associated ramp.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Id     string Unique identifier of the PSR ramp to remove.
#

class RemovePseudorangeRamp(CommandBase):

  def __init__(self, system, id):
    CommandBase.__init__(self, "RemovePseudorangeRamp")
    self.setSystem(system)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Remove all PSR Ramps for the specified system's satellite.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId   int    The satellite's SV ID (use 0 for all SVs).
#

class RemoveAllPseudorangeRampForSV(CommandBase):

  def __init__(self, system, svId):
    CommandBase.__init__(self, "RemoveAllPseudorangeRampForSV")
    self.setSystem(system)
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Remove all PSR Ramps for all satellites of the specified system.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class RemoveAllPseudorangeRampForSystem(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "RemoveAllPseudorangeRampForSystem")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Please note the command RemoveAllPseudorangeRamp is deprecated since 21.3. You may use RemoveAllPseudorangeRampForSystem.
# 
# Remove all PSR Ramps for all satellites of the specified system.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class RemoveAllPseudorangeRamp(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "RemoveAllPseudorangeRamp")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Set next almanac upload time relative to simulation start time.
#
# Name   Type   Description
# ------ ------ -------------------------------------------------------------------------------------------
# System string Must be "GPS"
# Offset int    Next upload time in sec (relative to simulation start time). Accepted range is [30..259200]
#

class SetAlmanacInitialUploadTimeOffset(CommandBase):

  def __init__(self, system, offset):
    CommandBase.__init__(self, "SetAlmanacInitialUploadTimeOffset")
    self.setSystem(system)
    self.setOffset(offset)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Get next almanac upload time relative to simulation start time.
#
#

class GetAlmanacInitialUploadTimeOffset(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetAlmanacInitialUploadTimeOffset")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetAlmanacInitialUploadTimeOffset.
#
# Name   Type   Description
# ------ ------ -------------------------------------------------------------------------------------------
# System string Must be "GPS"
# Offset int    Next upload time in sec (relative to simulation start time). Accepted range is [30..259200]
#

class GetAlmanacInitialUploadTimeOffsetResult(CommandResult):

  def __init__(self, system, offset):
    CommandResult.__init__(self, "GetAlmanacInitialUploadTimeOffsetResult")
    self.setSystem(system)
    self.setOffset(offset)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Set almanac upload interval in seconds. After the initial upload set with command 
# SetAlmanacInitialUploadTimeOffset, the almanac will automatically update at each interval.
#
# Name     Type   Description
# -------- ------ ----------------------------------------------------------
# System   string Must be "GPS"
# Interval int    Interval duration in sec. Accepted range is [3600..259200]
#

class SetAlmanacUploadTimeInterval(CommandBase):

  def __init__(self, system, interval):
    CommandBase.__init__(self, "SetAlmanacUploadTimeInterval")
    self.setSystem(system)
    self.setInterval(interval)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def interval(self):
    return self.get("Interval")

  def setInterval(self, value):
    return self.set("Interval", value)

#
# Get almanac upload interval in seconds. After the initial upload set with command 
# SetAlmanacInitialUploadTimeOffset, the almanac will automatically update at each interval.
#
#

class GetAlmanacUploadTimeInterval(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetAlmanacUploadTimeInterval")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetAlmanacUploadTimeInterval.
#
# Name     Type   Description
# -------- ------ ----------------------------------------------------------
# System   string Must be "GPS"
# Interval int    Interval duration in sec. Accepted range is [3600..259200]
#

class GetAlmanacUploadTimeIntervalResult(CommandResult):

  def __init__(self, system, interval):
    CommandResult.__init__(self, "GetAlmanacUploadTimeIntervalResult")
    self.setSystem(system)
    self.setInterval(interval)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def interval(self):
    return self.get("Interval")

  def setInterval(self, value):
    return self.set("Interval", value)

#
# Add or update signal echo (multipath). Offsets (power loss, pseudorange, Doppler and carrier phase) are all relative to line-of-sight signal.
# If Id is not set, or unknown to Skydel, a new echo will be added. Otherwise, existing echo will be updated.
#
# Name         Type   Description
# ------------ ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Signal       string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
# SvId         int    The satellite's SV ID
# PowerLoss    double Power loss in dB (value must be positive)
# Pseudorange  double Pseudorange offset in meters (value must be positive)
# Doppler      double Doppler frequency offset in Hz
# CarrierPhase double Carrier phase offset in radians
# Echo         int    Echo number [1..4], or use zero to let Skydel assign an echo number.
# Id           string Unique identifier.
#

class SetMultipathForSV(CommandBase):

  def __init__(self, signal, svId, powerLoss, pseudorange, doppler, carrierPhase, echo, id):
    CommandBase.__init__(self, "SetMultipathForSV")
    self.setSignal(signal)
    self.setSvId(svId)
    self.setPowerLoss(powerLoss)
    self.setPseudorange(pseudorange)
    self.setDoppler(doppler)
    self.setCarrierPhase(carrierPhase)
    self.setEcho(echo)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def powerLoss(self):
    return self.get("PowerLoss")

  def setPowerLoss(self, value):
    return self.set("PowerLoss", value)

  def pseudorange(self):
    return self.get("Pseudorange")

  def setPseudorange(self, value):
    return self.set("Pseudorange", value)

  def doppler(self):
    return self.get("Doppler")

  def setDoppler(self, value):
    return self.set("Doppler", value)

  def carrierPhase(self):
    return self.get("CarrierPhase")

  def setCarrierPhase(self, value):
    return self.set("CarrierPhase", value)

  def echo(self):
    return self.get("Echo")

  def setEcho(self, value):
    return self.set("Echo", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Enable/Disable a multipath signal.
#
# Name    Type   Description
# ------- ------ ---------------------------------------------------------------
# Enabled bool   Enable (true) or disable (false) multipath.
# Id      string Unique identifier of the multipath signal to enable or disable.
#

class EnableMultipath(CommandBase):

  def __init__(self, enabled, id):
    CommandBase.__init__(self, "EnableMultipath")
    self.setEnabled(enabled)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Removes a multipath signal.
#
# Name Type   Description
# ---- ------ ----------------------------------------------------
# Id   string Unique identifier of the multipath signal to remove.
#

class RemoveMultipath(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "RemoveMultipath")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Disable all multipath in all satellites but only for the specified signal.
#
# Name   Type   Description
# ------ ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
# Reset  bool   Reset attributes (PSR offset, power loss, Doppler shift and carrier phase offset are set to zero)
#

class RemoveAllMultipathForSignal(CommandBase):

  def __init__(self, signal, reset):
    CommandBase.__init__(self, "RemoveAllMultipathForSignal")
    self.setSignal(signal)
    self.setReset(reset)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def reset(self):
    return self.get("Reset")

  def setReset(self, value):
    return self.set("Reset", value)

#
# Disable all multipath for the specified satellite.
#
# Name   Type   Description
# ------ ------ -------------------------------------------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId   int    The satellite's SV ID
# Reset  bool   Reset attributes (PSR offset, power loss, Doppler shift and carrier phase offset are set to zero)
#

class RemoveAllMultipathForSV(CommandBase):

  def __init__(self, system, svId, reset):
    CommandBase.__init__(self, "RemoveAllMultipathForSV")
    self.setSystem(system)
    self.setSvId(svId)
    self.setReset(reset)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def reset(self):
    return self.get("Reset")

  def setReset(self, value):
    return self.set("Reset", value)

#
# Disable all multipath for the specified constellation.
#
# Name   Type   Description
# ------ ------ -------------------------------------------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Reset  bool   Reset attributes (PSR offset, power loss, Doppler shift and carrier phase offset are set to zero)
#

class RemoveAllMultipathForSystem(CommandBase):

  def __init__(self, system, reset):
    CommandBase.__init__(self, "RemoveAllMultipathForSystem")
    self.setSystem(system)
    self.setReset(reset)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def reset(self):
    return self.get("Reset")

  def setReset(self, value):
    return self.set("Reset", value)

#
# Get multipath infos for the specified multipath ID.
#
# Name Type   Description
# ---- ------ --------------
# Id   string A multipath ID
#

class GetMultipathForID(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetMultipathForID")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetMultipathForID.
#
# Name         Type   Description
# ------------ ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Id           string A multipath ID
# System       string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Signal       string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
# SvId         int    The satellite's SV ID
# PowerLoss    double Power loss in dB (value must be positive)
# Pseudorange  double Pseudorange offset in meters (value must be positive)
# Doppler      double Doppler frequency offset in Hz
# CarrierPhase double Carrier phase offset in radians
# Echo         int    Echo number [1..3], or use zero to let Skydel assign an echo number.
#

class GetMultipathForIDResult(CommandResult):

  def __init__(self, id, system, signal, svId, powerLoss, pseudorange, doppler, carrierPhase, echo):
    CommandResult.__init__(self, "GetMultipathForIDResult")
    self.setId(id)
    self.setSystem(system)
    self.setSignal(signal)
    self.setSvId(svId)
    self.setPowerLoss(powerLoss)
    self.setPseudorange(pseudorange)
    self.setDoppler(doppler)
    self.setCarrierPhase(carrierPhase)
    self.setEcho(echo)

  def isSuccess(self):
    return True

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def powerLoss(self):
    return self.get("PowerLoss")

  def setPowerLoss(self, value):
    return self.set("PowerLoss", value)

  def pseudorange(self):
    return self.get("Pseudorange")

  def setPseudorange(self, value):
    return self.set("Pseudorange", value)

  def doppler(self):
    return self.get("Doppler")

  def setDoppler(self, value):
    return self.set("Doppler", value)

  def carrierPhase(self):
    return self.get("CarrierPhase")

  def setCarrierPhase(self, value):
    return self.set("CarrierPhase", value)

  def echo(self):
    return self.get("Echo")

  def setEcho(self, value):
    return self.set("Echo", value)

#
# Get all multipath ID for the specified constellation.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class GetAllMultipathForSystem(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "GetAllMultipathForSystem")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Get all multipath ID for the specified satellite of the constellation.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId   int    The satellite's SV ID
#

class GetAllMultipathForSV(CommandBase):

  def __init__(self, system, svId):
    CommandBase.__init__(self, "GetAllMultipathForSV")
    self.setSystem(system)
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Get all multipath ID for the specified signal.
#
# Name   Type   Description
# ------ ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
#

class GetAllMultipathForSignal(CommandBase):

  def __init__(self, signal):
    CommandBase.__init__(self, "GetAllMultipathForSignal")
    self.setSignal(signal)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

#
# Result of GetAllMultipathFor(Signal|SV|System) commands.
#
# Name Type         Description
# ---- ------------ ------------------------------------------------------
# Ids  array string IDs of multipaths for the specified argument in getter
#

class GetAllMultipathForResult(CommandResult):

  def __init__(self, ids):
    CommandResult.__init__(self, "GetAllMultipathForResult")
    self.setIds(ids)

  def isSuccess(self):
    return True

  def ids(self):
    return self.get("Ids")

  def setIds(self, value):
    return self.set("Ids", value)

#
# Set Direct Line Of Sight signal from satellite enabled or disabled. Generally used when only multipaths signal is visible.
#
# Name    Type   Description
# ------- ------ ----------------------------------------------------------------
# System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId    int    The satellite's SV ID
# Enabled bool   Direct Line of Sight enabled or not
#

class EnableLosForSV(CommandBase):

  def __init__(self, system, svId, enabled):
    CommandBase.__init__(self, "EnableLosForSV")
    self.setSystem(system)
    self.setSvId(svId)
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Get Direct Line Of Sight signal from satellite enabled or disabled. Generally used when only multipaths signal is visible.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId   int    The satellite's SV ID
#

class IsLosEnabledForSV(CommandBase):

  def __init__(self, system, svId):
    CommandBase.__init__(self, "IsLosEnabledForSV")
    self.setSystem(system)
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Result of IsLosEnabledForSV.
#
# Name    Type   Description
# ------- ------ ----------------------------------------------------------------
# System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId    int    The satellite's SV ID
# Enabled bool   Direct Line of Sight enabled or not
#

class IsLosEnabledForSVResult(CommandResult):

  def __init__(self, system, svId, enabled):
    CommandResult.__init__(self, "IsLosEnabledForSVResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Enable Direct Line of Sight (LoS) of all satellites for the specified constellation.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class ClearAllLOSForSystem(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "ClearAllLOSForSystem")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Set Direct Line Of Sight signal from satellite disabled or enabled. Generally used when only multipaths signal is visible.
#
# Name    Type       Description
# ------- ---------- -----------------------------------------------------------------------------------------------------------
# System  string     "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Enabled array bool Direct Line of Sight enabled or not. Zero based index (index 0 => SV ID 1, index 1 => second SV ID 2, etc).
#

class EnableLosForEachSV(CommandBase):

  def __init__(self, system, enabled):
    CommandBase.__init__(self, "EnableLosForEachSV")
    self.setSystem(system)
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Get Direct Line Of Sight signal from satellite disabled or enabled. Generally used when only multipaths signal is visible.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class IsLOSEnabledForEachSV(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "IsLOSEnabledForEachSV")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Result of IsLOSEnabledForEachSV.
#
# Name    Type       Description
# ------- ---------- -----------------------------------------------------------------------------------------------------------
# System  string     "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Enabled array bool Direct Line of Sight enabled or not. Zero based index (index 0 => SV ID 1, index 1 => second SV ID 2, etc).
#

class IsLOSEnabledForEachSVResult(CommandResult):

  def __init__(self, system, enabled):
    CommandResult.__init__(self, "IsLOSEnabledForEachSVResult")
    self.setSystem(system)
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Add a plug-in instance of specified type.
#
# Name Type   Description
# ---- ------ -------------------------------------
# Name string Unique name for the plug-in instance.
# Type string Type of the plug-in instance.
#

class AddPlugInInstance(CommandBase):

  def __init__(self, name, type):
    CommandBase.__init__(self, "AddPlugInInstance")
    self.setName(name)
    self.setType(type)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

#
# Removes the plug-in instance.
#
# Name Type   Description
# ---- ------ -----------------------------
# Name string Plug-in instance unique name.
#

class RemovePlugInInstance(CommandBase):

  def __init__(self, name):
    CommandBase.__init__(self, "RemovePlugInInstance")
    self.setName(name)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

#
# Sends a command to a plug-in instance.
#
# Name    Type   Description
# ------- ------ --------------------------------------------------
# Name    string Plug-in instance unique name.
# Command string The command to be handled by the plug-in instance.
#

class PlugInCommand(CommandBase):

  def __init__(self, name, command):
    CommandBase.__init__(self, "PlugInCommand")
    self.setName(name)
    self.setCommand(command)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def name(self):
    return self.get("Name")

  def setName(self, value):
    return self.set("Name", value)

  def command(self):
    return self.get("Command")

  def setCommand(self, value):
    return self.set("Command", value)

#
# Set wether by default transmitters should keep the modification done during simulation.
#
# Name         Type Description
# ------------ ---- --------------------------------------------------------------------------------
# DefaultValue bool True if jammers should keep the modifications done during simulation by default.
#

class SetDefaultIntTxPersistence(CommandBase):

  def __init__(self, defaultValue):
    CommandBase.__init__(self, "SetDefaultIntTxPersistence")
    self.setDefaultValue(defaultValue)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def defaultValue(self):
    return self.get("DefaultValue")

  def setDefaultValue(self, value):
    return self.set("DefaultValue", value)

#
# Get wether by default transmitters should keep the modification done during simulation.
#
#

class GetDefaultIntTxPersistence(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetDefaultIntTxPersistence")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetDefaultIntTxPersistence.
#
# Name         Type Description
# ------------ ---- --------------------------------------------------------------------------------
# DefaultValue bool True if jammers should keep the modifications done during simulation by default.
#

class GetDefaultIntTxPersistenceResult(CommandResult):

  def __init__(self, defaultValue):
    CommandResult.__init__(self, "GetDefaultIntTxPersistenceResult")
    self.setDefaultValue(defaultValue)

  def isSuccess(self):
    return True

  def defaultValue(self):
    return self.get("DefaultValue")

  def setDefaultValue(self, value):
    return self.set("DefaultValue", value)

#
# Get the ID of all interferences transmitters.
#
#

class GetAllIntTxID(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetAllIntTxID")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetAllIntTxID.
#
# Name Type         Description
# ---- ------------ ------------------------------------------
# Ids  array string ID list of all interferences transmitters.
#

class GetAllIntTxIDResult(CommandResult):

  def __init__(self, ids):
    CommandResult.__init__(self, "GetAllIntTxIDResult")
    self.setIds(ids)

  def isSuccess(self):
    return True

  def ids(self):
    return self.get("Ids")

  def setIds(self, value):
    return self.set("Ids", value)

#
# Set an interference transmitter. If the transmitter ID parameter is not set (empty string),
# Skydel will assign a unique ID to the transmitter. If the ID is set and already used by Skydel, the
# command will fail.
#
# Name      Type   Description
# --------- ------ ----------------------------------------------------------------------------------------
# UsualName string Usual name for the transmitter.
# Enabled   bool   Enable (true) or disable (false) the transmitter
# Group     int    Interference group number [1..16]
# Dynamic   bool   Set to true for a dynamic transmitter (propagation loss and doppler shift are simulated)
# Power     double Set the transmitter reference power
# Id        string Transmitter unique identifier.
#

class AddIntTx(CommandBase):

  def __init__(self, usualName, enabled, group, dynamic, power, id):
    CommandBase.__init__(self, "AddIntTx")
    self.setUsualName(usualName)
    self.setEnabled(enabled)
    self.setGroup(group)
    self.setDynamic(dynamic)
    self.setPower(power)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def usualName(self):
    return self.get("UsualName")

  def setUsualName(self, value):
    return self.set("UsualName", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

  def dynamic(self):
    return self.get("Dynamic")

  def setDynamic(self, value):
    return self.set("Dynamic", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get an interference transmitter.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetIntTx(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetIntTx")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetIntTx.
#
# Name      Type   Description
# --------- ------ ----------------------------------------------------------------------------------------
# UsualName string Usual name for the transmitter.
# Enabled   bool   Enable (true) or disable (false) the transmitter
# Group     int    Interference group number [1..16]
# Dynamic   bool   Set to true for a dynamic transmitter (propagation loss and doppler shift are simulated)
# Power     double Set the transmitter reference power
# Id        string Transmitter unique identifier.
#

class GetIntTxResult(CommandResult):

  def __init__(self, usualName, enabled, group, dynamic, power, id):
    CommandResult.__init__(self, "GetIntTxResult")
    self.setUsualName(usualName)
    self.setEnabled(enabled)
    self.setGroup(group)
    self.setDynamic(dynamic)
    self.setPower(power)
    self.setId(id)

  def isSuccess(self):
    return True

  def usualName(self):
    return self.get("UsualName")

  def setUsualName(self, value):
    return self.set("UsualName", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

  def dynamic(self):
    return self.get("Dynamic")

  def setDynamic(self, value):
    return self.set("Dynamic", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Rename a transmitter.
#
# Name      Type   Description
# --------- ------ -------------------------------
# UsualName string Usual name for the transmitter.
# Id        string Transmitter unique identifier.
#

class RenameIntTx(CommandBase):

  def __init__(self, usualName, id):
    CommandBase.__init__(self, "RenameIntTx")
    self.setUsualName(usualName)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def usualName(self):
    return self.get("UsualName")

  def setUsualName(self, value):
    return self.set("UsualName", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set a transmitter color in spectrums
#
# Name  Type   Description
# ----- ------ -------------------------------------------------------------------------------
# Color string Color 'name'. Either a common color (red, white, ...) or an hex code (#FFFFFF).
# Id    string Transmitter unique identifier.
#

class ChangeIntTxColor(CommandBase):

  def __init__(self, color, id):
    CommandBase.__init__(self, "ChangeIntTxColor")
    self.setColor(color)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def color(self):
    return self.get("Color")

  def setColor(self, value):
    return self.set("Color", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get a transmitter color in spectrums
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetIntTxColor(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetIntTxColor")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetIntTxColor.
#
# Name  Type   Description
# ----- ------ -------------------------------------------------------------------------------
# Color string Color 'name'. Either a common color (red, white, ...) or an hex code (#FFFFFF).
# Id    string Transmitter unique identifier.
#

class GetIntTxColorResult(CommandResult):

  def __init__(self, color, id):
    CommandResult.__init__(self, "GetIntTxColorResult")
    self.setColor(color)
    self.setId(id)

  def isSuccess(self):
    return True

  def color(self):
    return self.get("Color")

  def setColor(self, value):
    return self.set("Color", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Enable/Disable the interference transmitter.
#
# Name    Type   Description
# ------- ------ ------------------------------------------------
# Enabled bool   Enable (true) or disable (false) the transmitter
# Id      string Transmitter unique identifier.
#

class EnableIntTx(CommandBase):

  def __init__(self, enabled, id):
    CommandBase.__init__(self, "EnableIntTx")
    self.setEnabled(enabled)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set the interference transmitter group (which links to a specific RF output target).
#
# Name  Type   Description
# ----- ------ ---------------------------------
# Group int    Interference group number [1..16]
# Id    string Transmitter unique identifier.
#

class SetIntTxGroup(CommandBase):

  def __init__(self, group, id):
    CommandBase.__init__(self, "SetIntTxGroup")
    self.setGroup(group)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set the interference transmitter reference power.
#
# Name  Type   Description
# ----- ------ ------------------------------
# Power double Reference Power (dBm)
# Id    string Transmitter unique identifier.
#

class SetIntTxRefPower(CommandBase):

  def __init__(self, power, id):
    CommandBase.__init__(self, "SetIntTxRefPower")
    self.setPower(power)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set wether the transmitter should keep the modifications done during the simulation.
#
# Name        Type   Description
# ----------- ------ ------------------------------------------------------
# Persistence bool   True to keep the modifications, false to discard them.
# Id          string Transmitter unique identifier.
#

class SetIntTxPersistence(CommandBase):

  def __init__(self, persistence, id):
    CommandBase.__init__(self, "SetIntTxPersistence")
    self.setPersistence(persistence)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def persistence(self):
    return self.get("Persistence")

  def setPersistence(self, value):
    return self.set("Persistence", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get wether the transmitter should keep the modifications done during the simulation.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetIntTxPersistence(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetIntTxPersistence")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetIntTxPersistence.
#
# Name        Type   Description
# ----------- ------ ------------------------------------------------------
# Persistence bool   True to keep the modifications, false to discard them.
# Id          string Transmitter unique identifier.
#

class GetIntTxPersistenceResult(CommandResult):

  def __init__(self, persistence, id):
    CommandResult.__init__(self, "GetIntTxPersistenceResult")
    self.setPersistence(persistence)
    self.setId(id)

  def isSuccess(self):
    return True

  def persistence(self):
    return self.get("Persistence")

  def setPersistence(self, value):
    return self.set("Persistence", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set the manual propagation loss for the given interference signal. Value is used only if SetIntTxUseManualPropagationLoss has been set on the corresponding transmitter. This value is not preserved after simulation end.
#
# Name            Type   Description
# --------------- ------ --------------------------------------------------------------------------------------------------------
# PropagationLoss double The propagation loss in dB to use until the next call of this command, or until manual mode is disabled.
# TransmitterId   string Transmitter unique identifier.
# SignalId        string Signal unique identifier.
#

class SetIntTxSignalManualPropagationLoss(CommandBase):

  def __init__(self, propagationLoss, transmitterId, signalId):
    CommandBase.__init__(self, "SetIntTxSignalManualPropagationLoss")
    self.setPropagationLoss(propagationLoss)
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def propagationLoss(self):
    return self.get("PropagationLoss")

  def setPropagationLoss(self, value):
    return self.set("PropagationLoss", value)

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

#
# Set whether a dynamic transmitter should only use user-provided propagation loss values. Propagation loss will not update automatically if set. This state is not preserved after simulation end.
#
# Name   Type   Description
# ------ ------ -------------------------------------------------------------
# Manual bool   If true, propagation loss will be 1000 dB until set manually.
# Id     string Interference transmitter unique identifier.
#

class SetIntTxUseManualPropagationLoss(CommandBase):

  def __init__(self, manual, id):
    CommandBase.__init__(self, "SetIntTxUseManualPropagationLoss")
    self.setManual(manual)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def manual(self):
    return self.get("Manual")

  def setManual(self, value):
    return self.set("Manual", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set whether a dynamic transmitter should ignore propagation loss or not.
#
# Name   Type   Description
# ------ ------ ------------------------------------------
# Ignore bool   If true, propagation loss will be ignored.
# Id     string Transmitter unique identifier.
#

class SetIntTxIgnorePropagationLoss(CommandBase):

  def __init__(self, ignore, id):
    CommandBase.__init__(self, "SetIntTxIgnorePropagationLoss")
    self.setIgnore(ignore)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def ignore(self):
    return self.get("Ignore")

  def setIgnore(self, value):
    return self.set("Ignore", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set whether a dynamic transmitter should ignore the vehicle's antenna patterns (gain and phase).
#
# Name   Type   Description
# ------ ------ -------------------------------------------------------------------------
# Ignore bool   If true, the vehicle's antenna patterns (gain and phase) will be ignored.
# Id     string Transmitter unique identifier.
#

class SetIntTxIgnoreRxAntennaPatterns(CommandBase):

  def __init__(self, ignore, id):
    CommandBase.__init__(self, "SetIntTxIgnoreRxAntennaPatterns")
    self.setIgnore(ignore)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def ignore(self):
    return self.get("Ignore")

  def setIgnore(self, value):
    return self.set("Ignore", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Please note the command SetIntTxIgnoreVehicleAntennaPattern is deprecated since 20.2. You may use SetIntTxIgnoreRxAntennaPatterns.
# 
# Set whether a dynamic transmitter should ignore the vehicle's antenna patterns (gain and phase).
#
# Name   Type   Description
# ------ ------ -------------------------------------------------------------------------
# Ignore bool   If true, the vehicle's antenna patterns (gain and phase) will be ignored.
# Id     string Transmitter unique identifier.
#

class SetIntTxIgnoreVehicleAntennaPattern(CommandBase):

  def __init__(self, ignore, id):
    CommandBase.__init__(self, "SetIntTxIgnoreVehicleAntennaPattern")
    self.setIgnore(ignore)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def ignore(self):
    return self.get("Ignore")

  def setIgnore(self, value):
    return self.set("Ignore", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set whether a transmitter should be hidden on the map.
#
# Name        Type   Description
# ----------- ------ -----------------------------------------------
# HiddenOnMap bool   If true, transmitter will be hidden on the map.
# Id          string Transmitter unique identifier.
#

class SetIntTxHiddenOnMap(CommandBase):

  def __init__(self, hiddenOnMap, id):
    CommandBase.__init__(self, "SetIntTxHiddenOnMap")
    self.setHiddenOnMap(hiddenOnMap)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def hiddenOnMap(self):
    return self.get("HiddenOnMap")

  def setHiddenOnMap(self, value):
    return self.set("HiddenOnMap", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get whether a transmitter should be hidden on the map.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetIntTxHiddenOnMap(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetIntTxHiddenOnMap")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetIntTxHiddenOnMap.
#
# Name        Type   Description
# ----------- ------ -----------------------------------------------
# HiddenOnMap bool   If true, transmitter will be hidden on the map.
# Id          string Transmitter unique identifier.
#

class GetIntTxHiddenOnMapResult(CommandResult):

  def __init__(self, hiddenOnMap, id):
    CommandResult.__init__(self, "GetIntTxHiddenOnMapResult")
    self.setHiddenOnMap(hiddenOnMap)
    self.setId(id)

  def isSuccess(self):
    return True

  def hiddenOnMap(self):
    return self.get("HiddenOnMap")

  def setHiddenOnMap(self, value):
    return self.set("HiddenOnMap", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set whether a dynamic transmitter should ignore the receiver's antenna gain pattern.
#
# Name   Type   Description
# ------ ------ -------------------------------------------------------------
# Ignore bool   If true, the receiver's antenna gain pattern will be ignored.
# Id     string Transmitter unique identifier.
#

class SetIntTxIgnoreRxAntennaGainPattern(CommandBase):

  def __init__(self, ignore, id):
    CommandBase.__init__(self, "SetIntTxIgnoreRxAntennaGainPattern")
    self.setIgnore(ignore)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def ignore(self):
    return self.get("Ignore")

  def setIgnore(self, value):
    return self.set("Ignore", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get whether a dynamic transmitter ignore the receiver's antenna gain pattern.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class IsIntTxIgnoreRxAntennaGainPattern(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "IsIntTxIgnoreRxAntennaGainPattern")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of IsIntTxIgnoreRxAntennaGainPattern.
#
# Name   Type   Description
# ------ ------ -------------------------------------------------------------
# Ignore bool   If true, the receiver's antenna gain pattern will be ignored.
# Id     string Transmitter unique identifier.
#

class IsIntTxIgnoreRxAntennaGainPatternResult(CommandResult):

  def __init__(self, ignore, id):
    CommandResult.__init__(self, "IsIntTxIgnoreRxAntennaGainPatternResult")
    self.setIgnore(ignore)
    self.setId(id)

  def isSuccess(self):
    return True

  def ignore(self):
    return self.get("Ignore")

  def setIgnore(self, value):
    return self.set("Ignore", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set whether a dynamic transmitter should ignore the receiver's antenna phase pattern.
#
# Name   Type   Description
# ------ ------ --------------------------------------------------------------
# Ignore bool   If true, the receiver's antenna phase pattern will be ignored.
# Id     string Transmitter unique identifier.
#

class SetIntTxIgnoreRxAntennaPhasePattern(CommandBase):

  def __init__(self, ignore, id):
    CommandBase.__init__(self, "SetIntTxIgnoreRxAntennaPhasePattern")
    self.setIgnore(ignore)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def ignore(self):
    return self.get("Ignore")

  def setIgnore(self, value):
    return self.set("Ignore", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get whether a dynamic transmitter ignore the receiver's antenna phase pattern.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class IsIntTxIgnoreRxAntennaPhasePattern(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "IsIntTxIgnoreRxAntennaPhasePattern")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of IsIntTxIgnoreRxAntennaPhasePattern.
#
# Name   Type   Description
# ------ ------ --------------------------------------------------------------
# Ignore bool   If true, the receiver's antenna phase pattern will be ignored.
# Id     string Transmitter unique identifier.
#

class IsIntTxIgnoreRxAntennaPhasePatternResult(CommandResult):

  def __init__(self, ignore, id):
    CommandResult.__init__(self, "IsIntTxIgnoreRxAntennaPhasePatternResult")
    self.setIgnore(ignore)
    self.setId(id)

  def isSuccess(self):
    return True

  def ignore(self):
    return self.get("Ignore")

  def setIgnore(self, value):
    return self.set("Ignore", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set an undefined trajectory to a transmitter, thus preventing it to be modulated (default value).
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class SetIntTxNone(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "SetIntTxNone")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set interference transmitter static position and orientation
#
# Name  Type   Description
# ----- ------ ------------------------------
# Lat   double Latitude (rad)
# Lon   double Longitude (rad)
# Alt   double Altitude (m)
# Yaw   double Yaw (rad)
# Pitch double Pitch (rad)
# Roll  double Roll (rad)
# Id    string Transmitter unique identifier.
#

class SetIntTxFix(CommandBase):

  def __init__(self, lat, lon, alt, yaw, pitch, roll, id):
    CommandBase.__init__(self, "SetIntTxFix")
    self.setLat(lat)
    self.setLon(lon)
    self.setAlt(alt)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def lat(self):
    return self.get("Lat")

  def setLat(self, value):
    return self.set("Lat", value)

  def lon(self):
    return self.get("Lon")

  def setLon(self, value):
    return self.set("Lon", value)

  def alt(self):
    return self.get("Alt")

  def setAlt(self, value):
    return self.set("Alt", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get interference transmitter static position and orientation
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetIntTxFix(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetIntTxFix")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetIntTxFix.
#
# Name  Type   Description
# ----- ------ ------------------------------
# Lat   double Latitude (rad)
# Lon   double Longitude (rad)
# Alt   double Altitude (m)
# Yaw   double Yaw (rad)
# Pitch double Pitch (rad)
# Roll  double Roll (rad)
# Id    string Transmitter unique identifier.
#

class GetIntTxFixResult(CommandResult):

  def __init__(self, lat, lon, alt, yaw, pitch, roll, id):
    CommandResult.__init__(self, "GetIntTxFixResult")
    self.setLat(lat)
    self.setLon(lon)
    self.setAlt(alt)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)
    self.setId(id)

  def isSuccess(self):
    return True

  def lat(self):
    return self.get("Lat")

  def setLat(self, value):
    return self.set("Lat", value)

  def lon(self):
    return self.get("Lon")

  def setLon(self, value):
    return self.set("Lon", value)

  def alt(self):
    return self.get("Alt")

  def setAlt(self, value):
    return self.set("Alt", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set interference transmitter static position and orientation
#
# Name  Type   Description
# ----- ------ ------------------------------
# X     double ECEF X (m)
# Y     double ECEF Y (m)
# Z     double ECEF Z (m)
# Yaw   double Yaw (rad)
# Pitch double Pitch (rad)
# Roll  double Roll (rad)
# Id    string Transmitter unique identifier.
#

class SetIntTxFixEcef(CommandBase):

  def __init__(self, x, y, z, yaw, pitch, roll, id):
    CommandBase.__init__(self, "SetIntTxFixEcef")
    self.setX(x)
    self.setY(y)
    self.setZ(z)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get interference transmitter static position and orientation
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetIntTxFixEcef(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetIntTxFixEcef")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetIntTxFixEcef.
#
# Name  Type   Description
# ----- ------ ------------------------------
# X     double ECEF X (m)
# Y     double ECEF Y (m)
# Z     double ECEF Z (m)
# Yaw   double Yaw (rad)
# Pitch double Pitch (rad)
# Roll  double Roll (rad)
# Id    string Transmitter unique identifier.
#

class GetIntTxFixEcefResult(CommandResult):

  def __init__(self, x, y, z, yaw, pitch, roll, id):
    CommandResult.__init__(self, "GetIntTxFixEcefResult")
    self.setX(x)
    self.setY(y)
    self.setZ(z)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)
    self.setId(id)

  def isSuccess(self):
    return True

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set interference transmitter circular trajectory
#
# Name        Type            Description
# ----------- --------------- --------------------------------
# Lat         double          Center latitude (rad)
# Lon         double          Center longitude (rad)
# Alt         double          Altitude (m)
# Radius      double          Radius (m)
# Speed       double          Speed (m/s)
# Clockwise   bool            If true, vehicle turns clockwise
# Id          string          Transmitter unique identifier.
# OriginAngle optional double Vehicle angle at elapsed time 0.
#

class SetIntTxCircular(CommandBase):

  def __init__(self, lat, lon, alt, radius, speed, clockwise, id, originAngle = None):
    CommandBase.__init__(self, "SetIntTxCircular")
    self.setLat(lat)
    self.setLon(lon)
    self.setAlt(alt)
    self.setRadius(radius)
    self.setSpeed(speed)
    self.setClockwise(clockwise)
    self.setId(id)
    self.setOriginAngle(originAngle)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def lat(self):
    return self.get("Lat")

  def setLat(self, value):
    return self.set("Lat", value)

  def lon(self):
    return self.get("Lon")

  def setLon(self, value):
    return self.set("Lon", value)

  def alt(self):
    return self.get("Alt")

  def setAlt(self, value):
    return self.set("Alt", value)

  def radius(self):
    return self.get("Radius")

  def setRadius(self, value):
    return self.set("Radius", value)

  def speed(self):
    return self.get("Speed")

  def setSpeed(self, value):
    return self.set("Speed", value)

  def clockwise(self):
    return self.get("Clockwise")

  def setClockwise(self, value):
    return self.set("Clockwise", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

  def originAngle(self):
    return self.get("OriginAngle")

  def setOriginAngle(self, value):
    return self.set("OriginAngle", value)

#
# Get interference transmitter circular trajectory
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetIntTxCircular(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetIntTxCircular")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetIntTxCircular.
#
# Name        Type            Description
# ----------- --------------- --------------------------------
# Lat         double          Center latitude (rad)
# Lon         double          Center longitude (rad)
# Alt         double          Altitude (m)
# Radius      double          Radius (m)
# Speed       double          Speed (m/s)
# Clockwise   bool            If true, vehicle turns clockwise
# Id          string          Transmitter unique identifier.
# OriginAngle optional double Vehicle angle at elapsed time 0.
#

class GetIntTxCircularResult(CommandResult):

  def __init__(self, lat, lon, alt, radius, speed, clockwise, id, originAngle = None):
    CommandResult.__init__(self, "GetIntTxCircularResult")
    self.setLat(lat)
    self.setLon(lon)
    self.setAlt(alt)
    self.setRadius(radius)
    self.setSpeed(speed)
    self.setClockwise(clockwise)
    self.setId(id)
    self.setOriginAngle(originAngle)

  def isSuccess(self):
    return True

  def lat(self):
    return self.get("Lat")

  def setLat(self, value):
    return self.set("Lat", value)

  def lon(self):
    return self.get("Lon")

  def setLon(self, value):
    return self.set("Lon", value)

  def alt(self):
    return self.get("Alt")

  def setAlt(self, value):
    return self.set("Alt", value)

  def radius(self):
    return self.get("Radius")

  def setRadius(self, value):
    return self.set("Radius", value)

  def speed(self):
    return self.get("Speed")

  def setSpeed(self, value):
    return self.set("Speed", value)

  def clockwise(self):
    return self.get("Clockwise")

  def setClockwise(self, value):
    return self.set("Clockwise", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

  def originAngle(self):
    return self.get("OriginAngle")

  def setOriginAngle(self, value):
    return self.set("OriginAngle", value)

#
# Set interference transmitter HIL trajectory
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class SetIntTxHil(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "SetIntTxHil")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Begins a new interference track definition. Actual track remains unchanged until
# EndIntTxTrackDefinition command is sent and successful. After this command, the
# client must push time and position pairs to form a complete track. Once all the
# positions are sent, the client must send the command EndIntTxTrackDefinition.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class BeginIntTxTrackDefinition(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "BeginIntTxTrackDefinition")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Push an interference track ecef node. Must be called after BeginIntTxTrackDefinition and before EndIntTxTrackDefinition.
#
# Name Type   Description
# ---- ------ --------------------------------------
# Time int    Node Timestamp in miliseconds
# X    double X distance from earth-center in meters
# Y    double Y distance from earth-center in meters
# Z    double Z distance from earth-center in meters
# Id   string Transmitter unique identifier.
#

class PushIntTxTrackEcef(CommandBase):

  def __init__(self, time, x, y, z, id):
    CommandBase.__init__(self, "PushIntTxTrackEcef")
    self.setTime(time)
    self.setX(x)
    self.setY(y)
    self.setZ(z)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def time(self):
    return self.get("Time")

  def setTime(self, value):
    return self.set("Time", value)

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Push an interference track ecef and ned attitude node. Must be called after BeginIntTxTrackDefinition and before EndIntTxTrackDefinition.
#
# Name  Type   Description
# ----- ------ --------------------------------------
# Time  int    Node Timestamp in miliseconds
# X     double X distance from earth-center in meters
# Y     double Y distance from earth-center in meters
# Z     double Z distance from earth-center in meters
# Yaw   double Yaw in radians
# Pitch double Pitch in radians
# Roll  double Roll in radians
# Id    string Transmitter unique identifier.
#

class PushIntTxTrackEcefNed(CommandBase):

  def __init__(self, time, x, y, z, yaw, pitch, roll, id):
    CommandBase.__init__(self, "PushIntTxTrackEcefNed")
    self.setTime(time)
    self.setX(x)
    self.setY(y)
    self.setZ(z)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def time(self):
    return self.get("Time")

  def setTime(self, value):
    return self.set("Time", value)

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# This command completes the track started with BeginIntTxTrackDefinition command. If
# the track is accepted, the current track in the configuration is replaced with
# this new track. If the track is not accepted, the current track in the config
# remains unchanged.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class EndIntTxTrackDefinition(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "EndIntTxTrackDefinition")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# EndIntTxTrackDefinition Result with created track informations.
#
# Name  Type   Description
# ----- ------ ----------------------------------------------------------------------------------------------------
# Count int    Number of nodes in the track. The client can compare this value with the number of positions pushed.
# Id    string Transmitter unique identifier.
#

class EndIntTxTrackDefinitionResult(CommandResult):

  def __init__(self, count, id):
    CommandResult.__init__(self, "EndIntTxTrackDefinitionResult")
    self.setCount(count)
    self.setId(id)

  def isSuccess(self):
    return True

  def count(self):
    return self.get("Count")

  def setCount(self, value):
    return self.set("Count", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Import NMEA interference track file
#
# Name Type   Description
# ---- ------ ------------------------------
# Path string NMEA file path
# Id   string Transmitter unique identifier.
#

class ImportNmeaIntTxTrack(CommandBase):

  def __init__(self, path, id):
    CommandBase.__init__(self, "ImportNmeaIntTxTrack")
    self.setPath(path)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set trajectory smoothing for interference Track enabled or disabled
#
# Name    Type   Description
# ------- ------ -------------------------------------------------------------------
# Enabled bool   If true, interference trajectory will be smoothed during simulation
# Id      string Transmitter unique identifier.
#

class EnableIntTxTrajectorySmoothing(CommandBase):

  def __init__(self, enabled, id):
    CommandBase.__init__(self, "EnableIntTxTrajectorySmoothing")
    self.setEnabled(enabled)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get trajectory smoothing for interference Track enabled or disabled
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class IsIntTxTrajectorySmoothingEnabled(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "IsIntTxTrajectorySmoothingEnabled")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of IsIntTxTrajectorySmoothingEnabled.
#
# Name    Type   Description
# ------- ------ -------------------------------------------------------------------
# Enabled bool   If true, interference trajectory will be smoothed during simulation
# Id      string Transmitter unique identifier.
#

class IsIntTxTrajectorySmoothingEnabledResult(CommandResult):

  def __init__(self, enabled, id):
    CommandResult.__init__(self, "IsIntTxTrajectorySmoothingEnabledResult")
    self.setEnabled(enabled)
    self.setId(id)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set force interference vehicle yaw, pitch and roll to zero enabled or disabled
#
# Name    Type   Description
# ------- ------ ------------------------------------------------------------
# Enabled bool   If true, interference vehicle won't rotate during simulation
# Id      string Transmitter unique identifier.
#

class ForceIntTxAttitudeToZero(CommandBase):

  def __init__(self, enabled, id):
    CommandBase.__init__(self, "ForceIntTxAttitudeToZero")
    self.setEnabled(enabled)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get force interference vehicle yaw, pitch and roll to zero enabled or disabled
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class IsIntTxAttitudeToZeroForced(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "IsIntTxAttitudeToZeroForced")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of IsIntTxAttitudeToZeroForced.
#
# Name    Type   Description
# ------- ------ ------------------------------------------------------------
# Enabled bool   If true, interference vehicle won't rotate during simulation
# Id      string Transmitter unique identifier.
#

class IsIntTxAttitudeToZeroForcedResult(CommandResult):

  def __init__(self, enabled, id):
    CommandResult.__init__(self, "IsIntTxAttitudeToZeroForcedResult")
    self.setEnabled(enabled)
    self.setId(id)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set Set interference vehicle type for Track Trajectory
#
# Name Type   Description
# ---- ------ ----------------------------------------------------------
# Type string Vehicle type ("Ground / Water" or "Airborne / Spaceborne")
# Id   string Transmitter unique identifier.
#

class SetIntTxVehicleType(CommandBase):

  def __init__(self, type, id):
    CommandBase.__init__(self, "SetIntTxVehicleType")
    self.setType(type)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get Set interference vehicle type for Track Trajectory
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetIntTxVehicleType(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetIntTxVehicleType")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetIntTxVehicleType.
#
# Name Type   Description
# ---- ------ ----------------------------------------------------------
# Type string Vehicle type ("Ground / Water" or "Airborne / Spaceborne")
# Id   string Transmitter unique identifier.
#

class GetIntTxVehicleTypeResult(CommandResult):

  def __init__(self, type, id):
    CommandResult.__init__(self, "GetIntTxVehicleTypeResult")
    self.setType(type)
    self.setId(id)

  def isSuccess(self):
    return True

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get interference transmitter trajectory.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetIntTxTrajectory(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetIntTxTrajectory")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetIntTxTrajectory.
#
# Name           Type   Description
# -------------- ------ ---------------------------------------------------------
# TrajectoryType string Type of the trajectory of the interferences transmitters.
# Id             string Transmitter unique identifier.
#

class GetIntTxTrajectoryResult(CommandResult):

  def __init__(self, trajectoryType, id):
    CommandResult.__init__(self, "GetIntTxTrajectoryResult")
    self.setTrajectoryType(trajectoryType)
    self.setId(id)

  def isSuccess(self):
    return True

  def trajectoryType(self):
    return self.get("TrajectoryType")

  def setTrajectoryType(self, value):
    return self.set("TrajectoryType", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set transmitter antenna pattern.
#
# Name Type               Description
# ---- ------------------ -------------------------------------------------------------------------------------------------------------------------
# Gain array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
# Type AntennaPatternType Pattern type
# Id   string             Transmitter unique identifier.
#

class SetIntTxAntenna(CommandBase):

  def __init__(self, gain, type, id):
    CommandBase.__init__(self, "SetIntTxAntenna")
    self.setGain(gain)
    self.setType(type)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def gain(self):
    return self.get("Gain")

  def setGain(self, value):
    return self.set("Gain", value)

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get transmitter antenna pattern.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetIntTxAntenna(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetIntTxAntenna")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetIntTxAntenna.
#
# Name Type               Description
# ---- ------------------ -------------------------------------------------------------------------------------------------------------------------
# Gain array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
# Type AntennaPatternType Pattern type
# Id   string             Transmitter unique identifier.
#

class GetIntTxAntennaResult(CommandResult):

  def __init__(self, gain, type, id):
    CommandResult.__init__(self, "GetIntTxAntennaResult")
    self.setGain(gain)
    self.setType(type)
    self.setId(id)

  def isSuccess(self):
    return True

  def gain(self):
    return self.get("Gain")

  def setGain(self, value):
    return self.set("Gain", value)

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set antenna offset and orientation relative to body frame.
# The origin of the body frame follows the transmitter trajectory.
# When the body yaw/pitch/roll are zeros, the body X-axis is pointing north
#                          Y-axis is pointing east
#                          Z-axis is pointing down
# The antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and
# the Roll is rotating arond the X-axis of the body frame.
#
# Name  Type   Description
# ----- ------ --------------------------------------
# X     double Antenna X offset in the body frame
# Y     double Antenna Y offset in the body frame
# Z     double Antenna Z offset in the body frame
# Yaw   double Antenna Yaw offset in the body frame
# Pitch double Antenna Pitch offset in the body frame
# Roll  double Antenna Roll offset in the body frame
# Id    string Transmitter unique identifier.
#

class SetIntTxAntennaOffset(CommandBase):

  def __init__(self, x, y, z, yaw, pitch, roll, id):
    CommandBase.__init__(self, "SetIntTxAntennaOffset")
    self.setX(x)
    self.setY(y)
    self.setZ(z)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get antenna offset and orientation relative to body frame.
# The origin of the body frame follows the transmitter trajectory.
# When the body yaw/pitch/roll are zeros, the body X-axis is pointing north
#                          Y-axis is pointing east
#                          Z-axis is pointing down
# The antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and
# the Roll is rotating arond the X-axis of the body frame.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetIntTxAntennaOffset(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetIntTxAntennaOffset")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetIntTxAntennaOffset.
#
# Name  Type   Description
# ----- ------ --------------------------------------
# X     double Antenna X offset in the body frame
# Y     double Antenna Y offset in the body frame
# Z     double Antenna Z offset in the body frame
# Yaw   double Antenna Yaw offset in the body frame
# Pitch double Antenna Pitch offset in the body frame
# Roll  double Antenna Roll offset in the body frame
# Id    string Transmitter unique identifier.
#

class GetIntTxAntennaOffsetResult(CommandResult):

  def __init__(self, x, y, z, yaw, pitch, roll, id):
    CommandResult.__init__(self, "GetIntTxAntennaOffsetResult")
    self.setX(x)
    self.setY(y)
    self.setZ(z)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)
    self.setId(id)

  def isSuccess(self):
    return True

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Removes the interference transmitter. See EnableIntTx if all you want is to
# disable the interference temporarily.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class RemoveIntTx(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "RemoveIntTx")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Remove all the interference transmitters.
#
#

class RemoveAllIntTx(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "RemoveAllIntTx")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

#
# Get all signal ID for this interference transmitters.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetAllSignalsFromIntTx(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetAllSignalsFromIntTx")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetAllSignalsFromIntTx.
#
# Name      Type         Description
# --------- ------------ -----------------------------------------------------
# Id        string       Transmitter unique identifier.
# IdsSignal array string List of signal ID for this interferences transmitter.
#

class GetAllSignalsFromIntTxResult(CommandResult):

  def __init__(self, id, idsSignal):
    CommandResult.__init__(self, "GetAllSignalsFromIntTxResult")
    self.setId(id)
    self.setIdsSignal(idsSignal)

  def isSuccess(self):
    return True

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

  def idsSignal(self):
    return self.get("IdsSignal")

  def setIdsSignal(self, value):
    return self.set("IdsSignal", value)

#
# Get all signal ID from this interference transmitters and this signal type. If the signal type is invalid, get the IDs of CW type.
#
# Name          Type   Description
# ------------- ------ ------------------------------------------------------------------------------------
# IdTransmitter string Transmitter unique identifier.
# SignalType    string Type of signal. Accepted signals are : "CW", "Chirp", "Pulse", "BPSK", "BOC", "AWGN"
#

class GetSignalFromIntTx(CommandBase):

  def __init__(self, idTransmitter, signalType):
    CommandBase.__init__(self, "GetSignalFromIntTx")
    self.setIdTransmitter(idTransmitter)
    self.setSignalType(signalType)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def idTransmitter(self):
    return self.get("IdTransmitter")

  def setIdTransmitter(self, value):
    return self.set("IdTransmitter", value)

  def signalType(self):
    return self.get("SignalType")

  def setSignalType(self, value):
    return self.set("SignalType", value)

#
# Result of GetSignalFromIntTx.
#
# Name          Type         Description
# ------------- ------------ ------------------------------------------------------------------------------------
# IdTransmitter string       Transmitter unique identifier.
# SignalType    string       Type of signal. Accepted signals are : "CW", "Chirp", "Pulse", "BPSK", "BOC", "AWGN"
# IdsSignal     array string List of signal ID for this interferences transmitter and this signal type.
#

class GetSignalFromIntTxResult(CommandResult):

  def __init__(self, idTransmitter, signalType, idsSignal):
    CommandResult.__init__(self, "GetSignalFromIntTxResult")
    self.setIdTransmitter(idTransmitter)
    self.setSignalType(signalType)
    self.setIdsSignal(idsSignal)

  def isSuccess(self):
    return True

  def idTransmitter(self):
    return self.get("IdTransmitter")

  def setIdTransmitter(self, value):
    return self.set("IdTransmitter", value)

  def signalType(self):
    return self.get("SignalType")

  def setSignalType(self, value):
    return self.set("SignalType", value)

  def idsSignal(self):
    return self.get("IdsSignal")

  def setIdsSignal(self, value):
    return self.set("IdsSignal", value)

#
# Set continuous wave (CW) signal to interference transmitter. A transmitter can combine
# multiple signals of different types to create complex waveform. The CW id (SignalId) can be an empty
# string. In such case, Skydel will assign a unique ID. If the signal id is already in use for the
# specified transmitted, the existing signal is updated, ortherwise a new signal is added.
#
# Name               Type            Description
# ------------------ --------------- ---------------------------------------------------
# Enabled            bool            Enable (true) or disable (false) the signal
# CentralFreq        double          Central frequency (Hz)
# Power              double          Power (dB), relative to transmitter reference power
# TransmitterId      string          Transmitter unique identifier.
# SignalId           string          CW unique identifier.
# InitialPhaseOffset optional double Initial phase offset, in radians. Defaults to 0.
# Group              optional int    Group, if not using default group.
#

class SetIntTxCW(CommandBase):

  def __init__(self, enabled, centralFreq, power, transmitterId, signalId, initialPhaseOffset = None, group = None):
    CommandBase.__init__(self, "SetIntTxCW")
    self.setEnabled(enabled)
    self.setCentralFreq(centralFreq)
    self.setPower(power)
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)
    self.setInitialPhaseOffset(initialPhaseOffset)
    self.setGroup(group)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def centralFreq(self):
    return self.get("CentralFreq")

  def setCentralFreq(self, value):
    return self.set("CentralFreq", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

  def initialPhaseOffset(self):
    return self.get("InitialPhaseOffset")

  def setInitialPhaseOffset(self, value):
    return self.set("InitialPhaseOffset", value)

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

#
# Get informations about the CW signal of the transmitter.
#
# Name          Type   Description
# ------------- ------ ------------------------------
# TransmitterId string Transmitter unique identifier.
# SignalId      string CW unique identifier.
#

class GetIntTxCW(CommandBase):

  def __init__(self, transmitterId, signalId):
    CommandBase.__init__(self, "GetIntTxCW")
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

#
# Result of GetIntTxCW.
#
# Name               Type            Description
# ------------------ --------------- ---------------------------------------------------
# Enabled            bool            Enable (true) or disable (false) the signal
# CentralFreq        double          Central frequency (Hz)
# Power              double          Power (dB), relative to transmitter reference power
# TransmitterId      string          Transmitter unique identifier.
# SignalId           string          CW unique identifier.
# InitialPhaseOffset optional double Initial phase offset, in radians. Defaults to 0.
# Group              optional int    Group, if not using default group.
#

class GetIntTxCWResult(CommandResult):

  def __init__(self, enabled, centralFreq, power, transmitterId, signalId, initialPhaseOffset = None, group = None):
    CommandResult.__init__(self, "GetIntTxCWResult")
    self.setEnabled(enabled)
    self.setCentralFreq(centralFreq)
    self.setPower(power)
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)
    self.setInitialPhaseOffset(initialPhaseOffset)
    self.setGroup(group)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def centralFreq(self):
    return self.get("CentralFreq")

  def setCentralFreq(self, value):
    return self.set("CentralFreq", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

  def initialPhaseOffset(self):
    return self.get("InitialPhaseOffset")

  def setInitialPhaseOffset(self, value):
    return self.set("InitialPhaseOffset", value)

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

#
# Set Chirp signal to interference transmitter. A transmitter can combine
# multiple signals of different types to create complex waveform. The signal id (SignalId) can be an empty
# string. In such case, Skydel will assign a unique ID. If the signal id is already in use for the
# specified transmitted, the existing signal is updated, ortherwise a new signal is added.
#
# Name          Type         Description
# ------------- ------------ ---------------------------------------------------
# Enabled       bool         Enable (true) or disable (false) the signal
# CentralFreq   double       Central frequency (Hz)
# Power         double       Power (dB), relative to transmitter reference power
# Bandwidth     double       Bandwidth (Hz)
# SweepTime     double       sweep Time (us)
# TransmitterId string       Transmitter unique identifier.
# SignalId      string       Chirp unique identifier.
# Group         optional int Group, if not using default group.
#

class SetIntTxChirp(CommandBase):

  def __init__(self, enabled, centralFreq, power, bandwidth, sweepTime, transmitterId, signalId, group = None):
    CommandBase.__init__(self, "SetIntTxChirp")
    self.setEnabled(enabled)
    self.setCentralFreq(centralFreq)
    self.setPower(power)
    self.setBandwidth(bandwidth)
    self.setSweepTime(sweepTime)
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)
    self.setGroup(group)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def centralFreq(self):
    return self.get("CentralFreq")

  def setCentralFreq(self, value):
    return self.set("CentralFreq", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def bandwidth(self):
    return self.get("Bandwidth")

  def setBandwidth(self, value):
    return self.set("Bandwidth", value)

  def sweepTime(self):
    return self.get("SweepTime")

  def setSweepTime(self, value):
    return self.set("SweepTime", value)

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

#
# Get informations about the Chirp signal of the transmitter.
#
# Name          Type   Description
# ------------- ------ ------------------------------
# TransmitterId string Transmitter unique identifier.
# SignalId      string Chirp unique identifier.
#

class GetIntTxChirp(CommandBase):

  def __init__(self, transmitterId, signalId):
    CommandBase.__init__(self, "GetIntTxChirp")
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

#
# Result of GetIntTxChirp.
#
# Name          Type         Description
# ------------- ------------ ---------------------------------------------------
# Enabled       bool         Enable (true) or disable (false) the signal
# CentralFreq   double       Central frequency (Hz)
# Power         double       Power (dB), relative to transmitter reference power
# Bandwidth     double       Bandwidth (Hz)
# SweepTime     double       sweep Time (us)
# TransmitterId string       Transmitter unique identifier.
# SignalId      string       Chirp unique identifier.
# Group         optional int Group, if not using default group.
#

class GetIntTxChirpResult(CommandResult):

  def __init__(self, enabled, centralFreq, power, bandwidth, sweepTime, transmitterId, signalId, group = None):
    CommandResult.__init__(self, "GetIntTxChirpResult")
    self.setEnabled(enabled)
    self.setCentralFreq(centralFreq)
    self.setPower(power)
    self.setBandwidth(bandwidth)
    self.setSweepTime(sweepTime)
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)
    self.setGroup(group)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def centralFreq(self):
    return self.get("CentralFreq")

  def setCentralFreq(self, value):
    return self.set("CentralFreq", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def bandwidth(self):
    return self.get("Bandwidth")

  def setBandwidth(self, value):
    return self.set("Bandwidth", value)

  def sweepTime(self):
    return self.get("SweepTime")

  def setSweepTime(self, value):
    return self.set("SweepTime", value)

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

#
# Set pulse signal interference.
#
# Name          Type         Description
# ------------- ------------ --------------------------------------------------------------
# Enabled       bool         Enable (true) or disable (false) the signal
# CentralFreq   double       Central frequency (Hz)
# Power         double       Power (dB), relative to transmitter reference power
# DutyCycle     double       Duty Cycle between 0.01 and 100, as a percentage of Pulse Rate
# PulseRate     int          Pulse rate (Hz), between 1 and 100000
# TransmitterId string       Transmitter unique identifier.
# SignalId      string       Pulse unique identifier.
# Group         optional int Group, if not using default group.
#

class SetIntTxPulse(CommandBase):

  def __init__(self, enabled, centralFreq, power, dutyCycle, pulseRate, transmitterId, signalId, group = None):
    CommandBase.__init__(self, "SetIntTxPulse")
    self.setEnabled(enabled)
    self.setCentralFreq(centralFreq)
    self.setPower(power)
    self.setDutyCycle(dutyCycle)
    self.setPulseRate(pulseRate)
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)
    self.setGroup(group)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def centralFreq(self):
    return self.get("CentralFreq")

  def setCentralFreq(self, value):
    return self.set("CentralFreq", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def dutyCycle(self):
    return self.get("DutyCycle")

  def setDutyCycle(self, value):
    return self.set("DutyCycle", value)

  def pulseRate(self):
    return self.get("PulseRate")

  def setPulseRate(self, value):
    return self.set("PulseRate", value)

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

#
# Get pulse signal interference.
#
# Name          Type   Description
# ------------- ------ ------------------------------
# TransmitterId string Transmitter unique identifier.
# SignalId      string Pulse unique identifier.
#

class GetIntTxPulse(CommandBase):

  def __init__(self, transmitterId, signalId):
    CommandBase.__init__(self, "GetIntTxPulse")
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

#
# Result of GetIntTxPulse.
#
# Name          Type         Description
# ------------- ------------ --------------------------------------------------------------
# Enabled       bool         Enable (true) or disable (false) the signal
# CentralFreq   double       Central frequency (Hz)
# Power         double       Power (dB), relative to transmitter reference power
# DutyCycle     double       Duty Cycle between 0.01 and 100, as a percentage of Pulse Rate
# PulseRate     int          Pulse rate (Hz), between 1 and 100000
# TransmitterId string       Transmitter unique identifier.
# SignalId      string       Pulse unique identifier.
# Group         optional int Group, if not using default group.
#

class GetIntTxPulseResult(CommandResult):

  def __init__(self, enabled, centralFreq, power, dutyCycle, pulseRate, transmitterId, signalId, group = None):
    CommandResult.__init__(self, "GetIntTxPulseResult")
    self.setEnabled(enabled)
    self.setCentralFreq(centralFreq)
    self.setPower(power)
    self.setDutyCycle(dutyCycle)
    self.setPulseRate(pulseRate)
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)
    self.setGroup(group)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def centralFreq(self):
    return self.get("CentralFreq")

  def setCentralFreq(self, value):
    return self.set("CentralFreq", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def dutyCycle(self):
    return self.get("DutyCycle")

  def setDutyCycle(self, value):
    return self.set("DutyCycle", value)

  def pulseRate(self):
    return self.get("PulseRate")

  def setPulseRate(self, value):
    return self.set("PulseRate", value)

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

#
# Set BPSK signal interference.
#
# Name          Type         Description
# ------------- ------------ -------------------------------------------------------------------------
# Enabled       bool         Enable (true) or disable (false) the signal
# CentralFreq   double       Central frequency (Hz).
# Power         double       Power (dB), relative to transmitter reference power.
# CodeRate      int          Code rate (Hz). Must be between 1000 and 60000000 and a multiple of 1KHz.
# CodeLengthMs  int          Code length (ms). Must be between 1 and 100.
# TransmitterId string       Transmitter unique identifier.
# SignalId      string       BPSK unique identifier.
# Group         optional int Group, if not using default group.
# Prn           optional int Prn code to use. If not specified, a random gode will be generated.
#

class SetIntTxBPSK(CommandBase):

  def __init__(self, enabled, centralFreq, power, codeRate, codeLengthMs, transmitterId, signalId, group = None, prn = None):
    CommandBase.__init__(self, "SetIntTxBPSK")
    self.setEnabled(enabled)
    self.setCentralFreq(centralFreq)
    self.setPower(power)
    self.setCodeRate(codeRate)
    self.setCodeLengthMs(codeLengthMs)
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)
    self.setGroup(group)
    self.setPrn(prn)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def centralFreq(self):
    return self.get("CentralFreq")

  def setCentralFreq(self, value):
    return self.set("CentralFreq", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def codeRate(self):
    return self.get("CodeRate")

  def setCodeRate(self, value):
    return self.set("CodeRate", value)

  def codeLengthMs(self):
    return self.get("CodeLengthMs")

  def setCodeLengthMs(self, value):
    return self.set("CodeLengthMs", value)

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

  def prn(self):
    return self.get("Prn")

  def setPrn(self, value):
    return self.set("Prn", value)

#
# Get BPSK signal interference.
#
# Name          Type   Description
# ------------- ------ ------------------------------
# TransmitterId string Transmitter unique identifier.
# SignalId      string BPSK unique identifier.
#

class GetIntTxBPSK(CommandBase):

  def __init__(self, transmitterId, signalId):
    CommandBase.__init__(self, "GetIntTxBPSK")
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

#
# Result of GetIntTxBPSK.
#
# Name          Type         Description
# ------------- ------------ -------------------------------------------------------------------------
# Enabled       bool         Enable (true) or disable (false) the signal
# CentralFreq   double       Central frequency (Hz).
# Power         double       Power (dB), relative to transmitter reference power.
# CodeRate      int          Code rate (Hz). Must be between 1000 and 60000000 and a multiple of 1KHz.
# CodeLengthMs  int          Code length (ms). Must be between 1 and 100.
# TransmitterId string       Transmitter unique identifier.
# SignalId      string       BPSK unique identifier.
# Group         optional int Group, if not using default group.
# Prn           optional int Prn code to use. If not specified, a random gode will be generated.
#

class GetIntTxBPSKResult(CommandResult):

  def __init__(self, enabled, centralFreq, power, codeRate, codeLengthMs, transmitterId, signalId, group = None, prn = None):
    CommandResult.__init__(self, "GetIntTxBPSKResult")
    self.setEnabled(enabled)
    self.setCentralFreq(centralFreq)
    self.setPower(power)
    self.setCodeRate(codeRate)
    self.setCodeLengthMs(codeLengthMs)
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)
    self.setGroup(group)
    self.setPrn(prn)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def centralFreq(self):
    return self.get("CentralFreq")

  def setCentralFreq(self, value):
    return self.set("CentralFreq", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def codeRate(self):
    return self.get("CodeRate")

  def setCodeRate(self, value):
    return self.set("CodeRate", value)

  def codeLengthMs(self):
    return self.get("CodeLengthMs")

  def setCodeLengthMs(self, value):
    return self.set("CodeLengthMs", value)

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

  def prn(self):
    return self.get("Prn")

  def setPrn(self, value):
    return self.set("Prn", value)

#
# Set BOC signal interference.
#
# Name           Type         Description
# -------------- ------------ -------------------------------------------------------------------------
# Enabled        bool         Enable (true) or disable (false) the signal
# CentralFreq    double       Central frequency (Hz)
# Power          double       Power (dB), relative to transmitter reference power
# CodeRate       int          Code rate (Hz). Must be between 1000 and 60000000 and a multiple of 1KHz.
# CodeLengthMs   int          Code length (ms). Must be between 1 and 100.
# SubCarrierRate int          Code rate (Hz). Must be between 1000 and 60000000 and a multiple of 1KHz.
# CosinePhaseBoc bool         Use Cosine-Phase BOC instead of default Sine-Phase BOC.
# TransmitterId  string       Transmitter unique identifier.
# SignalId       string       BOC unique identifier.
# Group          optional int Group, if not using default group.
#

class SetIntTxBOC(CommandBase):

  def __init__(self, enabled, centralFreq, power, codeRate, codeLengthMs, subCarrierRate, cosinePhaseBoc, transmitterId, signalId, group = None):
    CommandBase.__init__(self, "SetIntTxBOC")
    self.setEnabled(enabled)
    self.setCentralFreq(centralFreq)
    self.setPower(power)
    self.setCodeRate(codeRate)
    self.setCodeLengthMs(codeLengthMs)
    self.setSubCarrierRate(subCarrierRate)
    self.setCosinePhaseBoc(cosinePhaseBoc)
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)
    self.setGroup(group)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def centralFreq(self):
    return self.get("CentralFreq")

  def setCentralFreq(self, value):
    return self.set("CentralFreq", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def codeRate(self):
    return self.get("CodeRate")

  def setCodeRate(self, value):
    return self.set("CodeRate", value)

  def codeLengthMs(self):
    return self.get("CodeLengthMs")

  def setCodeLengthMs(self, value):
    return self.set("CodeLengthMs", value)

  def subCarrierRate(self):
    return self.get("SubCarrierRate")

  def setSubCarrierRate(self, value):
    return self.set("SubCarrierRate", value)

  def cosinePhaseBoc(self):
    return self.get("CosinePhaseBoc")

  def setCosinePhaseBoc(self, value):
    return self.set("CosinePhaseBoc", value)

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

#
# Get BOC signal interference.
#
# Name          Type   Description
# ------------- ------ ------------------------------
# TransmitterId string Transmitter unique identifier.
# SignalId      string BOC unique identifier.
#

class GetIntTxBOC(CommandBase):

  def __init__(self, transmitterId, signalId):
    CommandBase.__init__(self, "GetIntTxBOC")
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

#
# Result of GetIntTxBOC.
#
# Name           Type         Description
# -------------- ------------ -------------------------------------------------------------------------
# Enabled        bool         Enable (true) or disable (false) the signal
# CentralFreq    double       Central frequency (Hz)
# Power          double       Power (dB), relative to transmitter reference power
# CodeRate       int          Code rate (Hz). Must be between 1000 and 60000000 and a multiple of 1KHz.
# CodeLengthMs   int          Code length (ms). Must be between 1 and 100.
# SubCarrierRate int          Code rate (Hz). Must be between 1000 and 60000000 and a multiple of 1KHz.
# CosinePhaseBoc bool         Use Cosine-Phase BOC instead of default Sine-Phase BOC.
# TransmitterId  string       Transmitter unique identifier.
# SignalId       string       BOC unique identifier.
# Group          optional int Group, if not using default group.
#

class GetIntTxBOCResult(CommandResult):

  def __init__(self, enabled, centralFreq, power, codeRate, codeLengthMs, subCarrierRate, cosinePhaseBoc, transmitterId, signalId, group = None):
    CommandResult.__init__(self, "GetIntTxBOCResult")
    self.setEnabled(enabled)
    self.setCentralFreq(centralFreq)
    self.setPower(power)
    self.setCodeRate(codeRate)
    self.setCodeLengthMs(codeLengthMs)
    self.setSubCarrierRate(subCarrierRate)
    self.setCosinePhaseBoc(cosinePhaseBoc)
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)
    self.setGroup(group)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def centralFreq(self):
    return self.get("CentralFreq")

  def setCentralFreq(self, value):
    return self.set("CentralFreq", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def codeRate(self):
    return self.get("CodeRate")

  def setCodeRate(self, value):
    return self.set("CodeRate", value)

  def codeLengthMs(self):
    return self.get("CodeLengthMs")

  def setCodeLengthMs(self, value):
    return self.set("CodeLengthMs", value)

  def subCarrierRate(self):
    return self.get("SubCarrierRate")

  def setSubCarrierRate(self, value):
    return self.set("SubCarrierRate", value)

  def cosinePhaseBoc(self):
    return self.get("CosinePhaseBoc")

  def setCosinePhaseBoc(self, value):
    return self.set("CosinePhaseBoc", value)

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

#
# Set AWGN signal interference.
#
# Name          Type         Description
# ------------- ------------ ------------------------------------------------------------------------------------------
# Enabled       bool         Enable (true) or disable (false) the signal
# CentralFreq   double       Central frequency (Hz)
# Power         double       Power (dB), relative to transmitter reference power
# Bandwidth     double       Bandwidth (Hz)
# TransmitterId string       Transmitter unique identifier.
# SignalId      string       AWGN unique identifier.
# Seed          optional int Seed for the random number generator. Signals with the same seed will have the same shape.
# Group         optional int Group, if not using default group.
#

class SetIntTxAWGN(CommandBase):

  def __init__(self, enabled, centralFreq, power, bandwidth, transmitterId, signalId, seed = None, group = None):
    CommandBase.__init__(self, "SetIntTxAWGN")
    self.setEnabled(enabled)
    self.setCentralFreq(centralFreq)
    self.setPower(power)
    self.setBandwidth(bandwidth)
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)
    self.setSeed(seed)
    self.setGroup(group)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def centralFreq(self):
    return self.get("CentralFreq")

  def setCentralFreq(self, value):
    return self.set("CentralFreq", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def bandwidth(self):
    return self.get("Bandwidth")

  def setBandwidth(self, value):
    return self.set("Bandwidth", value)

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

  def seed(self):
    return self.get("Seed")

  def setSeed(self, value):
    return self.set("Seed", value)

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

#
# Get AWGN signal interference.
#
# Name          Type   Description
# ------------- ------ ------------------------------
# TransmitterId string Transmitter unique identifier.
# SignalId      string AWGN unique identifier.
#

class GetIntTxAWGN(CommandBase):

  def __init__(self, transmitterId, signalId):
    CommandBase.__init__(self, "GetIntTxAWGN")
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

#
# Result of GetIntTxAWGN.
#
# Name          Type         Description
# ------------- ------------ ------------------------------------------------------------------------------------------
# Enabled       bool         Enable (true) or disable (false) the signal
# CentralFreq   double       Central frequency (Hz)
# Power         double       Power (dB), relative to transmitter reference power
# Bandwidth     double       Bandwidth (Hz)
# TransmitterId string       Transmitter unique identifier.
# SignalId      string       AWGN unique identifier.
# Seed          optional int Seed for the random number generator. Signals with the same seed will have the same shape.
# Group         optional int Group, if not using default group.
#

class GetIntTxAWGNResult(CommandResult):

  def __init__(self, enabled, centralFreq, power, bandwidth, transmitterId, signalId, seed = None, group = None):
    CommandResult.__init__(self, "GetIntTxAWGNResult")
    self.setEnabled(enabled)
    self.setCentralFreq(centralFreq)
    self.setPower(power)
    self.setBandwidth(bandwidth)
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)
    self.setSeed(seed)
    self.setGroup(group)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def centralFreq(self):
    return self.get("CentralFreq")

  def setCentralFreq(self, value):
    return self.set("CentralFreq", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def bandwidth(self):
    return self.get("Bandwidth")

  def setBandwidth(self, value):
    return self.set("Bandwidth", value)

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

  def seed(self):
    return self.get("Seed")

  def setSeed(self, value):
    return self.set("Seed", value)

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

#
# Set IQ file signal interference.
#
# Name          Type         Description
# ------------- ------------ ---------------------------------------------------
# Enabled       bool         Enable (true) or disable (false) the signal
# CentralFreq   double       Central frequency (Hz)
# Power         double       Power (dB), relative to transmitter reference power
# Path          string       Path to the file to play
# TransmitterId string       Transmitter unique identifier.
# SignalId      string       AWGN unique identifier.
# Group         optional int Group, if not using default group.
#

class SetIntTxIqFile(CommandBase):

  def __init__(self, enabled, centralFreq, power, path, transmitterId, signalId, group = None):
    CommandBase.__init__(self, "SetIntTxIqFile")
    self.setEnabled(enabled)
    self.setCentralFreq(centralFreq)
    self.setPower(power)
    self.setPath(path)
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)
    self.setGroup(group)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def centralFreq(self):
    return self.get("CentralFreq")

  def setCentralFreq(self, value):
    return self.set("CentralFreq", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

#
# Get IQ file signal interference.
#
# Name          Type   Description
# ------------- ------ ------------------------------
# TransmitterId string Transmitter unique identifier.
# SignalId      string AWGN unique identifier.
#

class GetIntTxIqFile(CommandBase):

  def __init__(self, transmitterId, signalId):
    CommandBase.__init__(self, "GetIntTxIqFile")
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

#
# Result of GetIntTxIqFile.
#
# Name          Type         Description
# ------------- ------------ ---------------------------------------------------
# Enabled       bool         Enable (true) or disable (false) the signal
# CentralFreq   double       Central frequency (Hz)
# Power         double       Power (dB), relative to transmitter reference power
# Path          string       Path to the file to play
# TransmitterId string       Transmitter unique identifier.
# SignalId      string       AWGN unique identifier.
# Group         optional int Group, if not using default group.
#

class GetIntTxIqFileResult(CommandResult):

  def __init__(self, enabled, centralFreq, power, path, transmitterId, signalId, group = None):
    CommandResult.__init__(self, "GetIntTxIqFileResult")
    self.setEnabled(enabled)
    self.setCentralFreq(centralFreq)
    self.setPower(power)
    self.setPath(path)
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)
    self.setGroup(group)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def centralFreq(self):
    return self.get("CentralFreq")

  def setCentralFreq(self, value):
    return self.set("CentralFreq", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

  def group(self):
    return self.get("Group")

  def setGroup(self, value):
    return self.set("Group", value)

#
# Change whether a signal is enabled or disabled
#
# Name          Type   Description
# ------------- ------ ------------------------------------
# Enabled       bool   Whether the signal is enabled or not
# TransmitterId string Transmitter unique identifier.
# SignalId      string CW unique identifier.
#

class EnableIntTxSignal(CommandBase):

  def __init__(self, enabled, transmitterId, signalId):
    CommandBase.__init__(self, "EnableIntTxSignal")
    self.setEnabled(enabled)
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

#
# Removes the specified signal from the interference transmitter.
#
# Name          Type   Description
# ------------- ------ ------------------------------
# TransmitterId string Transmitter unique identifier.
# SignalId      string Signal unique identifier.
#

class RemoveSignalFromIntTx(CommandBase):

  def __init__(self, transmitterId, signalId):
    CommandBase.__init__(self, "RemoveSignalFromIntTx")
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

#
# Removes all signals from the interference transmitter.
#
# Name          Type   Description
# ------------- ------ ------------------------------
# TransmitterId string Transmitter unique identifier.
#

class RemoveAllSignalsFromIntTx(CommandBase):

  def __init__(self, transmitterId):
    CommandBase.__init__(self, "RemoveAllSignalsFromIntTx")
    self.setTransmitterId(transmitterId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

#
# Set streaming buffer size.
#
# Name Type Description
# ---- ---- -----------------------------
# Size int  Streaming buffer size in msec
#

class SetStreamingBuffer(CommandBase):

  def __init__(self, size):
    CommandBase.__init__(self, "SetStreamingBuffer")
    self.setSize(size)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE

  def size(self):
    return self.get("Size")

  def setSize(self, value):
    return self.set("Size", value)

#
# Get streaming buffer size.
#
#

class GetStreamingBuffer(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetStreamingBuffer")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of GetStreamingBuffer.
#
# Name Type Description
# ---- ---- -----------------------------
# Size int  Streaming buffer size in msec
#

class GetStreamingBufferResult(CommandResult):

  def __init__(self, size):
    CommandResult.__init__(self, "GetStreamingBufferResult")
    self.setSize(size)

  def isSuccess(self):
    return True

  def size(self):
    return self.get("Size")

  def setSize(self, value):
    return self.set("Size", value)

#
# Set engine latency.
#
# Name    Type Description
# ------- ---- ----------------------
# Latency int  Engine latency in msec
#

class SetEngineLatency(CommandBase):

  def __init__(self, latency):
    CommandBase.__init__(self, "SetEngineLatency")
    self.setLatency(latency)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE

  def latency(self):
    return self.get("Latency")

  def setLatency(self, value):
    return self.set("Latency", value)

#
# Get engine latency.
#
#

class GetEngineLatency(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetEngineLatency")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of GetEngineLatency.
#
# Name    Type Description
# ------- ---- ----------------------
# Latency int  Engine latency in msec
#

class GetEngineLatencyResult(CommandResult):

  def __init__(self, latency):
    CommandResult.__init__(self, "GetEngineLatencyResult")
    self.setLatency(latency)

  def isSuccess(self):
    return True

  def latency(self):
    return self.get("Latency")

  def setLatency(self, value):
    return self.set("Latency", value)

#
# HIL Tjoin. Value is in milliseconds.
#
# Name     Type Description
# -------- ---- -----------
# HilTjoin int  HIL Tjoin.
#

class SetHilTjoin(CommandBase):

  def __init__(self, hilTjoin):
    CommandBase.__init__(self, "SetHilTjoin")
    self.setHilTjoin(hilTjoin)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def hilTjoin(self):
    return self.get("HilTjoin")

  def setHilTjoin(self, value):
    return self.set("HilTjoin", value)

#
# Set listening port for sync time server.
#
# Name Type Description
# ---- ---- ---------------------
# Port int  Listening port number
#

class SetSyncServer(CommandBase):

  def __init__(self, port):
    CommandBase.__init__(self, "SetSyncServer")
    self.setPort(port)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE

  def port(self):
    return self.get("Port")

  def setPort(self, value):
    return self.set("Port", value)

#
# Set host and port to connect to sync time server.
#
# Name Type   Description
# ---- ------ ----------------
# Host string Host address
# Port int    Host port number
#

class SetSyncClient(CommandBase):

  def __init__(self, host, port):
    CommandBase.__init__(self, "SetSyncClient")
    self.setHost(host)
    self.setPort(port)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE

  def host(self):
    return self.get("Host")

  def setHost(self, value):
    return self.set("Host", value)

  def port(self):
    return self.get("Port")

  def setPort(self, value):
    return self.set("Port", value)

#
# Set time delay to start streaming, in order to allign PPS out Signal with RF.
# 2000 ms is a calibrated value.
#
# Name Type   Description
# ---- ------ ----------------------------------------
# Time double Time delay in msec (minimum is 500 msec)
#

class SetSyncTime(CommandBase):

  def __init__(self, time):
    CommandBase.__init__(self, "SetSyncTime")
    self.setTime(time)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def time(self):
    return self.get("Time")

  def setTime(self, value):
    return self.set("Time", value)

#
# Get time delay to start streaming, in order to allign PPS out Signal with RF.
# 2000 ms is a calibrated value.
#
#

class GetSyncTime(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetSyncTime")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of GetSyncTime.
#
# Name Type   Description
# ---- ------ ----------------------------------------
# Time double Time delay in msec (minimum is 500 msec)
#

class GetSyncTimeResult(CommandResult):

  def __init__(self, time):
    CommandResult.__init__(self, "GetSyncTimeResult")
    self.setTime(time)

  def isSuccess(self):
    return True

  def time(self):
    return self.get("Time")

  def setTime(self, value):
    return self.set("Time", value)

#
# Set time delay to start streaming after PPS synchronization. A value of 1500
# means the simulation will start streaming 1.5 sec after the PPS used for
# synchornization.
#
# Name Type   Description
# ---- ------ ----------------------------------------
# Time double Time delay in msec (minimum is 500 msec)
#

class SetSyncTimeMaster(CommandBase):

  def __init__(self, time):
    CommandBase.__init__(self, "SetSyncTimeMaster")
    self.setTime(time)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def time(self):
    return self.get("Time")

  def setTime(self, value):
    return self.set("Time", value)

#
# Get time delay to start streaming after PPS synchronization. A value of 1500
# means the simulation will start streaming 1.5 sec after the PPS used for
# synchornization.
#
#

class GetSyncTimeMaster(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetSyncTimeMaster")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of GetSyncTimeMaster.
#
# Name Type   Description
# ---- ------ ----------------------------------------
# Time double Time delay in msec (minimum is 500 msec)
#

class GetSyncTimeMasterResult(CommandResult):

  def __init__(self, time):
    CommandResult.__init__(self, "GetSyncTimeMasterResult")
    self.setTime(time)

  def isSuccess(self):
    return True

  def time(self):
    return self.get("Time")

  def setTime(self, value):
    return self.set("Time", value)

#
# If enabled, simulation stops when a command result fail.
#
# Name    Type Description
# ------- ---- ----------------------------------
# Enabled bool Enable stop when command fail flag
#

class StopWhenCommandFail(CommandBase):

  def __init__(self, enabled):
    CommandBase.__init__(self, "StopWhenCommandFail")
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# If enabled, simulation stops when a command result fail.
#
#

class IsSimStopWhenCommandFailEnabled(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "IsSimStopWhenCommandFailEnabled")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of IsSimStopWhenCommandFailEnabled.
#
# Name    Type Description
# ------- ---- ----------------------------------
# Enabled bool Enable stop when command fail flag
#

class IsSimStopWhenCommandFailEnabledResult(CommandResult):

  def __init__(self, enabled):
    CommandResult.__init__(self, "IsSimStopWhenCommandFailEnabledResult")
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# If enabled, master and all the slaves will stop if a slave stop.
#
# Name    Type Description
# ------- ---- ---------------------------------------
# Enabled bool Enable master stop when slave fail flag
#

class StopMasterWhenSlaveStop(CommandBase):

  def __init__(self, enabled):
    CommandBase.__init__(self, "StopMasterWhenSlaveStop")
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# If enabled, master and all the slaves will stop if a slave stop.
#
#

class IsStopMasterWhenSlaveStop(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "IsStopMasterWhenSlaveStop")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of IsStopMasterWhenSlaveStop.
#
# Name    Type Description
# ------- ---- ---------------------------------------
# Enabled bool Enable master stop when slave fail flag
#

class IsStopMasterWhenSlaveStopResult(CommandResult):

  def __init__(self, enabled):
    CommandResult.__init__(self, "IsStopMasterWhenSlaveStopResult")
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Set if map is show/hide in Analysis tab.
#
# Name Type Description
# ---- ---- -------------
# Show bool Show map flag
#

class ShowMapAnalysis(CommandBase):

  def __init__(self, show):
    CommandBase.__init__(self, "ShowMapAnalysis")
    self.setShow(show)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE

  def show(self):
    return self.get("Show")

  def setShow(self, value):
    return self.set("Show", value)

#
# Get if map is show/hide in Analysis tab.
#
#

class IsMapAnalysisEnabled(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "IsMapAnalysisEnabled")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of IsMapAnalysisEnabled.
#
# Name Type Description
# ---- ---- -------------
# Show bool Show map flag
#

class IsMapAnalysisEnabledResult(CommandResult):

  def __init__(self, show):
    CommandResult.__init__(self, "IsMapAnalysisEnabledResult")
    self.setShow(show)

  def isSuccess(self):
    return True

  def show(self):
    return self.get("Show")

  def setShow(self, value):
    return self.set("Show", value)

#
# Set if spectrums are show/hide.
#
# Name    Type Description
# ------- ---- ------------------
# Visible bool Show spectrum flag
#

class SetSpectrumVisible(CommandBase):

  def __init__(self, visible):
    CommandBase.__init__(self, "SetSpectrumVisible")
    self.setVisible(visible)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE

  def visible(self):
    return self.get("Visible")

  def setVisible(self, value):
    return self.set("Visible", value)

#
# Get if spectrums are show/hide.
#
#

class IsSpectrumVisible(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "IsSpectrumVisible")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of IsSpectrumVisible.
#
# Name    Type Description
# ------- ---- ------------------
# Visible bool Show spectrum flag
#

class IsSpectrumVisibleResult(CommandResult):

  def __init__(self, visible):
    CommandResult.__init__(self, "IsSpectrumVisibleResult")
    self.setVisible(visible)

  def isSuccess(self):
    return True

  def visible(self):
    return self.get("Visible")

  def setVisible(self, value):
    return self.set("Visible", value)

#
# Ask current simulator state. Will return a SimulatorStateResult.
#
#

class GetSimulatorState(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetSimulatorState")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# Wait until simulator has reached the specified substate unless simulator goes to error state or specified failure substate. Will return a SimulatorStateResult.
# Possible substates are :
# -None
# -Incomplete
# -Ready
# -Initializing
# -Armed
# -Streaming RF
# -Sync Slave
# -WF Init (Slave)
# -WF Init (Master)
# -HIL Sync
# -Sync Init
# -Sync PPS Reset
# -Sync Start Time
# -Sync Start
# -Error
#
# Name         Type   Description
# ------------ ------ ----------------------------------------------------------
# State        string Simulator sub state string.
# FailureState string Abort waiting if simulator goes to this sub state instead.
#

class WaitSimulatorState(CommandBase):

  def __init__(self, state, failureState):
    CommandBase.__init__(self, "WaitSimulatorState")
    self.setState(state)
    self.setFailureState(failureState)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def state(self):
    return self.get("State")

  def setState(self, value):
    return self.set("State", value)

  def failureState(self):
    return self.get("FailureState")

  def setFailureState(self, value):
    return self.set("FailureState", value)

#
# Abort the current WaitSimulatorState if any.
#
#

class AbortWaitSimulatorState(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "AbortWaitSimulatorState")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# Simulator State Result.
# Possible substates are :
# -None
# -Incomplete
# -Ready
# -Initializing
# -Armed
# -Streaming RF
# -Sync Slave
# -WF Init (Slave)
# -WF Init (Master)
# -HIL Sync
# -Sync Init
# -Sync PPS Reset
# -Sync Start Time
# -Sync Start
# -Error
#
# Name       Type              Description
# ---------- ----------------- ------------------------------------
# State      string            Simulator substate.
# Error      string            Error Message if state is Error.
# StateId    SimulatorState    Simulator State value as an enum.
# SubStateId SimulatorSubState Simulator SubState value as an enum.
#

class SimulatorStateResult(CommandResult):

  def __init__(self, state, error, stateId, subStateId):
    CommandResult.__init__(self, "SimulatorStateResult")
    self.setState(state)
    self.setError(error)
    self.setStateId(stateId)
    self.setSubStateId(subStateId)

  def isSuccess(self):
    return True

  def state(self):
    return self.get("State")

  def setState(self, value):
    return self.set("State", value)

  def error(self):
    return self.get("Error")

  def setError(self, value):
    return self.set("Error", value)

  def stateId(self):
    return self.get("StateId")

  def setStateId(self, value):
    return self.set("StateId", value)

  def subStateId(self):
    return self.get("SubStateId")

  def setSubStateId(self, value):
    return self.set("SubStateId", value)

#
# Begin receiving simulated vehicle informations. 
# During simulation, you must call RemoteSimulator.lastVehicleInfo to get current simulation statistics or RemoteSimulator.nextVehicleInfo to get pending simulation statistics
#
#

class BeginVehicleInfo(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "BeginVehicleInfo")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# End receiving simulated vehicle informations.
#
#

class EndVehicleInfo(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "EndVehicleInfo")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# Insert message to sequence.
#
# Name   Type   Description
# ------ ------ -----------------------------------------------------------------------------------------------------------
# Signal string Signal Name ("L2C" for example)
# Index  int    Message index in sequence where to insert. Set to -1 to append the message type at the end of the sequence.
# Type   int    Message type to insert
#

class MessageSequenceInsert(CommandBase):

  def __init__(self, signal, index, type):
    CommandBase.__init__(self, "MessageSequenceInsert")
    self.setSignal(signal)
    self.setIndex(index)
    self.setType(type)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def index(self):
    return self.get("Index")

  def setIndex(self, value):
    return self.set("Index", value)

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

#
# Remove message from sequence.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------------------------------
# Signal string Signal Name ("L2C" for example)
# Index  int    Message index in sequence where to remove. Set to -1 to remove last message in sequence.
#

class MessageSequenceRemove(CommandBase):

  def __init__(self, signal, index):
    CommandBase.__init__(self, "MessageSequenceRemove")
    self.setSignal(signal)
    self.setIndex(index)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def index(self):
    return self.get("Index")

  def setIndex(self, value):
    return self.set("Index", value)

#
# Swap 2 messages in sequence.
#
# Name   Type   Description
# ------ ------ -------------------------------
# Signal string Signal Name ("L2C" for example)
# IndexI int    Message index i in sequence.
# IndexJ int    Message index j in sequence.
#

class MessageSequenceSwap(CommandBase):

  def __init__(self, signal, indexI, indexJ):
    CommandBase.__init__(self, "MessageSequenceSwap")
    self.setSignal(signal)
    self.setIndexI(indexI)
    self.setIndexJ(indexJ)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def indexI(self):
    return self.get("IndexI")

  def setIndexI(self, value):
    return self.set("IndexI", value)

  def indexJ(self):
    return self.get("IndexJ")

  def setIndexJ(self, value):
    return self.set("IndexJ", value)

#
# Import a sequence file.
# A sequence file is a CSV with one message type per line.
#
# Name     Type   Description
# -------- ------ ------------------------------------------------
# Signal   string Signal Name ("L2C" for example)
# Filename string Path to the CSV file on the simulator's machine.
#

class MessageSequenceImport(CommandBase):

  def __init__(self, signal, filename):
    CommandBase.__init__(self, "MessageSequenceImport")
    self.setSignal(signal)
    self.setFilename(filename)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def filename(self):
    return self.get("Filename")

  def setFilename(self, value):
    return self.set("Filename", value)

#
# Export the signal's message sequence into a csv file.
#
# Name        Type   Description
# ----------- ------ -------------------------------------------------------------------------------------------------
# Signal      string Signal key ("L2C" for example).
# Path        string The full path to the csv file.
# Overwriting bool   Overwrites an existing file if set to true, returns an error if set to false and the file exists.
#

class ExportMessageSequenceToCSV(CommandBase):

  def __init__(self, signal, path, overwriting):
    CommandBase.__init__(self, "ExportMessageSequenceToCSV")
    self.setSignal(signal)
    self.setPath(path)
    self.setOverwriting(overwriting)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

  def overwriting(self):
    return self.get("Overwriting")

  def setOverwriting(self, value):
    return self.set("Overwriting", value)

#
# Get the messages sequence for the signal
#
# Name   Type   Description
# ------ ------ -------------------------------
# Signal string Signal Name ("L2C" for example)
#

class GetMessageSequence(CommandBase):

  def __init__(self, signal):
    CommandBase.__init__(self, "GetMessageSequence")
    self.setSignal(signal)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

#
# Result of GetMessageSequence.
#
# Name     Type      Description
# -------- --------- -------------------------------
# Signal   string    Signal Name ("L2C" for example)
# Sequence array int List of message type
#

class GetMessageSequenceResult(CommandResult):

  def __init__(self, signal, sequence):
    CommandResult.__init__(self, "GetMessageSequenceResult")
    self.setSignal(signal)
    self.setSequence(sequence)

  def isSuccess(self):
    return True

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def sequence(self):
    return self.get("Sequence")

  def setSequence(self, value):
    return self.set("Sequence", value)

#
# Set the almanac satellite id for subframe 1 (Parameter K described in ICD 4.2.3 Frame Layout).
#
# Name Type Description
# ---- ---- -----------------------
# Prn  int  Satellite PRN number
# K    int  Satellite K PRN number.
#

class SetGalileoFnavSatelliteK(CommandBase):

  def __init__(self, prn, k):
    CommandBase.__init__(self, "SetGalileoFnavSatelliteK")
    self.setPrn(prn)
    self.setK(k)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def prn(self):
    return self.get("Prn")

  def setPrn(self, value):
    return self.set("Prn", value)

  def k(self):
    return self.get("K")

  def setK(self, value):
    return self.set("K", value)

#
# Get the almanac satellite id for subframe 1 (Parameter K described in ICD 4.2.3 Frame Layout).
#
# Name Type Description
# ---- ---- --------------------
# Prn  int  Satellite PRN number
#

class GetGalileoFnavSatelliteK(CommandBase):

  def __init__(self, prn):
    CommandBase.__init__(self, "GetGalileoFnavSatelliteK")
    self.setPrn(prn)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def prn(self):
    return self.get("Prn")

  def setPrn(self, value):
    return self.set("Prn", value)

#
# Result of GetGalileoFnavSatelliteK.
#
# Name Type Description
# ---- ---- -----------------------
# Prn  int  Satellite PRN number
# K    int  Satellite K PRN number.
#

class GetGalileoFnavSatelliteKResult(CommandResult):

  def __init__(self, prn, k):
    CommandResult.__init__(self, "GetGalileoFnavSatelliteKResult")
    self.setPrn(prn)
    self.setK(k)

  def isSuccess(self):
    return True

  def prn(self):
    return self.get("Prn")

  def setPrn(self, value):
    return self.set("Prn", value)

  def k(self):
    return self.get("K")

  def setK(self, value):
    return self.set("K", value)

#
# Skydel special calibration function, internal use only
#
# Name          Type   Description
# ------------- ------ -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# SvId          int    SV ID for GPS, Galileo, BeiDou, GLONASS, QZSS and SBAS.
# Signal        string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "B3I", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S"
# EnableSV      bool   Enable/Disable multiplication by satellite and Navigation Message
# EnableDoppler bool   Enable/Disable Doppler Frequency and Phase offset
# PhaseOffet    double Carrier Phase Offset applied to Line Of Sight
#

class CalibFunction(CommandBase):

  def __init__(self, svId, signal, enableSV, enableDoppler, phaseOffet):
    CommandBase.__init__(self, "CalibFunction")
    self.setSvId(svId)
    self.setSignal(signal)
    self.setEnableSV(enableSV)
    self.setEnableDoppler(enableDoppler)
    self.setPhaseOffet(phaseOffet)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def enableSV(self):
    return self.get("EnableSV")

  def setEnableSV(self, value):
    return self.set("EnableSV", value)

  def enableDoppler(self):
    return self.get("EnableDoppler")

  def setEnableDoppler(self, value):
    return self.set("EnableDoppler", value)

  def phaseOffet(self):
    return self.get("PhaseOffet")

  def setPhaseOffet(self, value):
    return self.set("PhaseOffet", value)

#
# Clears the status log
#
#

class ClearStatusLog(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "ClearStatusLog")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# A log record level.
#

class LogLevel:
  Message = 0
  Warning = 1
  Error = 2

#
# Represents a record inside the status log.
#
# Name      Type              Description
# --------- ----------------- --------------------------------------------------
# TimeStamp datetime          The record time, in the host os time.
# State     SimulatorState    The simulator state at the time of the record.
# SubState  SimulatorSubState The simulator sub-state at the time of the record.
# Level     LogLevel          The record level.
# Message   string            The record message.
#

class LogRecord:

  def __init__(self, timeStamp, state, subState, level, message):
    self.TimeStamp = timeStamp
    self.State = state
    self.SubState = subState
    self.Level = level
    self.Message = message

#
# Returns the status log in a GetStatusLogResult and clears it
#
#

class GetStatusLog(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetStatusLog")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of GetStatusLog.
#
# Name    Type            Description
# ------- --------------- ----------------
# Records array LogRecord The log records.
#

class GetStatusLogResult(CommandResult):

  def __init__(self, records):
    CommandResult.__init__(self, "GetStatusLogResult")
    self.setRecords(records)

  def isSuccess(self):
    return True

  def records(self):
    return self.get("Records")

  def setRecords(self, value):
    return self.set("Records", value)

#
# Group multiple commands as one
#
# Name     Type               Description
# -------- ------------------ -----------------------
# Commands array command_base The commands to execute
#

class CommandGroup(CommandBase):

  def __init__(self, commands):
    CommandBase.__init__(self, "CommandGroup")
    self.setCommands(commands)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def commands(self):
    return self.get("Commands")

  def setCommands(self, value):
    return self.set("Commands", value)

#
# Get a list of visible satellites' SV IDs within a system, returns a GetVisibleSVResult
#
# Name   Type   Description
# ------ ------ -----------------------------------------------------------------------------------
# System string The system, can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class GetVisibleSV(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "GetVisibleSV")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Result of GetVisibleSV.
#
# Name   Type      Description
# ------ --------- -----------------------------------------------------------------------------------
# System string    The system, can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId   array int A list containing the visible satellites' SV IDs
#

class GetVisibleSVResult(CommandResult):

  def __init__(self, system, svId):
    CommandResult.__init__(self, "GetVisibleSVResult")
    self.setSystem(system)
    self.setSvId(svId)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Arm the system for further PPS synchronization instructions.
#
#

class ArmPPS(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "ArmPPS")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Ask Skydel to reset its PPS counter.
#
#

class WaitAndResetPPS(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "WaitAndResetPPS")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

#
# Start the simulation at the given PPS count.
#
# Name Type Description
# ---- ---- -------------------------------------------------------------
# Msec int  The number of ms after PPS to wait before starting simulation
#

class StartPPS(CommandBase):

  def __init__(self, msec):
    CommandBase.__init__(self, "StartPPS")
    self.setMsec(msec)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

  def msec(self):
    return self.get("Msec")

  def setMsec(self, value):
    return self.set("Msec", value)

#
# Enable or disable a satellite for this constellation.
#
# Name    Type   Description
# ------- ------ ------------------------------------------------------------------------------------------------------
# System  string The satellite's constellation. Can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId    int    The satellite's SV ID (use 0 for all SVs).
# Enabled bool   The satellite will be present/absent from the constellation
#

class EnableSV(CommandBase):

  def __init__(self, system, svId, enabled):
    CommandBase.__init__(self, "EnableSV")
    self.setSystem(system)
    self.setSvId(svId)
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Get whether a satellite is enabled or disabled for this constellation.
#
# Name   Type   Description
# ------ ------ ------------------------------------------------------------------------------------------------------
# System string The satellite's constellation. Can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId   int    The satellite's SV ID (use 0 for all SVs).
#

class IsSVEnabled(CommandBase):

  def __init__(self, system, svId):
    CommandBase.__init__(self, "IsSVEnabled")
    self.setSystem(system)
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Result of IsSVEnabled.
#
# Name    Type   Description
# ------- ------ ------------------------------------------------------------------------------------------------------
# System  string The satellite's constellation. Can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId    int    The satellite's SV ID (use 0 for all SVs).
# Enabled bool   The satellite will be present/absent from the constellation
#

class IsSVEnabledResult(CommandResult):

  def __init__(self, system, svId, enabled):
    CommandResult.__init__(self, "IsSVEnabledResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Enable or disable each satellite for this constellation.
#
# Name    Type       Description
# ------- ---------- ------------------------------------------------------------------------------------------------------
# System  string     The satellites' constellation. Can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Enabled array bool Array of present/absent flags for the constellation
#

class EnableEachSV(CommandBase):

  def __init__(self, system, enabled):
    CommandBase.__init__(self, "EnableEachSV")
    self.setSystem(system)
    self.setEnabled(enabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Get whether each satellite is enabled or disabled for this constellation.
#
# Name   Type   Description
# ------ ------ ------------------------------------------------------------------------------------------------------
# System string The satellites' constellation. Can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class IsEachSVEnabled(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "IsEachSVEnabled")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Result of IsEachSVEnabled.
#
# Name    Type       Description
# ------- ---------- ------------------------------------------------------------------------------------------------------
# System  string     The satellites' constellation. Can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Enabled array bool Array of present/absent flags for the constellation
#

class IsEachSVEnabledResult(CommandResult):

  def __init__(self, system, enabled):
    CommandResult.__init__(self, "IsEachSVEnabledResult")
    self.setSystem(system)
    self.setEnabled(enabled)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

#
# Set the enabled L1C CNAV2 pages
#
# Name     Type      Description
# -------- --------- -----------------
# Messages array int The enabled pages
#

class EnableCnav2Pages(CommandBase):

  def __init__(self, messages):
    CommandBase.__init__(self, "EnableCnav2Pages")
    self.setMessages(messages)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def messages(self):
    return self.get("Messages")

  def setMessages(self, value):
    return self.set("Messages", value)

#
# Get the enabled L1C CNAV2 pages
#
#

class GetCnav2PagesEnabled(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetCnav2PagesEnabled")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetCnav2PagesEnabled.
#
# Name     Type      Description
# -------- --------- -----------------
# Messages array int The enabled pages
#

class GetCnav2PagesEnabledResult(CommandResult):

  def __init__(self, messages):
    CommandResult.__init__(self, "GetCnav2PagesEnabledResult")
    self.setMessages(messages)

  def isSuccess(self):
    return True

  def messages(self):
    return self.get("Messages")

  def setMessages(self, value):
    return self.set("Messages", value)

#
# Set the enabled SBAS messages. Message 63 is always enabled
#
# Name     Type      Description
# -------- --------- --------------------
# Messages array int The enabled messages
#

class EnableSbasMessages(CommandBase):

  def __init__(self, messages):
    CommandBase.__init__(self, "EnableSbasMessages")
    self.setMessages(messages)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def messages(self):
    return self.get("Messages")

  def setMessages(self, value):
    return self.set("Messages", value)

#
# Get the enabled SBAS messages. Message 63 is always enabled
#
#

class GetSbasMessagesEnabled(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetSbasMessagesEnabled")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of GetSbasMessagesEnabled.
#
# Name     Type      Description
# -------- --------- --------------------
# Messages array int The enabled messages
#

class GetSbasMessagesEnabledResult(CommandResult):

  def __init__(self, messages):
    CommandResult.__init__(self, "GetSbasMessagesEnabledResult")
    self.setMessages(messages)

  def isSuccess(self):
    return True

  def messages(self):
    return self.get("Messages")

  def setMessages(self, value):
    return self.set("Messages", value)

#
# Set the SBAS message update interval.
#
# Name           Type Description
# -------------- ---- -----------------------------------------------------------------------------------------------
# Message        int  The message type.
# UpdateInterval int  The message update interval in seconds. Accepted range is [6..300] and must be a multiple of 6.
#

class SetSbasMessageUpdateInterval(CommandBase):

  def __init__(self, message, updateInterval):
    CommandBase.__init__(self, "SetSbasMessageUpdateInterval")
    self.setMessage(message)
    self.setUpdateInterval(updateInterval)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def message(self):
    return self.get("Message")

  def setMessage(self, value):
    return self.set("Message", value)

  def updateInterval(self):
    return self.get("UpdateInterval")

  def setUpdateInterval(self, value):
    return self.set("UpdateInterval", value)

#
# Get the SBAS message update interval.
#
# Name    Type Description
# ------- ---- -----------------
# Message int  The message type.
#

class GetSbasMessageUpdateInterval(CommandBase):

  def __init__(self, message):
    CommandBase.__init__(self, "GetSbasMessageUpdateInterval")
    self.setMessage(message)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def message(self):
    return self.get("Message")

  def setMessage(self, value):
    return self.set("Message", value)

#
# Result of GetSbasMessageUpdateInterval.
#
# Name           Type Description
# -------------- ---- -----------------------------------------------------------------------------------------------
# Message        int  The message type.
# UpdateInterval int  The message update interval in seconds. Accepted range is [6..300] and must be a multiple of 6.
#

class GetSbasMessageUpdateIntervalResult(CommandResult):

  def __init__(self, message, updateInterval):
    CommandResult.__init__(self, "GetSbasMessageUpdateIntervalResult")
    self.setMessage(message)
    self.setUpdateInterval(updateInterval)

  def isSuccess(self):
    return True

  def message(self):
    return self.get("Message")

  def setMessage(self, value):
    return self.set("Message", value)

  def updateInterval(self):
    return self.get("UpdateInterval")

  def setUpdateInterval(self, value):
    return self.set("UpdateInterval", value)

#
# Export the SBAS message sequence into a csv file.
#
# Name        Type   Description
# ----------- ------ -----------------------------------------------------------------------------------------------
# Path        string The full path to the csv file.
# Overwriting bool   Overwrite an existing file if set to true, return an error if set to false and the file exists.
#

class ExportSbasMessageSequence(CommandBase):

  def __init__(self, path, overwriting):
    CommandBase.__init__(self, "ExportSbasMessageSequence")
    self.setPath(path)
    self.setOverwriting(overwriting)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

  def overwriting(self):
    return self.get("Overwriting")

  def setOverwriting(self, value):
    return self.set("Overwriting", value)

#
# Set the systems monitored by SBAS.
#
# Name    Type         Description
# ------- ------------ ------------------------------------------------------------------------------------
# Systems array string A list containing the name of monitored systems, only "GPS" and "SBAS" are supported
#

class SetSbasMonitoredSystems(CommandBase):

  def __init__(self, systems):
    CommandBase.__init__(self, "SetSbasMonitoredSystems")
    self.setSystems(systems)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def systems(self):
    return self.get("Systems")

  def setSystems(self, value):
    return self.set("Systems", value)

#
# Get the systems monitored by SBAS.
#
#

class GetSbasMonitoredSystems(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetSbasMonitoredSystems")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetSbasMonitoredSystems.
#
# Name    Type         Description
# ------- ------------ ------------------------------------------------------------------------------------
# Systems array string A list containing the name of monitored systems, only "GPS" and "SBAS" are supported
#

class GetSbasMonitoredSystemsResult(CommandResult):

  def __init__(self, systems):
    CommandResult.__init__(self, "GetSbasMonitoredSystemsResult")
    self.setSystems(systems)

  def isSuccess(self):
    return True

  def systems(self):
    return self.get("Systems")

  def setSystems(self, value):
    return self.set("Systems", value)

#
# Set the UDREI value transmitted by SBAS for the satellite of the specified constellation.
#
# Name   Type   Description
# ------ ------ ---------------------------------------------------------------
# System string "GPS" or "SBAS".
# SvId   int    The satellite's SV ID (use 0 to apply modification to all SVs).
# Udrei  int    The UDREI value.
#

class SetUdreiForSV(CommandBase):

  def __init__(self, system, svId, udrei):
    CommandBase.__init__(self, "SetUdreiForSV")
    self.setSystem(system)
    self.setSvId(svId)
    self.setUdrei(udrei)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def udrei(self):
    return self.get("Udrei")

  def setUdrei(self, value):
    return self.set("Udrei", value)

#
# Get the UDREI value transmitted by SBAS for the satellite of the specified constellation.
#
# Name   Type   Description
# ------ ------ ---------------------------------------------------------------
# System string "GPS" or "SBAS".
# SvId   int    The satellite's SV ID (use 0 to apply modification to all SVs).
#

class GetUdreiForSV(CommandBase):

  def __init__(self, system, svId):
    CommandBase.__init__(self, "GetUdreiForSV")
    self.setSystem(system)
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Result of GetUdreiForSV.
#
# Name   Type   Description
# ------ ------ ---------------------------------------------------------------
# System string "GPS" or "SBAS".
# SvId   int    The satellite's SV ID (use 0 to apply modification to all SVs).
# Udrei  int    The UDREI value.
#

class GetUdreiForSVResult(CommandResult):

  def __init__(self, system, svId, udrei):
    CommandResult.__init__(self, "GetUdreiForSVResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setUdrei(udrei)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def udrei(self):
    return self.get("Udrei")

  def setUdrei(self, value):
    return self.set("Udrei", value)

#
# Set the UDREI value transmitted by SBAS for all satellites of the specified constellation.
#
# Name   Type      Description
# ------ --------- --------------------------------------------------------------------------------------------------------------------------
# System string    "GPS" or "SBAS".
# Udreis array int UDREI value to set for each satellite. Zero based index (index 0 => UDREI for SV ID 1, index 1 => UDREI for SV ID 2, etc).
#

class SetUdreiForEachSV(CommandBase):

  def __init__(self, system, udreis):
    CommandBase.__init__(self, "SetUdreiForEachSV")
    self.setSystem(system)
    self.setUdreis(udreis)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def udreis(self):
    return self.get("Udreis")

  def setUdreis(self, value):
    return self.set("Udreis", value)

#
# Get the UDREI value transmitted by SBAS for all satellites of the specified constellation.
#
# Name   Type   Description
# ------ ------ ----------------
# System string "GPS" or "SBAS".
#

class GetUdreiForEachSV(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "GetUdreiForEachSV")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Result of GetUdreiForEachSV.
#
# Name   Type      Description
# ------ --------- --------------------------------------------------------------------------------------------------------------------------
# System string    "GPS" or "SBAS".
# Udreis array int UDREI value to set for each satellite. Zero based index (index 0 => UDREI for SV ID 1, index 1 => UDREI for SV ID 2, etc).
#

class GetUdreiForEachSVResult(CommandResult):

  def __init__(self, system, udreis):
    CommandResult.__init__(self, "GetUdreiForEachSVResult")
    self.setSystem(system)
    self.setUdreis(udreis)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def udreis(self):
    return self.get("Udreis")

  def setUdreis(self, value):
    return self.set("Udreis", value)

#
# Possible values for antenna patterns
#

class AntennaPatternType:
  Default = 0
  AntennaNone = 1
  Custom = 2

#
# The different GNSS bands
#

class GNSSBand:
  L1 = 0
  L2 = 1
  L5 = 2
  E6 = 3

#
# Ask the master to broadcast its configuration to all slaves.
#
#

class BroadcastConfig(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "BroadcastConfig")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Cancel the current configuration broadcast if any.
#
#

class CancelBroadcastConfig(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "CancelBroadcastConfig")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Set wether the master should send its configuration to every slave when simulation start.
#
# Name             Type Description
# ---------------- ---- --------------------------------------------------------------
# BroadcastOnStart bool True to broadcast the configuration on start, false otherwise.
#

class SetConfigBroadcastOnStart(CommandBase):

  def __init__(self, broadcastOnStart):
    CommandBase.__init__(self, "SetConfigBroadcastOnStart")
    self.setBroadcastOnStart(broadcastOnStart)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def broadcastOnStart(self):
    return self.get("BroadcastOnStart")

  def setBroadcastOnStart(self, value):
    return self.set("BroadcastOnStart", value)

#
# Get wether the master should send its configuration to every slave when simulation start.
#
#

class GetConfigBroadcastOnStart(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetConfigBroadcastOnStart")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetConfigBroadcastOnStart.
#
# Name             Type Description
# ---------------- ---- --------------------------------------------------------------
# BroadcastOnStart bool True to broadcast the configuration on start, false otherwise.
#

class GetConfigBroadcastOnStartResult(CommandResult):

  def __init__(self, broadcastOnStart):
    CommandResult.__init__(self, "GetConfigBroadcastOnStartResult")
    self.setBroadcastOnStart(broadcastOnStart)

  def isSuccess(self):
    return True

  def broadcastOnStart(self):
    return self.get("BroadcastOnStart")

  def setBroadcastOnStart(self, value):
    return self.set("BroadcastOnStart", value)

#
# The different kinds of filters for configuration.
#

class ConfigFilter:
  Radios = 0
  OutputAndRadios = 1
  VehicleMotion = 2
  VehicleAntenna = 3
  Interference = 4
  PlugIn = 5

#
# Set the filter for configuration broadcast.
#
# Name   Type               Description
# ------ ------------------ ------------------------------------------------------------------------------
# Filter array ConfigFilter Every configuration section set in this array will be excluded from broadcast.
#

class SetConfigBroadcastFilter(CommandBase):

  def __init__(self, filter):
    CommandBase.__init__(self, "SetConfigBroadcastFilter")
    self.setFilter(filter)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def filter(self):
    return self.get("Filter")

  def setFilter(self, value):
    return self.set("Filter", value)

#
# Get the filter for configuration broadcast.
#
#

class GetConfigBroadcastFilter(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetConfigBroadcastFilter")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetConfigBroadcastFilter.
#
# Name   Type               Description
# ------ ------------------ ------------------------------------------------------------------------------
# Filter array ConfigFilter Every configuration section set in this array will be excluded from broadcast.
#

class GetConfigBroadcastFilterResult(CommandResult):

  def __init__(self, filter):
    CommandResult.__init__(self, "GetConfigBroadcastFilterResult")
    self.setFilter(filter)

  def isSuccess(self):
    return True

  def filter(self):
    return self.get("Filter")

  def setFilter(self, value):
    return self.set("Filter", value)

#
# Set the satellite pseudorange noise constant offset.
#
# Name    Type   Description
# ------- ------ ----------------------------------------------------------------
# System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId    int    Satellite SV ID.
# Enabled bool   If true, the offset is enabled (applied)
# Offset  double The constant offset in metters
#

class SetPseudorangeNoiseOffsetForSV(CommandBase):

  def __init__(self, system, svId, enabled, offset):
    CommandBase.__init__(self, "SetPseudorangeNoiseOffsetForSV")
    self.setSystem(system)
    self.setSvId(svId)
    self.setEnabled(enabled)
    self.setOffset(offset)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Get the satellite pseudorange noise constant offset.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId   int    Satellite SV ID.
#

class GetPseudorangeNoiseOffsetForSV(CommandBase):

  def __init__(self, system, svId):
    CommandBase.__init__(self, "GetPseudorangeNoiseOffsetForSV")
    self.setSystem(system)
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Result of GetPseudorangeNoiseOffsetForSV.
#
# Name    Type   Description
# ------- ------ ----------------------------------------------------------------
# System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId    int    Satellite SV ID.
# Enabled bool   If true, the offset is enabled (applied)
# Offset  double The constant offset in metters
#

class GetPseudorangeNoiseOffsetForSVResult(CommandResult):

  def __init__(self, system, svId, enabled, offset):
    CommandResult.__init__(self, "GetPseudorangeNoiseOffsetForSVResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setEnabled(enabled)
    self.setOffset(offset)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Set the satellite pseudorange noise constant offset for all satellites.
#
# Name    Type         Description
# ------- ------------ ----------------------------------------------------------------
# System  string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Enabled array bool   If true, the offset is enabled (applied)
# Offset  array double The constant offset in metters
#

class SetPseudorangeNoiseOffsetForEachSV(CommandBase):

  def __init__(self, system, enabled, offset):
    CommandBase.__init__(self, "SetPseudorangeNoiseOffsetForEachSV")
    self.setSystem(system)
    self.setEnabled(enabled)
    self.setOffset(offset)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Please note the command SetAllSatellitesPseudorangeNoiseOffset is deprecated since 21.3. You may use SetPseudorangeNoiseOffsetForEachSV.
# 
# Set the satellite pseudorange noise constant offset for all satellites.
#
# Name    Type         Description
# ------- ------------ ----------------------------------------------------------------
# System  string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Enabled array bool   If true, the offset is enabled (applied)
# Offset  array double The constant offset in metters
#

class SetAllSatellitesPseudorangeNoiseOffset(CommandBase):

  def __init__(self, system, enabled, offset):
    CommandBase.__init__(self, "SetAllSatellitesPseudorangeNoiseOffset")
    self.setSystem(system)
    self.setEnabled(enabled)
    self.setOffset(offset)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Get the satellite pseudorange noise constant offset for all satellites.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class GetPseudorangeNoiseOffsetForEachSV(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "GetPseudorangeNoiseOffsetForEachSV")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Please note the command GetAllSatellitesPseudorangeNoiseOffset is deprecated since 21.3. You may use GetPseudorangeNoiseOffsetForEachSV.
# 
# Get the satellite pseudorange noise constant offset for all satellites.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class GetAllSatellitesPseudorangeNoiseOffset(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "GetAllSatellitesPseudorangeNoiseOffset")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Result of GetPseudorangeNoiseOffsetForEachSV.
#
# Name    Type         Description
# ------- ------------ ----------------------------------------------------------------
# System  string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Enabled array bool   If true, the offset is enabled (applied)
# Offset  array double The constant offset in metters
#

class GetPseudorangeNoiseOffsetForEachSVResult(CommandResult):

  def __init__(self, system, enabled, offset):
    CommandResult.__init__(self, "GetPseudorangeNoiseOffsetForEachSVResult")
    self.setSystem(system)
    self.setEnabled(enabled)
    self.setOffset(offset)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Set the satellite pseudorange noise sine wave attributes.
#
# Name      Type   Description
# --------- ------ ----------------------------------------------------------------
# System    string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId      int    The satellite's SV ID
# SineWave  int    Sine wave number (0 or 1)
# Enabled   bool   If true, sine wave is enabled
# Amplitude double Sine wave amplitude in meters
# Period    int    Sine wave period in seconds (minimum 3 seconds)
# Offset    double Phase offset in radians
#

class SetPseudorangeNoiseSineWaveForSV(CommandBase):

  def __init__(self, system, svId, sineWave, enabled, amplitude, period, offset):
    CommandBase.__init__(self, "SetPseudorangeNoiseSineWaveForSV")
    self.setSystem(system)
    self.setSvId(svId)
    self.setSineWave(sineWave)
    self.setEnabled(enabled)
    self.setAmplitude(amplitude)
    self.setPeriod(period)
    self.setOffset(offset)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def sineWave(self):
    return self.get("SineWave")

  def setSineWave(self, value):
    return self.set("SineWave", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def amplitude(self):
    return self.get("Amplitude")

  def setAmplitude(self, value):
    return self.set("Amplitude", value)

  def period(self):
    return self.get("Period")

  def setPeriod(self, value):
    return self.set("Period", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Get the satellite pseudorange noise sine wave attributes.
#
# Name     Type   Description
# -------- ------ ----------------------------------------------------------------
# System   string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId     int    The satellite's SV ID
# SineWave int    Sine wave number (0 or 1)
#

class GetPseudorangeNoiseSineWaveForSV(CommandBase):

  def __init__(self, system, svId, sineWave):
    CommandBase.__init__(self, "GetPseudorangeNoiseSineWaveForSV")
    self.setSystem(system)
    self.setSvId(svId)
    self.setSineWave(sineWave)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def sineWave(self):
    return self.get("SineWave")

  def setSineWave(self, value):
    return self.set("SineWave", value)

#
# Result of GetPseudorangeNoiseSineWaveForSV.
#
# Name      Type   Description
# --------- ------ ----------------------------------------------------------------
# System    string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId      int    The satellite's SV ID
# SineWave  int    Sine wave number (0 or 1)
# Enabled   bool   If true, sine wave is enabled
# Amplitude double Sine wave amplitude in meters
# Period    int    Sine wave period in seconds (minimum 3 seconds)
# Offset    double Phase offset in radians
#

class GetPseudorangeNoiseSineWaveForSVResult(CommandResult):

  def __init__(self, system, svId, sineWave, enabled, amplitude, period, offset):
    CommandResult.__init__(self, "GetPseudorangeNoiseSineWaveForSVResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setSineWave(sineWave)
    self.setEnabled(enabled)
    self.setAmplitude(amplitude)
    self.setPeriod(period)
    self.setOffset(offset)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def sineWave(self):
    return self.get("SineWave")

  def setSineWave(self, value):
    return self.set("SineWave", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def amplitude(self):
    return self.get("Amplitude")

  def setAmplitude(self, value):
    return self.set("Amplitude", value)

  def period(self):
    return self.get("Period")

  def setPeriod(self, value):
    return self.set("Period", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Set the satellite pseudorange noise sine wave attributes for all satellites.
#
# Name      Type         Description
# --------- ------------ ----------------------------------------------------------------
# System    string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SineWave  int          Sine wave number (0 or 1)
# Enabled   array bool   If true, sine wave is enabled
# Amplitude array double Sine wave amplitude in meters
# Period    array int    sine wave period in seconds
# Offset    array double Phase offset in radians
#

class SetPseudorangeNoiseSineWaveForEachSV(CommandBase):

  def __init__(self, system, sineWave, enabled, amplitude, period, offset):
    CommandBase.__init__(self, "SetPseudorangeNoiseSineWaveForEachSV")
    self.setSystem(system)
    self.setSineWave(sineWave)
    self.setEnabled(enabled)
    self.setAmplitude(amplitude)
    self.setPeriod(period)
    self.setOffset(offset)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def sineWave(self):
    return self.get("SineWave")

  def setSineWave(self, value):
    return self.set("SineWave", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def amplitude(self):
    return self.get("Amplitude")

  def setAmplitude(self, value):
    return self.set("Amplitude", value)

  def period(self):
    return self.get("Period")

  def setPeriod(self, value):
    return self.set("Period", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Please note the command SetAllSatellitesPseudorangeNoiseSineWave is deprecated since 21.3. You may use SetPseudorangeNoiseSineWaveForEachSV.
# 
# Set the satellite pseudorange noise sine wave attributes for all satellites.
#
# Name      Type         Description
# --------- ------------ ----------------------------------------------------------------
# System    string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SineWave  int          Sine wave number (0 or 1)
# Enabled   array bool   If true, sine wave is enabled
# Amplitude array double Sine wave amplitude in meters
# Period    array int    sine wave period in seconds
# Offset    array double Phase offset in radians
#

class SetAllSatellitesPseudorangeNoiseSineWave(CommandBase):

  def __init__(self, system, sineWave, enabled, amplitude, period, offset):
    CommandBase.__init__(self, "SetAllSatellitesPseudorangeNoiseSineWave")
    self.setSystem(system)
    self.setSineWave(sineWave)
    self.setEnabled(enabled)
    self.setAmplitude(amplitude)
    self.setPeriod(period)
    self.setOffset(offset)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def sineWave(self):
    return self.get("SineWave")

  def setSineWave(self, value):
    return self.set("SineWave", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def amplitude(self):
    return self.get("Amplitude")

  def setAmplitude(self, value):
    return self.set("Amplitude", value)

  def period(self):
    return self.get("Period")

  def setPeriod(self, value):
    return self.set("Period", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Get the satellite pseudorange noise sine wave attributes for all satellites.
#
# Name     Type   Description
# -------- ------ ----------------------------------------------------------------
# System   string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SineWave int    Sine wave number (0 or 1)
#

class GetPseudorangeNoiseSineWaveForEachSV(CommandBase):

  def __init__(self, system, sineWave):
    CommandBase.__init__(self, "GetPseudorangeNoiseSineWaveForEachSV")
    self.setSystem(system)
    self.setSineWave(sineWave)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def sineWave(self):
    return self.get("SineWave")

  def setSineWave(self, value):
    return self.set("SineWave", value)

#
# Please note the command GetAllSatellitesPseudorangeNoiseSineWave is deprecated since 21.3. You may use GetPseudorangeNoiseSineWaveForEachSV.
# 
# Get the satellite pseudorange noise sine wave attributes for all satellites.
#
# Name     Type   Description
# -------- ------ ----------------------------------------------------------------
# System   string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SineWave int    Sine wave number (0 or 1)
#

class GetAllSatellitesPseudorangeNoiseSineWave(CommandBase):

  def __init__(self, system, sineWave):
    CommandBase.__init__(self, "GetAllSatellitesPseudorangeNoiseSineWave")
    self.setSystem(system)
    self.setSineWave(sineWave)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def sineWave(self):
    return self.get("SineWave")

  def setSineWave(self, value):
    return self.set("SineWave", value)

#
# Result of GetPseudorangeNoiseSineWaveForEachSV.
#
# Name      Type         Description
# --------- ------------ ----------------------------------------------------------------
# System    string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SineWave  int          Sine wave number (0 or 1)
# Enabled   array bool   If true, sine wave is enabled
# Amplitude array double Sine wave amplitude in meters
# Period    array int    sine wave period in seconds
# Offset    array double Phase offset in radians
#

class GetPseudorangeNoiseSineWaveForEachSVResult(CommandResult):

  def __init__(self, system, sineWave, enabled, amplitude, period, offset):
    CommandResult.__init__(self, "GetPseudorangeNoiseSineWaveForEachSVResult")
    self.setSystem(system)
    self.setSineWave(sineWave)
    self.setEnabled(enabled)
    self.setAmplitude(amplitude)
    self.setPeriod(period)
    self.setOffset(offset)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def sineWave(self):
    return self.get("SineWave")

  def setSineWave(self, value):
    return self.set("SineWave", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def amplitude(self):
    return self.get("Amplitude")

  def setAmplitude(self, value):
    return self.set("Amplitude", value)

  def period(self):
    return self.get("Period")

  def setPeriod(self, value):
    return self.set("Period", value)

  def offset(self):
    return self.get("Offset")

  def setOffset(self, value):
    return self.set("Offset", value)

#
# Set the satellite pseudorange noise Gauss-Markov process attributes.
#
# Name    Type   Description
# ------- ------ ----------------------------------------------------------------
# System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId    int    Satellite SV ID.
# Process int    Gauss-Markov Process number (0 or 1)
# Enabled bool   If true, Gauss-Markov process is enabled
# Sigma   double Standard devition in meters [0..5000]
# Time    double Time constant [1..2000]
# Seed    int    Random seed
#

class SetPseudorangeNoiseGaussMarkovForSV(CommandBase):

  def __init__(self, system, svId, process, enabled, sigma, time, seed):
    CommandBase.__init__(self, "SetPseudorangeNoiseGaussMarkovForSV")
    self.setSystem(system)
    self.setSvId(svId)
    self.setProcess(process)
    self.setEnabled(enabled)
    self.setSigma(sigma)
    self.setTime(time)
    self.setSeed(seed)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def process(self):
    return self.get("Process")

  def setProcess(self, value):
    return self.set("Process", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def sigma(self):
    return self.get("Sigma")

  def setSigma(self, value):
    return self.set("Sigma", value)

  def time(self):
    return self.get("Time")

  def setTime(self, value):
    return self.set("Time", value)

  def seed(self):
    return self.get("Seed")

  def setSeed(self, value):
    return self.set("Seed", value)

#
# Get the satellite pseudorange noise Gauss-Markov process attributes.
#
# Name    Type   Description
# ------- ------ ----------------------------------------------------------------
# System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId    int    Satellite SV ID.
# Process int    Gauss-Markov Process number (0 or 1)
#

class GetPseudorangeNoiseGaussMarkovForSV(CommandBase):

  def __init__(self, system, svId, process):
    CommandBase.__init__(self, "GetPseudorangeNoiseGaussMarkovForSV")
    self.setSystem(system)
    self.setSvId(svId)
    self.setProcess(process)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def process(self):
    return self.get("Process")

  def setProcess(self, value):
    return self.set("Process", value)

#
# Result of GetPseudorangeNoiseGaussMarkovForSV.
#
# Name    Type   Description
# ------- ------ ----------------------------------------------------------------
# System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId    int    Satellite SV ID.
# Process int    Gauss-Markov Process number (0 or 1)
# Enabled bool   If true, Gauss-Markov process is enabled
# Sigma   double Standard devition in meters [0..5000]
# Time    double Time constant [1..2000]
# Seed    int    Random seed
#

class GetPseudorangeNoiseGaussMarkovForSVResult(CommandResult):

  def __init__(self, system, svId, process, enabled, sigma, time, seed):
    CommandResult.__init__(self, "GetPseudorangeNoiseGaussMarkovForSVResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setProcess(process)
    self.setEnabled(enabled)
    self.setSigma(sigma)
    self.setTime(time)
    self.setSeed(seed)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def process(self):
    return self.get("Process")

  def setProcess(self, value):
    return self.set("Process", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def sigma(self):
    return self.get("Sigma")

  def setSigma(self, value):
    return self.set("Sigma", value)

  def time(self):
    return self.get("Time")

  def setTime(self, value):
    return self.set("Time", value)

  def seed(self):
    return self.get("Seed")

  def setSeed(self, value):
    return self.set("Seed", value)

#
# Set the satellite pseudorange noise Gauss-Markov process attributes for all satellites.
#
# Name    Type         Description
# ------- ------------ ----------------------------------------------------------------
# System  string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Process int          Gauss-Markov Process number (0 or 1)
# Enabled array bool   If true, Gauss-Markov process is enabled
# Sigma   array double Standard devition
# Time    array double Time constant
# Seed    array int    Random seed
#

class SetPseudorangeNoiseGaussMarkovForEachSV(CommandBase):

  def __init__(self, system, process, enabled, sigma, time, seed):
    CommandBase.__init__(self, "SetPseudorangeNoiseGaussMarkovForEachSV")
    self.setSystem(system)
    self.setProcess(process)
    self.setEnabled(enabled)
    self.setSigma(sigma)
    self.setTime(time)
    self.setSeed(seed)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def process(self):
    return self.get("Process")

  def setProcess(self, value):
    return self.set("Process", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def sigma(self):
    return self.get("Sigma")

  def setSigma(self, value):
    return self.set("Sigma", value)

  def time(self):
    return self.get("Time")

  def setTime(self, value):
    return self.set("Time", value)

  def seed(self):
    return self.get("Seed")

  def setSeed(self, value):
    return self.set("Seed", value)

#
# Please note the command SetAllSatellitesPseudorangeNoiseGaussMarkov is deprecated since 21.3. You may use SetPseudorangeNoiseGaussMarkovForEachSV.
# 
# Set the satellite pseudorange noise Gauss-Markov process attributes for all satellites.
#
# Name    Type         Description
# ------- ------------ ----------------------------------------------------------------
# System  string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Process int          Gauss-Markov Process number (0 or 1)
# Enabled array bool   If true, Gauss-Markov process is enabled
# Sigma   array double Standard devition
# Time    array double Time constant
# Seed    array int    Random seed
#

class SetAllSatellitesPseudorangeNoiseGaussMarkov(CommandBase):

  def __init__(self, system, process, enabled, sigma, time, seed):
    CommandBase.__init__(self, "SetAllSatellitesPseudorangeNoiseGaussMarkov")
    self.setSystem(system)
    self.setProcess(process)
    self.setEnabled(enabled)
    self.setSigma(sigma)
    self.setTime(time)
    self.setSeed(seed)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def process(self):
    return self.get("Process")

  def setProcess(self, value):
    return self.set("Process", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def sigma(self):
    return self.get("Sigma")

  def setSigma(self, value):
    return self.set("Sigma", value)

  def time(self):
    return self.get("Time")

  def setTime(self, value):
    return self.set("Time", value)

  def seed(self):
    return self.get("Seed")

  def setSeed(self, value):
    return self.set("Seed", value)

#
# Get the satellite pseudorange noise Gauss-Markov process attributes for all satellites.
#
# Name    Type   Description
# ------- ------ ----------------------------------------------------------------
# System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Process int    Gauss-Markov Process number (0 or 1)
#

class GetPseudorangeNoiseGaussMarkovForEachSV(CommandBase):

  def __init__(self, system, process):
    CommandBase.__init__(self, "GetPseudorangeNoiseGaussMarkovForEachSV")
    self.setSystem(system)
    self.setProcess(process)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def process(self):
    return self.get("Process")

  def setProcess(self, value):
    return self.set("Process", value)

#
# Please note the command GetAllSatellitesPseudorangeNoiseGaussMarkov is deprecated since 21.3. You may use GetPseudorangeNoiseGaussMarkovForEachSV.
# 
# Get the satellite pseudorange noise Gauss-Markov process attributes for all satellites.
#
# Name    Type   Description
# ------- ------ ----------------------------------------------------------------
# System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Process int    Gauss-Markov Process number (0 or 1)
#

class GetAllSatellitesPseudorangeNoiseGaussMarkov(CommandBase):

  def __init__(self, system, process):
    CommandBase.__init__(self, "GetAllSatellitesPseudorangeNoiseGaussMarkov")
    self.setSystem(system)
    self.setProcess(process)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def process(self):
    return self.get("Process")

  def setProcess(self, value):
    return self.set("Process", value)

#
# Result of GetPseudorangeNoiseGaussMarkovForEachSV.
#
# Name    Type         Description
# ------- ------------ ----------------------------------------------------------------
# System  string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# Process int          Gauss-Markov Process number (0 or 1)
# Enabled array bool   If true, Gauss-Markov process is enabled
# Sigma   array double Standard devition
# Time    array double Time constant
# Seed    array int    Random seed
#

class GetPseudorangeNoiseGaussMarkovForEachSVResult(CommandResult):

  def __init__(self, system, process, enabled, sigma, time, seed):
    CommandResult.__init__(self, "GetPseudorangeNoiseGaussMarkovForEachSVResult")
    self.setSystem(system)
    self.setProcess(process)
    self.setEnabled(enabled)
    self.setSigma(sigma)
    self.setTime(time)
    self.setSeed(seed)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def process(self):
    return self.get("Process")

  def setProcess(self, value):
    return self.set("Process", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def sigma(self):
    return self.get("Sigma")

  def setSigma(self, value):
    return self.set("Sigma", value)

  def time(self):
    return self.get("Time")

  def setTime(self, value):
    return self.set("Time", value)

  def seed(self):
    return self.get("Seed")

  def setSeed(self, value):
    return self.set("Seed", value)

#
# Generate new seeds for pseudorange noise Gauss-Markov process error on all satellites.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class RandomizePseudorangeNoiseGaussMarkovSeedsForAllSV(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "RandomizePseudorangeNoiseGaussMarkovSeedsForAllSV")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Please note the command RandomizeSeedsForAllSatellitesPseudorangeNoiseGaussMarkov is deprecated since 21.3. You may use RandomizePseudorangeNoiseGaussMarkovSeedsForAllSV.
# 
# Generate new seeds for pseudorange noise Gauss-Markov process error on all satellites.
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
#

class RandomizeSeedsForAllSatellitesPseudorangeNoiseGaussMarkov(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "RandomizeSeedsForAllSatellitesPseudorangeNoiseGaussMarkov")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Relative orbit frame.
#
# Name Type   Description
# ---- ------ -------------------------------------------------------------------
# R    double The radial component of the relative position vector, in meter
# I    double The in-track component of the relative position vector, in meter
# C    double The cross-track component of the relative position vector, in meter
#

class RIC:

  def __init__(self, r, i, c):
    self.R = r
    self.I = i
    self.C = c

#
# Set the satellite ephemeris error.
#
# Name     Type   Description
# -------- ------ -----------------------------------------------------------------------------------
# System   string "GPS", "Galileo", "GLONASS", "BeiDou", "QZSS" or "NavIC"
# SvId     int    Satellite SV ID.
# Orbit    RIC    The orbit error, in relative orbit frame. In-track error not available for GLONASS.
# DeltaAf0 double The clock bias error, in second. DeltaTaun for GLONASS.
# DeltaAf1 double The clock drift error, in second/second. Not available for GLONASS.
#

class SetEphemerisErrorForSV(CommandBase):

  def __init__(self, system, svId, orbit, deltaAf0, deltaAf1):
    CommandBase.__init__(self, "SetEphemerisErrorForSV")
    self.setSystem(system)
    self.setSvId(svId)
    self.setOrbit(orbit)
    self.setDeltaAf0(deltaAf0)
    self.setDeltaAf1(deltaAf1)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def orbit(self):
    return self.get("Orbit")

  def setOrbit(self, value):
    return self.set("Orbit", value)

  def deltaAf0(self):
    return self.get("DeltaAf0")

  def setDeltaAf0(self, value):
    return self.set("DeltaAf0", value)

  def deltaAf1(self):
    return self.get("DeltaAf1")

  def setDeltaAf1(self, value):
    return self.set("DeltaAf1", value)

#
# Get the satellite ephemeris error.
#
# Name   Type   Description
# ------ ------ --------------------------------------------------------
# System string "GPS", "Galileo", "GLONASS", "BeiDou", "QZSS" or "NavIC"
# SvId   int    Satellite SV ID.
#

class GetEphemerisErrorForSV(CommandBase):

  def __init__(self, system, svId):
    CommandBase.__init__(self, "GetEphemerisErrorForSV")
    self.setSystem(system)
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Result of GetEphemerisErrorForSV.
#
# Name     Type   Description
# -------- ------ -----------------------------------------------------------------------------------
# System   string "GPS", "Galileo", "GLONASS", "BeiDou", "QZSS" or "NavIC"
# SvId     int    Satellite SV ID.
# Orbit    RIC    The orbit error, in relative orbit frame. In-track error not available for GLONASS.
# DeltaAf0 double The clock bias error, in second. DeltaTaun for GLONASS.
# DeltaAf1 double The clock drift error, in second/second. Not available for GLONASS.
#

class GetEphemerisErrorForSVResult(CommandResult):

  def __init__(self, system, svId, orbit, deltaAf0, deltaAf1):
    CommandResult.__init__(self, "GetEphemerisErrorForSVResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setOrbit(orbit)
    self.setDeltaAf0(deltaAf0)
    self.setDeltaAf1(deltaAf1)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def orbit(self):
    return self.get("Orbit")

  def setOrbit(self, value):
    return self.set("Orbit", value)

  def deltaAf0(self):
    return self.get("DeltaAf0")

  def setDeltaAf0(self, value):
    return self.set("DeltaAf0", value)

  def deltaAf1(self):
    return self.get("DeltaAf1")

  def setDeltaAf1(self, value):
    return self.set("DeltaAf1", value)

#
# Set whether SBAS message 25 should send velocity corrections
#
# Name        Type Description
# ----------- ---- --------------------------------------------------------
# UseVelocity bool Whether SBAS message 25 should send velocity corrections
#

class SetUsingVelocityInSbasMessage25(CommandBase):

  def __init__(self, useVelocity):
    CommandBase.__init__(self, "SetUsingVelocityInSbasMessage25")
    self.setUseVelocity(useVelocity)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def useVelocity(self):
    return self.get("UseVelocity")

  def setUseVelocity(self, value):
    return self.set("UseVelocity", value)

#
# Get whether SBAS message 25 should send velocity corrections
#
#

class IsUsingVelocityInSbasMessage25(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "IsUsingVelocityInSbasMessage25")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of IsUsingVelocityInSbasMessage25.
#
# Name        Type Description
# ----------- ---- --------------------------------------------------------
# UseVelocity bool Whether SBAS message 25 should send velocity corrections
#

class IsUsingVelocityInSbasMessage25Result(CommandResult):

  def __init__(self, useVelocity):
    CommandResult.__init__(self, "IsUsingVelocityInSbasMessage25Result")
    self.setUseVelocity(useVelocity)

  def isSuccess(self):
    return True

  def useVelocity(self):
    return self.get("UseVelocity")

  def setUseVelocity(self, value):
    return self.set("UseVelocity", value)

#
# Set whether SBAS should transmit message 2 instead of message 0.
#
# Name             Type Description
# ---------------- ---- ---------------------------------------------------------
# TransmitMessage2 bool Whether SBAS should transmit message type 2 instead of 0.
#

class SetTransmitMessage2InSbasMessage0(CommandBase):

  def __init__(self, transmitMessage2):
    CommandBase.__init__(self, "SetTransmitMessage2InSbasMessage0")
    self.setTransmitMessage2(transmitMessage2)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def transmitMessage2(self):
    return self.get("TransmitMessage2")

  def setTransmitMessage2(self, value):
    return self.set("TransmitMessage2", value)

#
# Get whether SBAS should transmit message 2 instead of message 0.
#
#

class IsTransmitMessage2InSbasMessage0(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "IsTransmitMessage2InSbasMessage0")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of IsTransmitMessage2InSbasMessage0.
#
# Name             Type Description
# ---------------- ---- ---------------------------------------------------------
# TransmitMessage2 bool Whether SBAS should transmit message type 2 instead of 0.
#

class IsTransmitMessage2InSbasMessage0Result(CommandResult):

  def __init__(self, transmitMessage2):
    CommandResult.__init__(self, "IsTransmitMessage2InSbasMessage0Result")
    self.setTransmitMessage2(transmitMessage2)

  def isSuccess(self):
    return True

  def transmitMessage2(self):
    return self.get("TransmitMessage2")

  def setTransmitMessage2(self, value):
    return self.set("TransmitMessage2", value)

#
# Set whether a satellite is geostationary
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
# SvId        int             The satellite SV ID
# IsGeo       bool            True for geostationary satellite
# Longitude   double          The longitude to use, in degree
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class ForceSVGeo(CommandBase):

  def __init__(self, system, svId, isGeo, longitude, dataSetName = None):
    CommandBase.__init__(self, "ForceSVGeo")
    self.setSystem(system)
    self.setSvId(svId)
    self.setIsGeo(isGeo)
    self.setLongitude(longitude)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def isGeo(self):
    return self.get("IsGeo")

  def setIsGeo(self, value):
    return self.set("IsGeo", value)

  def longitude(self):
    return self.get("Longitude")

  def setLongitude(self, value):
    return self.set("Longitude", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get whether a satellite is geostationary
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
# SvId        int             The satellite SV ID
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class IsSVForcedGeo(CommandBase):

  def __init__(self, system, svId, dataSetName = None):
    CommandBase.__init__(self, "IsSVForcedGeo")
    self.setSystem(system)
    self.setSvId(svId)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Result of IsSVForcedGeo.
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
# SvId        int             The satellite SV ID
# IsGeo       bool            True for geostationary satellite
# Longitude   double          The longitude to use, in degree
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class IsSVForcedGeoResult(CommandResult):

  def __init__(self, system, svId, isGeo, longitude, dataSetName = None):
    CommandResult.__init__(self, "IsSVForcedGeoResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setIsGeo(isGeo)
    self.setLongitude(longitude)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def isGeo(self):
    return self.get("IsGeo")

  def setIsGeo(self, value):
    return self.set("IsGeo", value)

  def longitude(self):
    return self.get("Longitude")

  def setLongitude(self, value):
    return self.set("Longitude", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set whether specific errors type for this constellation should be compensated in SBAS fast corrections
#
# Name      Type            Description
# --------- --------------- ----------------------------------------------------------------------------------------------------
# System    string          "GPS" or "SBAS"
# IsEnabled bool            True if corrections are enabled
# ErrorType optional string Comma separated error type to enable/disable. Accepted error types are "PSR offset" and "PSR error".
#                           Default value is "PSR error". Getter only accepts one error type.
#

class EnableSbasFastCorrectionsFor(CommandBase):

  def __init__(self, system, isEnabled, errorType = None):
    CommandBase.__init__(self, "EnableSbasFastCorrectionsFor")
    self.setSystem(system)
    self.setIsEnabled(isEnabled)
    self.setErrorType(errorType)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def isEnabled(self):
    return self.get("IsEnabled")

  def setIsEnabled(self, value):
    return self.set("IsEnabled", value)

  def errorType(self):
    return self.get("ErrorType")

  def setErrorType(self, value):
    return self.set("ErrorType", value)

#
# Get whether specific errors type for this constellation should be compensated in SBAS fast corrections
#
# Name      Type            Description
# --------- --------------- ----------------------------------------------------------------------------------------------------
# System    string          "GPS" or "SBAS"
# ErrorType optional string Comma separated error type to enable/disable. Accepted error types are "PSR offset" and "PSR error".
#                           Default value is "PSR error". Getter only accepts one error type.
#

class IsSbasFastCorrectionsEnabledFor(CommandBase):

  def __init__(self, system, errorType = None):
    CommandBase.__init__(self, "IsSbasFastCorrectionsEnabledFor")
    self.setSystem(system)
    self.setErrorType(errorType)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def errorType(self):
    return self.get("ErrorType")

  def setErrorType(self, value):
    return self.set("ErrorType", value)

#
# Result of IsSbasFastCorrectionsEnabledFor.
#
# Name      Type            Description
# --------- --------------- ----------------------------------------------------------------------------------------------------
# System    string          "GPS" or "SBAS"
# IsEnabled bool            True if corrections are enabled
# ErrorType optional string Comma separated error type to enable/disable. Accepted error types are "PSR offset" and "PSR error".
#                           Default value is "PSR error". Getter only accepts one error type.
#

class IsSbasFastCorrectionsEnabledForResult(CommandResult):

  def __init__(self, system, isEnabled, errorType = None):
    CommandResult.__init__(self, "IsSbasFastCorrectionsEnabledForResult")
    self.setSystem(system)
    self.setIsEnabled(isEnabled)
    self.setErrorType(errorType)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def isEnabled(self):
    return self.get("IsEnabled")

  def setIsEnabled(self, value):
    return self.set("IsEnabled", value)

  def errorType(self):
    return self.get("ErrorType")

  def setErrorType(self, value):
    return self.set("ErrorType", value)

#
# Set whether the ionospheric offsets grid should be used for SBAS corrections in message 26
#
# Name      Type Description
# --------- ---- --------------------------------------------
# IsEnabled bool True if offsets are applied in Sbas messages
#

class ApplyDelayInSbas(CommandBase):

  def __init__(self, isEnabled):
    CommandBase.__init__(self, "ApplyDelayInSbas")
    self.setIsEnabled(isEnabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def isEnabled(self):
    return self.get("IsEnabled")

  def setIsEnabled(self, value):
    return self.set("IsEnabled", value)

#
# Get whether the ionospheric offsets grid should be used for SBAS corrections in message 26
#
#

class IsDelayAppliedInSbas(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "IsDelayAppliedInSbas")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of IsDelayAppliedInSbas.
#
# Name      Type Description
# --------- ---- --------------------------------------------
# IsEnabled bool True if offsets are applied in Sbas messages
#

class IsDelayAppliedInSbasResult(CommandResult):

  def __init__(self, isEnabled):
    CommandResult.__init__(self, "IsDelayAppliedInSbasResult")
    self.setIsEnabled(isEnabled)

  def isSuccess(self):
    return True

  def isEnabled(self):
    return self.get("IsEnabled")

  def setIsEnabled(self, value):
    return self.set("IsEnabled", value)

#
# Set whether the ionospheric offsets grid should be applied to the ionosphere
#
# Name      Type Description
# --------- ---- ---------------------------------------------
# IsEnabled bool True if offsets are applied on the ionosphere
#

class EnableIonoOffset(CommandBase):

  def __init__(self, isEnabled):
    CommandBase.__init__(self, "EnableIonoOffset")
    self.setIsEnabled(isEnabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def isEnabled(self):
    return self.get("IsEnabled")

  def setIsEnabled(self, value):
    return self.set("IsEnabled", value)

#
# Get whether the ionospheric offsets grid should be applied to the ionosphere
#
#

class IsIonoOffsetEnabled(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "IsIonoOffsetEnabled")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of IsIonoOffsetEnabled.
#
# Name      Type Description
# --------- ---- ---------------------------------------------
# IsEnabled bool True if offsets are applied on the ionosphere
#

class IsIonoOffsetEnabledResult(CommandResult):

  def __init__(self, isEnabled):
    CommandResult.__init__(self, "IsIonoOffsetEnabledResult")
    self.setIsEnabled(isEnabled)

  def isSuccess(self):
    return True

  def isEnabled(self):
    return self.get("IsEnabled")

  def setIsEnabled(self, value):
    return self.set("IsEnabled", value)

#
# Set whether ephemeris errors for this constellation should be compensated in SBAS long term corrections.
#
# Name      Type   Description
# --------- ------ -------------------------------------
# System    string As of today, only "GPS" is supported.
# IsEnabled bool   True if corrections are enabled.
#

class EnableSbasLongTermCorrectionsFor(CommandBase):

  def __init__(self, system, isEnabled):
    CommandBase.__init__(self, "EnableSbasLongTermCorrectionsFor")
    self.setSystem(system)
    self.setIsEnabled(isEnabled)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def isEnabled(self):
    return self.get("IsEnabled")

  def setIsEnabled(self, value):
    return self.set("IsEnabled", value)

#
# Get whether ephemeris errors for this constellation should be compensated in SBAS long term corrections.
#
# Name   Type   Description
# ------ ------ -------------------------------------
# System string As of today, only "GPS" is supported.
#

class IsSbasLongTermCorrectionsEnabledFor(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "IsSbasLongTermCorrectionsEnabledFor")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Result of IsSbasLongTermCorrectionsEnabledFor.
#
# Name      Type   Description
# --------- ------ -------------------------------------
# System    string As of today, only "GPS" is supported.
# IsEnabled bool   True if corrections are enabled.
#

class IsSbasLongTermCorrectionsEnabledForResult(CommandResult):

  def __init__(self, system, isEnabled):
    CommandResult.__init__(self, "IsSbasLongTermCorrectionsEnabledForResult")
    self.setSystem(system)
    self.setIsEnabled(isEnabled)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def isEnabled(self):
    return self.get("IsEnabled")

  def setIsEnabled(self, value):
    return self.set("IsEnabled", value)

#
# Set the ura index of a GPS satellite
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
# Urai        int             URA index.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGpsUraIndexForSV(CommandBase):

  def __init__(self, svId, urai, dataSetName = None):
    CommandBase.__init__(self, "SetGpsUraIndexForSV")
    self.setSvId(svId)
    self.setUrai(urai)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def urai(self):
    return self.get("Urai")

  def setUrai(self, value):
    return self.set("Urai", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set the ura index of a BeiDou satellite
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
# Urai        int             URA index.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetBeiDouUraIndexForSV(CommandBase):

  def __init__(self, svId, urai, dataSetName = None):
    CommandBase.__init__(self, "SetBeiDouUraIndexForSV")
    self.setSvId(svId)
    self.setUrai(urai)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def urai(self):
    return self.get("Urai")

  def setUrai(self, value):
    return self.set("Urai", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set the URA index of a QZSS satellite
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
# Urai        int             URA index.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssUraIndexForSV(CommandBase):

  def __init__(self, svId, urai, dataSetName = None):
    CommandBase.__init__(self, "SetQzssUraIndexForSV")
    self.setSvId(svId)
    self.setUrai(urai)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def urai(self):
    return self.get("Urai")

  def setUrai(self, value):
    return self.set("Urai", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetQzssUraIndex is deprecated since 21.3. You may use SetQzssUraIndexForSV.
# 
# Set the URA index of a QZSS satellite
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
# Urai        int             URA index.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetQzssUraIndex(CommandBase):

  def __init__(self, svId, urai, dataSetName = None):
    CommandBase.__init__(self, "SetQzssUraIndex")
    self.setSvId(svId)
    self.setUrai(urai)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def urai(self):
    return self.get("Urai")

  def setUrai(self, value):
    return self.set("Urai", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set the URA index of a NavIC satellite
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
# Urai        int             URA index.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetNavICUraIndexForSV(CommandBase):

  def __init__(self, svId, urai, dataSetName = None):
    CommandBase.__init__(self, "SetNavICUraIndexForSV")
    self.setSvId(svId)
    self.setUrai(urai)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def urai(self):
    return self.get("Urai")

  def setUrai(self, value):
    return self.set("Urai", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Please note the command SetNavICUraIndex is deprecated since 21.3. You may use SetNavICUraIndexForSV.
# 
# Set the URA index of a NavIC satellite
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
# Urai        int             URA index.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetNavICUraIndex(CommandBase):

  def __init__(self, svId, urai, dataSetName = None):
    CommandBase.__init__(self, "SetNavICUraIndex")
    self.setSvId(svId)
    self.setUrai(urai)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def urai(self):
    return self.get("Urai")

  def setUrai(self, value):
    return self.set("Urai", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set the URA index of a Sbas satellite
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
# Urai        int             URA index.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetSbasUraIndexForSV(CommandBase):

  def __init__(self, svId, urai, dataSetName = None):
    CommandBase.__init__(self, "SetSbasUraIndexForSV")
    self.setSvId(svId)
    self.setUrai(urai)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def urai(self):
    return self.get("Urai")

  def setUrai(self, value):
    return self.set("Urai", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set the SISA(E1,E5a) index of a Galileo satellite
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
# Sisai       int             SISA index.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGalileoSisaE1E5aIndexForSV(CommandBase):

  def __init__(self, svId, sisai, dataSetName = None):
    CommandBase.__init__(self, "SetGalileoSisaE1E5aIndexForSV")
    self.setSvId(svId)
    self.setSisai(sisai)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def sisai(self):
    return self.get("Sisai")

  def setSisai(self, value):
    return self.set("Sisai", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set the SISA(E1,E5b) index of a Galileo satellite
#
# Name        Type            Description
# ----------- --------------- -------------------------------------------------------------------------------------------
# SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
# Sisai       int             SISA index.
# DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
#

class SetGalileoSisaE1E5bIndexForSV(CommandBase):

  def __init__(self, svId, sisai, dataSetName = None):
    CommandBase.__init__(self, "SetGalileoSisaE1E5bIndexForSV")
    self.setSvId(svId)
    self.setSisai(sisai)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def sisai(self):
    return self.get("Sisai")

  def setSisai(self, value):
    return self.set("Sisai", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set CW pilot added to signal
#
# Name              Type   Description
# ----------------- ------ ---------------------------------------------------
# Enabled           bool   Enable (true) or disable (false) the signal
# OutputIdx         int    RF Output index (zero-based)
# CentralFreqOffset double Central frequency offset of the Pilot (Hz)
# Power             double Power (dB), relative to transmitter reference power
# PilotId           string CW Pilot unique identifier.
#

class SetPilotCW(CommandBase):

  def __init__(self, enabled, outputIdx, centralFreqOffset, power, pilotId):
    CommandBase.__init__(self, "SetPilotCW")
    self.setEnabled(enabled)
    self.setOutputIdx(outputIdx)
    self.setCentralFreqOffset(centralFreqOffset)
    self.setPower(power)
    self.setPilotId(pilotId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def outputIdx(self):
    return self.get("OutputIdx")

  def setOutputIdx(self, value):
    return self.set("OutputIdx", value)

  def centralFreqOffset(self):
    return self.get("CentralFreqOffset")

  def setCentralFreqOffset(self, value):
    return self.set("CentralFreqOffset", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def pilotId(self):
    return self.get("PilotId")

  def setPilotId(self, value):
    return self.set("PilotId", value)

#
# Set PRN pilot added to signal
#
# Name              Type   Description
# ----------------- ------ ---------------------------------------------------
# Enabled           bool   Enable (true) or disable (false) the signal
# OutputIdx         int    RF Output index (zero-based)
# CentralFreqOffset double Central frequency offset of the Pilot (Hz)
# Power             double Power (dB), relative to transmitter reference power
# Prn               int    The PRN to use
# Type              string The type of PRN to use (CA or Gold)
# PilotId           string CW Pilot unique identifier.
#

class SetPilotPRN(CommandBase):

  def __init__(self, enabled, outputIdx, centralFreqOffset, power, prn, type, pilotId):
    CommandBase.__init__(self, "SetPilotPRN")
    self.setEnabled(enabled)
    self.setOutputIdx(outputIdx)
    self.setCentralFreqOffset(centralFreqOffset)
    self.setPower(power)
    self.setPrn(prn)
    self.setType(type)
    self.setPilotId(pilotId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def outputIdx(self):
    return self.get("OutputIdx")

  def setOutputIdx(self, value):
    return self.set("OutputIdx", value)

  def centralFreqOffset(self):
    return self.get("CentralFreqOffset")

  def setCentralFreqOffset(self, value):
    return self.set("CentralFreqOffset", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def prn(self):
    return self.get("Prn")

  def setPrn(self, value):
    return self.set("Prn", value)

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def pilotId(self):
    return self.get("PilotId")

  def setPilotId(self, value):
    return self.set("PilotId", value)

#
# Calibrate a pilot output
#
# Name         Type   Description
# ------------ ------ ---------------------------------------------------
# OutputIdx    int    RF Output index (zero-based)
# Power        double Power (dB), relative to transmitter reference power
# Time         double Code time offset in second
# CarrierPhase double Carrier phase offset in radians
#

class CalibratePilotOutput(CommandBase):

  def __init__(self, outputIdx, power, time, carrierPhase):
    CommandBase.__init__(self, "CalibratePilotOutput")
    self.setOutputIdx(outputIdx)
    self.setPower(power)
    self.setTime(time)
    self.setCarrierPhase(carrierPhase)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

  def outputIdx(self):
    return self.get("OutputIdx")

  def setOutputIdx(self, value):
    return self.set("OutputIdx", value)

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def time(self):
    return self.get("Time")

  def setTime(self, value):
    return self.set("Time", value)

  def carrierPhase(self):
    return self.get("CarrierPhase")

  def setCarrierPhase(self, value):
    return self.set("CarrierPhase", value)

#
# Remove all pilots on all outputs
#
#

class RemoveAllPilots(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "RemoveAllPilots")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

#
# Change modulation offsets of one RF output
#
# Name        Type   Description
# ----------- ------ ----------------------------------------------------------------
# OutputIdx   int    RF Output index (zero-based)
# PowerOffset double Power offset (dB), to apply on all signals of the RF Output
# TimeOffset  double Time offset (seconds), to apply on all signals of the RF Output
# PhaseOffset double Phase offset (radians), to apply on all signals of the RF Output
#

class SetRFOutputOffsets(CommandBase):

  def __init__(self, outputIdx, powerOffset, timeOffset, phaseOffset):
    CommandBase.__init__(self, "SetRFOutputOffsets")
    self.setOutputIdx(outputIdx)
    self.setPowerOffset(powerOffset)
    self.setTimeOffset(timeOffset)
    self.setPhaseOffset(phaseOffset)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

  def outputIdx(self):
    return self.get("OutputIdx")

  def setOutputIdx(self, value):
    return self.set("OutputIdx", value)

  def powerOffset(self):
    return self.get("PowerOffset")

  def setPowerOffset(self, value):
    return self.set("PowerOffset", value)

  def timeOffset(self):
    return self.get("TimeOffset")

  def setTimeOffset(self, value):
    return self.set("TimeOffset", value)

  def phaseOffset(self):
    return self.get("PhaseOffset")

  def setPhaseOffset(self, value):
    return self.set("PhaseOffset", value)

#
# Returns whether the vehicle trajectory was completed.
# For fixed, circular and earth-orbiting spacecraft, this will always return false.
# For track playback and vehicle simulation, this will return true once the vehicle will reach the last position in the track/route.
# The value is unreliable for HIL trajectories.
#
#

class IsTrajectoryCompleted(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "IsTrajectoryCompleted")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of IsTrajectoryCompleted.
#
# Name        Type Description
# ----------- ---- ------------------------------------------
# IsCompleted bool Whether the trajectory is completed or not
#

class IsTrajectoryCompletedResult(CommandResult):

  def __init__(self, isCompleted):
    CommandResult.__init__(self, "IsTrajectoryCompletedResult")
    self.setIsCompleted(isCompleted)

  def isSuccess(self):
    return True

  def isCompleted(self):
    return self.get("IsCompleted")

  def setIsCompleted(self, value):
    return self.set("IsCompleted", value)

#
# Set the error offset for a ionospheric grid point
#
# Name  Type   Description
# ----- ------ -------------------------------
# Band  int    The ionospheric grid band index
# Point int    The IGP index
# Error double The error offset at the IGP
#

class SetIonoGridError(CommandBase):

  def __init__(self, band, point, error):
    CommandBase.__init__(self, "SetIonoGridError")
    self.setBand(band)
    self.setPoint(point)
    self.setError(error)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def point(self):
    return self.get("Point")

  def setPoint(self, value):
    return self.set("Point", value)

  def error(self):
    return self.get("Error")

  def setError(self, value):
    return self.set("Error", value)

#
# Get the error offset for a ionospheric grid point
#
# Name  Type Description
# ----- ---- -------------------------------
# Band  int  The ionospheric grid band index
# Point int  The IGP index
#

class GetIonoGridError(CommandBase):

  def __init__(self, band, point):
    CommandBase.__init__(self, "GetIonoGridError")
    self.setBand(band)
    self.setPoint(point)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def point(self):
    return self.get("Point")

  def setPoint(self, value):
    return self.set("Point", value)

#
# Result of GetIonoGridError.
#
# Name  Type   Description
# ----- ------ -------------------------------
# Band  int    The ionospheric grid band index
# Point int    The IGP index
# Error double The error offset at the IGP
#

class GetIonoGridErrorResult(CommandResult):

  def __init__(self, band, point, error):
    CommandResult.__init__(self, "GetIonoGridErrorResult")
    self.setBand(band)
    self.setPoint(point)
    self.setError(error)

  def isSuccess(self):
    return True

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def point(self):
    return self.get("Point")

  def setPoint(self, value):
    return self.set("Point", value)

  def error(self):
    return self.get("Error")

  def setError(self, value):
    return self.set("Error", value)

#
# Set the GIVEI for a ionospheric grid point
#
# Name            Type            Description
# --------------- --------------- -------------------------------
# Band            int             The ionospheric grid band index
# Point           int             The IGP index
# GiveI           int             The GIVEI at the IGP
# ServiceProvider optional string The service provider (optional)
#

class SetIonoGridGIVEI(CommandBase):

  def __init__(self, band, point, giveI, serviceProvider = None):
    CommandBase.__init__(self, "SetIonoGridGIVEI")
    self.setBand(band)
    self.setPoint(point)
    self.setGiveI(giveI)
    self.setServiceProvider(serviceProvider)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def point(self):
    return self.get("Point")

  def setPoint(self, value):
    return self.set("Point", value)

  def giveI(self):
    return self.get("GiveI")

  def setGiveI(self, value):
    return self.set("GiveI", value)

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

#
# Get the GIVEI for a ionospheric grid point
#
# Name            Type            Description
# --------------- --------------- -------------------------------
# Band            int             The ionospheric grid band index
# Point           int             The IGP index
# ServiceProvider optional string The service provider (optional)
#

class GetIonoGridGIVEI(CommandBase):

  def __init__(self, band, point, serviceProvider = None):
    CommandBase.__init__(self, "GetIonoGridGIVEI")
    self.setBand(band)
    self.setPoint(point)
    self.setServiceProvider(serviceProvider)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def point(self):
    return self.get("Point")

  def setPoint(self, value):
    return self.set("Point", value)

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

#
# Result of GetIonoGridGIVEI.
#
# Name            Type            Description
# --------------- --------------- -------------------------------
# Band            int             The ionospheric grid band index
# Point           int             The IGP index
# GiveI           int             The GIVEI at the IGP
# ServiceProvider optional string The service provider (optional)
#

class GetIonoGridGIVEIResult(CommandResult):

  def __init__(self, band, point, giveI, serviceProvider = None):
    CommandResult.__init__(self, "GetIonoGridGIVEIResult")
    self.setBand(band)
    self.setPoint(point)
    self.setGiveI(giveI)
    self.setServiceProvider(serviceProvider)

  def isSuccess(self):
    return True

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def point(self):
    return self.get("Point")

  def setPoint(self, value):
    return self.set("Point", value)

  def giveI(self):
    return self.get("GiveI")

  def setGiveI(self, value):
    return self.set("GiveI", value)

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

#
# Set Error offsets in the ionospheric grid.  The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc.
#
# Name Type               Description
# ---- ------------------ -----------------------------------------------------------------------
# Grid array array double Array containing each band, each band is an array containing the errors
#

class SetIonoGridErrorAll(CommandBase):

  def __init__(self, grid):
    CommandBase.__init__(self, "SetIonoGridErrorAll")
    self.setGrid(grid)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def grid(self):
    return self.get("Grid")

  def setGrid(self, value):
    return self.set("Grid", value)

#
# Get Error offsets in the ionospheric grid.  The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc.
#
#

class GetIonoGridErrorAll(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetIonoGridErrorAll")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetIonoGridErrorAll.
#
# Name Type               Description
# ---- ------------------ -----------------------------------------------------------------------
# Grid array array double Array containing each band, each band is an array containing the errors
#

class GetIonoGridErrorAllResult(CommandResult):

  def __init__(self, grid):
    CommandResult.__init__(self, "GetIonoGridErrorAllResult")
    self.setGrid(grid)

  def isSuccess(self):
    return True

  def grid(self):
    return self.get("Grid")

  def setGrid(self, value):
    return self.set("Grid", value)

#
# Set GIVEI in the ionospheric grid.  The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc.
#
# Name            Type            Description
# --------------- --------------- ----------------------------------------------------------------------
# Grid            array array int Array containing each band, each band is an array containing the GIVEI
# ServiceProvider optional string The service provider (optional)
#

class SetIonoGridGIVEIAll(CommandBase):

  def __init__(self, grid, serviceProvider = None):
    CommandBase.__init__(self, "SetIonoGridGIVEIAll")
    self.setGrid(grid)
    self.setServiceProvider(serviceProvider)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def grid(self):
    return self.get("Grid")

  def setGrid(self, value):
    return self.set("Grid", value)

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

#
# Get GIVEI in the ionospheric grid.  The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc.
#
# Name            Type            Description
# --------------- --------------- -------------------------------
# ServiceProvider optional string The service provider (optional)
#

class GetIonoGridGIVEIAll(CommandBase):

  def __init__(self, serviceProvider = None):
    CommandBase.__init__(self, "GetIonoGridGIVEIAll")
    self.setServiceProvider(serviceProvider)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

#
# Result of GetIonoGridGIVEIAll.
#
# Name            Type            Description
# --------------- --------------- ----------------------------------------------------------------------
# Grid            array array int Array containing each band, each band is an array containing the GIVEI
# ServiceProvider optional string The service provider (optional)
#

class GetIonoGridGIVEIAllResult(CommandResult):

  def __init__(self, grid, serviceProvider = None):
    CommandResult.__init__(self, "GetIonoGridGIVEIAllResult")
    self.setGrid(grid)
    self.setServiceProvider(serviceProvider)

  def isSuccess(self):
    return True

  def grid(self):
    return self.get("Grid")

  def setGrid(self, value):
    return self.set("Grid", value)

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

#
# Set the flag for a ionospheric grid point in the SBAS message 18 mask
#
# Name            Type   Description
# --------------- ------ -------------------------------
# ServiceProvider string The service provider
# Band            int    The ionospheric grid band index
# Point           int    The IGP index
# Flag            bool   Is the IGP monitored
#

class SetIonoGridMask(CommandBase):

  def __init__(self, serviceProvider, band, point, flag):
    CommandBase.__init__(self, "SetIonoGridMask")
    self.setServiceProvider(serviceProvider)
    self.setBand(band)
    self.setPoint(point)
    self.setFlag(flag)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def point(self):
    return self.get("Point")

  def setPoint(self, value):
    return self.set("Point", value)

  def flag(self):
    return self.get("Flag")

  def setFlag(self, value):
    return self.set("Flag", value)

#
# Get the flag for a ionospheric grid point in the SBAS message 18 mask
#
# Name            Type   Description
# --------------- ------ -------------------------------
# ServiceProvider string The service provider
# Band            int    The ionospheric grid band index
# Point           int    The IGP index
#

class GetIonoGridMask(CommandBase):

  def __init__(self, serviceProvider, band, point):
    CommandBase.__init__(self, "GetIonoGridMask")
    self.setServiceProvider(serviceProvider)
    self.setBand(band)
    self.setPoint(point)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def point(self):
    return self.get("Point")

  def setPoint(self, value):
    return self.set("Point", value)

#
# Result of GetIonoGridMask.
#
# Name            Type   Description
# --------------- ------ -------------------------------
# ServiceProvider string The service provider
# Band            int    The ionospheric grid band index
# Point           int    The IGP index
# Flag            bool   Is the IGP monitored
#

class GetIonoGridMaskResult(CommandResult):

  def __init__(self, serviceProvider, band, point, flag):
    CommandResult.__init__(self, "GetIonoGridMaskResult")
    self.setServiceProvider(serviceProvider)
    self.setBand(band)
    self.setPoint(point)
    self.setFlag(flag)

  def isSuccess(self):
    return True

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

  def band(self):
    return self.get("Band")

  def setBand(self, value):
    return self.set("Band", value)

  def point(self):
    return self.get("Point")

  def setPoint(self, value):
    return self.set("Point", value)

  def flag(self):
    return self.get("Flag")

  def setFlag(self, value):
    return self.set("Flag", value)

#
# Set Mask flags in the ionospheric grid for a given service provider. The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc.
#
# Name            Type             Description
# --------------- ---------------- ----------------------------------------------------------------------
# ServiceProvider string           The service provider
# Grid            array array bool Array containing each band, each band is an array containing the flags
#

class SetIonoGridMaskAll(CommandBase):

  def __init__(self, serviceProvider, grid):
    CommandBase.__init__(self, "SetIonoGridMaskAll")
    self.setServiceProvider(serviceProvider)
    self.setGrid(grid)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

  def grid(self):
    return self.get("Grid")

  def setGrid(self, value):
    return self.set("Grid", value)

#
# Get Mask flags in the ionospheric grid for a given service provider. The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc.
#
# Name            Type   Description
# --------------- ------ --------------------
# ServiceProvider string The service provider
#

class GetIonoGridMaskAll(CommandBase):

  def __init__(self, serviceProvider):
    CommandBase.__init__(self, "GetIonoGridMaskAll")
    self.setServiceProvider(serviceProvider)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

#
# Result of GetIonoGridMaskAll.
#
# Name            Type             Description
# --------------- ---------------- ----------------------------------------------------------------------
# ServiceProvider string           The service provider
# Grid            array array bool Array containing each band, each band is an array containing the flags
#

class GetIonoGridMaskAllResult(CommandResult):

  def __init__(self, serviceProvider, grid):
    CommandResult.__init__(self, "GetIonoGridMaskAllResult")
    self.setServiceProvider(serviceProvider)
    self.setGrid(grid)

  def isSuccess(self):
    return True

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

  def grid(self):
    return self.get("Grid")

  def setGrid(self, value):
    return self.set("Grid", value)

#
# Import ionospheric grid errors.
#
# Name        Type   Description
# ----------- ------ ------------------------------------
# Overwriting bool   Overwrite the previous grid if true.
# Path        string Grid file path
#

class ImportIonoGridErrors(CommandBase):

  def __init__(self, overwriting, path):
    CommandBase.__init__(self, "ImportIonoGridErrors")
    self.setOverwriting(overwriting)
    self.setPath(path)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def overwriting(self):
    return self.get("Overwriting")

  def setOverwriting(self, value):
    return self.set("Overwriting", value)

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

#
# Import ionospheric grid GIVEI.
#
# Name            Type            Description
# --------------- --------------- ------------------------------------
# Overwriting     bool            Overwrite the previous grid if true.
# Path            string          Grid file path
# ServiceProvider optional string The service provider (optional)
#

class ImportIonoGridGIVEI(CommandBase):

  def __init__(self, overwriting, path, serviceProvider = None):
    CommandBase.__init__(self, "ImportIonoGridGIVEI")
    self.setOverwriting(overwriting)
    self.setPath(path)
    self.setServiceProvider(serviceProvider)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def overwriting(self):
    return self.get("Overwriting")

  def setOverwriting(self, value):
    return self.set("Overwriting", value)

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

#
# Import ionospheric grid mask for a giver service provider.
#
# Name            Type   Description
# --------------- ------ ------------------------------------
# ServiceProvider string The service provider
# Overwriting     bool   Overwrite the previous mask if true.
# Path            string Grid file path
#

class ImportIonoGridMask(CommandBase):

  def __init__(self, serviceProvider, overwriting, path):
    CommandBase.__init__(self, "ImportIonoGridMask")
    self.setServiceProvider(serviceProvider)
    self.setOverwriting(overwriting)
    self.setPath(path)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

  def overwriting(self):
    return self.get("Overwriting")

  def setOverwriting(self, value):
    return self.set("Overwriting", value)

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

#
# Export ionospheric grid errors.
#
# Name        Type   Description
# ----------- ------ -------------------------------
# Overwriting bool   Overwrite the old file if true.
# Path        string Grid file path
#

class ExportIonoGridErrors(CommandBase):

  def __init__(self, overwriting, path):
    CommandBase.__init__(self, "ExportIonoGridErrors")
    self.setOverwriting(overwriting)
    self.setPath(path)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def overwriting(self):
    return self.get("Overwriting")

  def setOverwriting(self, value):
    return self.set("Overwriting", value)

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

#
# Export ionospheric grid GIVEI.
#
# Name            Type            Description
# --------------- --------------- -------------------------------
# Overwriting     bool            Overwrite the old file if true.
# Path            string          Grid file path
# ServiceProvider optional string The service provider (optional)
#

class ExportIonoGridGIVEI(CommandBase):

  def __init__(self, overwriting, path, serviceProvider = None):
    CommandBase.__init__(self, "ExportIonoGridGIVEI")
    self.setOverwriting(overwriting)
    self.setPath(path)
    self.setServiceProvider(serviceProvider)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def overwriting(self):
    return self.get("Overwriting")

  def setOverwriting(self, value):
    return self.set("Overwriting", value)

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

#
# Export ionospheric grid mask for a given service provider.
#
# Name            Type   Description
# --------------- ------ -------------------------------
# ServiceProvider string The service provider
# Overwriting     bool   Overwrite the old file if true.
# Path            string Grid file path
#

class ExportIonoGridMask(CommandBase):

  def __init__(self, serviceProvider, overwriting, path):
    CommandBase.__init__(self, "ExportIonoGridMask")
    self.setServiceProvider(serviceProvider)
    self.setOverwriting(overwriting)
    self.setPath(path)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

  def overwriting(self):
    return self.get("Overwriting")

  def setOverwriting(self, value):
    return self.set("Overwriting", value)

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

#
# Get a list of paths for all the files in the Configurations folder.
#
#

class GetConfigPaths(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetConfigPaths")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of GetConfigPaths.
#
# Name  Type         Description
# ----- ------------ --------------------------------
# Paths array string Paths of the configuration files
#

class GetConfigPathsResult(CommandResult):

  def __init__(self, paths):
    CommandResult.__init__(self, "GetConfigPathsResult")
    self.setPaths(paths)

  def isSuccess(self):
    return True

  def paths(self):
    return self.get("Paths")

  def setPaths(self, value):
    return self.set("Paths", value)

#
# Set the 0th PPS' date time
#
# Name    Type     Description
# ------- -------- --------------------------------------------------------------
# GpsTime datetime GPS date and time (it is the GPS time expressed in UTC format)
#

class SetPps0GpsTime(CommandBase):

  def __init__(self, gpsTime):
    CommandBase.__init__(self, "SetPps0GpsTime")
    self.setGpsTime(gpsTime)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

  def gpsTime(self):
    return self.get("GpsTime")

  def setGpsTime(self, value):
    return self.set("GpsTime", value)

#
# Returns the official leap second for a given date
#
# Name Type     Description
# ---- -------- ------------------------------
# Date datetime A date expressed in UTC format
#

class GetOfficialLeapSecond(CommandBase):

  def __init__(self, date):
    CommandBase.__init__(self, "GetOfficialLeapSecond")
    self.setDate(date)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def date(self):
    return self.get("Date")

  def setDate(self, value):
    return self.set("Date", value)

#
# Result of GetOfficialLeapSecond
#
# Name       Type Description
# ---------- ---- -----------------
# LeapSecond int  Leap second value
#

class GetOfficialLeapSecondResult(CommandResult):

  def __init__(self, leapSecond):
    CommandResult.__init__(self, "GetOfficialLeapSecondResult")
    self.setLeapSecond(leapSecond)

  def isSuccess(self):
    return True

  def leapSecond(self):
    return self.get("LeapSecond")

  def setLeapSecond(self, value):
    return self.set("LeapSecond", value)

#
# Returns the last known leap second date
#
#

class GetLastLeapSecondDate(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetLastLeapSecondDate")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of GetLastLeapSecondDate.
#
# Name Type Description
# ---- ---- ----------------
# Date date Leap second date
#

class GetLastLeapSecondDateResult(CommandResult):

  def __init__(self, date):
    CommandResult.__init__(self, "GetLastLeapSecondDateResult")
    self.setDate(date)

  def isSuccess(self):
    return True

  def date(self):
    return self.get("Date")

  def setDate(self, value):
    return self.set("Date", value)

#
# Set The CRPA LNA gain
#
# Name Type Description
# ---- ---- -----------------
# Gain int  The CRPA LNA gain
#

class SetWFAntennaGain(CommandBase):

  def __init__(self, gain):
    CommandBase.__init__(self, "SetWFAntennaGain")
    self.setGain(gain)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def gain(self):
    return self.get("Gain")

  def setGain(self, value):
    return self.set("Gain", value)

#
# Get The CRPA LNA gain
#
#

class GetWFAntennaGain(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetWFAntennaGain")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetWFAntennaGain.
#
# Name Type Description
# ---- ---- -----------------
# Gain int  The CRPA LNA gain
#

class GetWFAntennaGainResult(CommandResult):

  def __init__(self, gain):
    CommandResult.__init__(self, "GetWFAntennaGainResult")
    self.setGain(gain)

  def isSuccess(self):
    return True

  def gain(self):
    return self.get("Gain")

  def setGain(self, value):
    return self.set("Gain", value)

#
# Adds a custom signal
#
# Name Type   Description
# ---- ------ ------------------------------------------------
# Path string Path to the custom signal XML file
# Id   string Unique identifier automatically set by simulator
#

class AddCustomSignal(CommandBase):

  def __init__(self, path, id):
    CommandBase.__init__(self, "AddCustomSignal")
    self.setPath(path)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Removes the custom signal with the given ID
#
# Name Type   Description
# ---- ------ ----------------
# Id   string Custom signal ID
#

class RemoveCustomSignal(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "RemoveCustomSignal")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Removes all the custom signals
#
#

class RemoveAllCustomSignals(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "RemoveAllCustomSignals")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Changes the custom signal color
#
# Name  Type   Description
# ----- ------ -------------------------------------------------------------------------------
# Color string Color 'name'. Either a common color (red, white, ...) or an hex code (#FFFFFF).
# Id    string Custom signal ID
#

class ChangeCustomSignalColor(CommandBase):

  def __init__(self, color, id):
    CommandBase.__init__(self, "ChangeCustomSignalColor")
    self.setColor(color)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def color(self):
    return self.get("Color")

  def setColor(self, value):
    return self.set("Color", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get the ID of all spoofer transmitters.
#
#

class GetAllSpoofTxID(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetAllSpoofTxID")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of GetAllSpoofTxID.
#
# Name Type         Description
# ---- ------------ ------------------------------------
# Ids  array string ID list of all spoofer transmitters.
#

class GetAllSpoofTxIDResult(CommandResult):

  def __init__(self, ids):
    CommandResult.__init__(self, "GetAllSpoofTxIDResult")
    self.setIds(ids)

  def isSuccess(self):
    return True

  def ids(self):
    return self.get("Ids")

  def setIds(self, value):
    return self.set("Ids", value)

#
# Set a spoofer transmitter. For set : the transmitter Id parameter is not set (empty string),
# Skydel will assign a unique Id to the transmitter. If the Id is set and already used by Skydel, the
# command will fail.
#
# Name       Type   Description
# ---------- ------ ------------------------------------------------
# UsualName  string Usual name for the transmitter.
# Enabled    bool   Enable (true) or disable (false) the transmitter
# Address    string Remote instance IP address.
# InstanceId int    Remote instance ID.
# Id         string Transmitter unique identifier.
#

class AddSpoofTx(CommandBase):

  def __init__(self, usualName, enabled, address, instanceId, id):
    CommandBase.__init__(self, "AddSpoofTx")
    self.setUsualName(usualName)
    self.setEnabled(enabled)
    self.setAddress(address)
    self.setInstanceId(instanceId)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def usualName(self):
    return self.get("UsualName")

  def setUsualName(self, value):
    return self.set("UsualName", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def address(self):
    return self.get("Address")

  def setAddress(self, value):
    return self.set("Address", value)

  def instanceId(self):
    return self.get("InstanceId")

  def setInstanceId(self, value):
    return self.set("InstanceId", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get a spoofer transmitter. For set : the transmitter Id parameter is not set (empty string),
# Skydel will assign a unique Id to the transmitter. If the Id is set and already used by Skydel, the
# command will fail.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetSpoofTx(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetSpoofTx")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetSpoofTx.
#
# Name       Type   Description
# ---------- ------ ------------------------------------------------
# UsualName  string Usual name for the transmitter.
# Enabled    bool   Enable (true) or disable (false) the transmitter
# Address    string Remote instance IP address.
# InstanceId int    Remote instance ID.
# Id         string Transmitter unique identifier.
#

class GetSpoofTxResult(CommandResult):

  def __init__(self, usualName, enabled, address, instanceId, id):
    CommandResult.__init__(self, "GetSpoofTxResult")
    self.setUsualName(usualName)
    self.setEnabled(enabled)
    self.setAddress(address)
    self.setInstanceId(instanceId)
    self.setId(id)

  def isSuccess(self):
    return True

  def usualName(self):
    return self.get("UsualName")

  def setUsualName(self, value):
    return self.set("UsualName", value)

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def address(self):
    return self.get("Address")

  def setAddress(self, value):
    return self.set("Address", value)

  def instanceId(self):
    return self.get("InstanceId")

  def setInstanceId(self, value):
    return self.set("InstanceId", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Removes the spoofer transmitter. See EnableSpoofTx if all you want is to
# disable the interference temporarily.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class RemoveSpoofTx(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "RemoveSpoofTx")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Rename a spoofer.
#
# Name      Type   Description
# --------- ------ -------------------------------
# UsualName string Usual name for the transmitter.
# Id        string Transmitter unique identifier.
#

class RenameSpoofTx(CommandBase):

  def __init__(self, usualName, id):
    CommandBase.__init__(self, "RenameSpoofTx")
    self.setUsualName(usualName)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def usualName(self):
    return self.get("UsualName")

  def setUsualName(self, value):
    return self.set("UsualName", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set a spoofer color in spectrums
#
# Name  Type   Description
# ----- ------ -------------------------------------------------------------------------------
# Color string Color 'name'. Either a common color (red, white, ...) or an hex code (#FFFFFF).
# Id    string Transmitter unique identifier.
#

class ChangeSpoofTxColor(CommandBase):

  def __init__(self, color, id):
    CommandBase.__init__(self, "ChangeSpoofTxColor")
    self.setColor(color)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def color(self):
    return self.get("Color")

  def setColor(self, value):
    return self.set("Color", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get a spoofer color in spectrums
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetSpoofTxColor(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetSpoofTxColor")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetSpoofTxColor.
#
# Name  Type   Description
# ----- ------ -------------------------------------------------------------------------------
# Color string Color 'name'. Either a common color (red, white, ...) or an hex code (#FFFFFF).
# Id    string Transmitter unique identifier.
#

class GetSpoofTxColorResult(CommandResult):

  def __init__(self, color, id):
    CommandResult.__init__(self, "GetSpoofTxColorResult")
    self.setColor(color)
    self.setId(id)

  def isSuccess(self):
    return True

  def color(self):
    return self.get("Color")

  def setColor(self, value):
    return self.set("Color", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Enable/Disable the spoofer.
#
# Name    Type   Description
# ------- ------ ------------------------------------------------
# Enabled bool   Enable (true) or disable (false) the transmitter
# Id      string Transmitter unique identifier.
#

class EnableSpoofTx(CommandBase):

  def __init__(self, enabled, id):
    CommandBase.__init__(self, "EnableSpoofTx")
    self.setEnabled(enabled)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def enabled(self):
    return self.get("Enabled")

  def setEnabled(self, value):
    return self.set("Enabled", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set the manual propagation loss for the given spoofer signal. Value is used only if SetSpoofTxUseManualPropagationLoss has been set on the corresponding spoofer. This value is not preserved after simulation end.
#
# Name            Type   Description
# --------------- ------ --------------------------------------------------------------------------------------------------------
# PropagationLoss double The propagation loss in dB to use until the next call of this command, or until manual mode is disabled.
# TransmitterId   string Transmitter unique identifier.
# SignalId        string Signal unique identifier.
#

class SetSpoofSignalManualPropagationLoss(CommandBase):

  def __init__(self, propagationLoss, transmitterId, signalId):
    CommandBase.__init__(self, "SetSpoofSignalManualPropagationLoss")
    self.setPropagationLoss(propagationLoss)
    self.setTransmitterId(transmitterId)
    self.setSignalId(signalId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def propagationLoss(self):
    return self.get("PropagationLoss")

  def setPropagationLoss(self, value):
    return self.set("PropagationLoss", value)

  def transmitterId(self):
    return self.get("TransmitterId")

  def setTransmitterId(self, value):
    return self.set("TransmitterId", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

#
# Set whether a spoofer should only use user-provided propagation loss values. Propagation loss will not update automatically if set. This state is not preserved after simulation end.
#
# Name   Type   Description
# ------ ------ -------------------------------------------------------------
# Manual bool   If true, propagation loss will be 1000 dB until set manually.
# Id     string Spoofing transmitter unique identifier.
#

class SetSpoofTxUseManualPropagationLoss(CommandBase):

  def __init__(self, manual, id):
    CommandBase.__init__(self, "SetSpoofTxUseManualPropagationLoss")
    self.setManual(manual)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING | ExecutePermission.EXECUTE_IF_IDLE

  def manual(self):
    return self.get("Manual")

  def setManual(self, value):
    return self.set("Manual", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set whether a spoofer should ignore propagation loss or not.
#
# Name   Type   Description
# ------ ------ ------------------------------------------
# Ignore bool   If true, propagation loss will be ignored.
# Id     string Transmitter unique identifier.
#

class SetSpoofTxIgnorePropagationLoss(CommandBase):

  def __init__(self, ignore, id):
    CommandBase.__init__(self, "SetSpoofTxIgnorePropagationLoss")
    self.setIgnore(ignore)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def ignore(self):
    return self.get("Ignore")

  def setIgnore(self, value):
    return self.set("Ignore", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set whether a spoofer should ignore the receiver's antenna patterns (gain and phase).
#
# Name   Type   Description
# ------ ------ --------------------------------------------------------------------------
# Ignore bool   If true, the receiver's antenna patterns (gain and phase) will be ignored.
# Id     string Transmitter unique identifier.
#

class SetSpoofTxIgnoreRxAntennaPatterns(CommandBase):

  def __init__(self, ignore, id):
    CommandBase.__init__(self, "SetSpoofTxIgnoreRxAntennaPatterns")
    self.setIgnore(ignore)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def ignore(self):
    return self.get("Ignore")

  def setIgnore(self, value):
    return self.set("Ignore", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set whether a spoofer should ignore the receiver's antenna gain pattern.
#
# Name   Type   Description
# ------ ------ -------------------------------------------------------------
# Ignore bool   If true, the receiver's antenna gain pattern will be ignored.
# Id     string Transmitter unique identifier.
#

class SetSpoofTxIgnoreRxAntennaGainPattern(CommandBase):

  def __init__(self, ignore, id):
    CommandBase.__init__(self, "SetSpoofTxIgnoreRxAntennaGainPattern")
    self.setIgnore(ignore)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def ignore(self):
    return self.get("Ignore")

  def setIgnore(self, value):
    return self.set("Ignore", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get whether a spoofer ignore the receiver's antenna gain pattern.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class IsSpoofTxIgnoreRxAntennaGainPattern(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "IsSpoofTxIgnoreRxAntennaGainPattern")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of IsSpoofTxIgnoreRxAntennaGainPattern.
#
# Name   Type   Description
# ------ ------ -------------------------------------------------------------
# Ignore bool   If true, the receiver's antenna gain pattern will be ignored.
# Id     string Transmitter unique identifier.
#

class IsSpoofTxIgnoreRxAntennaGainPatternResult(CommandResult):

  def __init__(self, ignore, id):
    CommandResult.__init__(self, "IsSpoofTxIgnoreRxAntennaGainPatternResult")
    self.setIgnore(ignore)
    self.setId(id)

  def isSuccess(self):
    return True

  def ignore(self):
    return self.get("Ignore")

  def setIgnore(self, value):
    return self.set("Ignore", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set whether a spoofer should ignore the receiver's antenna phase pattern.
#
# Name   Type   Description
# ------ ------ --------------------------------------------------------------
# Ignore bool   If true, the receiver's antenna phase pattern will be ignored.
# Id     string Transmitter unique identifier.
#

class SetSpoofTxIgnoreRxAntennaPhasePattern(CommandBase):

  def __init__(self, ignore, id):
    CommandBase.__init__(self, "SetSpoofTxIgnoreRxAntennaPhasePattern")
    self.setIgnore(ignore)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def ignore(self):
    return self.get("Ignore")

  def setIgnore(self, value):
    return self.set("Ignore", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get whether a spoofer ignore the receiver's antenna phase pattern.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class IsSpoofTxIgnoreRxAntennaPhasePattern(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "IsSpoofTxIgnoreRxAntennaPhasePattern")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of IsSpoofTxIgnoreRxAntennaPhasePattern.
#
# Name   Type   Description
# ------ ------ --------------------------------------------------------------
# Ignore bool   If true, the receiver's antenna phase pattern will be ignored.
# Id     string Transmitter unique identifier.
#

class IsSpoofTxIgnoreRxAntennaPhasePatternResult(CommandResult):

  def __init__(self, ignore, id):
    CommandResult.__init__(self, "IsSpoofTxIgnoreRxAntennaPhasePatternResult")
    self.setIgnore(ignore)
    self.setId(id)

  def isSuccess(self):
    return True

  def ignore(self):
    return self.get("Ignore")

  def setIgnore(self, value):
    return self.set("Ignore", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set spoofer transmitter static position and orientation
#
# Name  Type   Description
# ----- ------ ------------------------------
# Lat   double Latitude (rad)
# Lon   double Longitude (rad)
# Alt   double Altitude (m)
# Yaw   double Yaw (rad)
# Pitch double Pitch (rad)
# Roll  double Roll (rad)
# Id    string Transmitter unique identifier.
#

class SetSpoofTxFix(CommandBase):

  def __init__(self, lat, lon, alt, yaw, pitch, roll, id):
    CommandBase.__init__(self, "SetSpoofTxFix")
    self.setLat(lat)
    self.setLon(lon)
    self.setAlt(alt)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def lat(self):
    return self.get("Lat")

  def setLat(self, value):
    return self.set("Lat", value)

  def lon(self):
    return self.get("Lon")

  def setLon(self, value):
    return self.set("Lon", value)

  def alt(self):
    return self.get("Alt")

  def setAlt(self, value):
    return self.set("Alt", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get spoofer transmitter static position and orientation
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetSpoofTxFix(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetSpoofTxFix")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetSpoofTxFix.
#
# Name  Type   Description
# ----- ------ ------------------------------
# Lat   double Latitude (rad)
# Lon   double Longitude (rad)
# Alt   double Altitude (m)
# Yaw   double Yaw (rad)
# Pitch double Pitch (rad)
# Roll  double Roll (rad)
# Id    string Transmitter unique identifier.
#

class GetSpoofTxFixResult(CommandResult):

  def __init__(self, lat, lon, alt, yaw, pitch, roll, id):
    CommandResult.__init__(self, "GetSpoofTxFixResult")
    self.setLat(lat)
    self.setLon(lon)
    self.setAlt(alt)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)
    self.setId(id)

  def isSuccess(self):
    return True

  def lat(self):
    return self.get("Lat")

  def setLat(self, value):
    return self.set("Lat", value)

  def lon(self):
    return self.get("Lon")

  def setLon(self, value):
    return self.set("Lon", value)

  def alt(self):
    return self.get("Alt")

  def setAlt(self, value):
    return self.set("Alt", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set spoofer transmitter static position and orientation
#
# Name  Type   Description
# ----- ------ ------------------------------
# X     double ECEF X (m)
# Y     double ECEF Y (m)
# Z     double ECEF Z (m)
# Yaw   double Yaw (rad)
# Pitch double Pitch (rad)
# Roll  double Roll (rad)
# Id    string Transmitter unique identifier.
#

class SetSpoofTxFixEcef(CommandBase):

  def __init__(self, x, y, z, yaw, pitch, roll, id):
    CommandBase.__init__(self, "SetSpoofTxFixEcef")
    self.setX(x)
    self.setY(y)
    self.setZ(z)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get spoofer transmitter static position and orientation
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetSpoofTxFixEcef(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetSpoofTxFixEcef")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetSpoofTxFixEcef.
#
# Name  Type   Description
# ----- ------ ------------------------------
# X     double ECEF X (m)
# Y     double ECEF Y (m)
# Z     double ECEF Z (m)
# Yaw   double Yaw (rad)
# Pitch double Pitch (rad)
# Roll  double Roll (rad)
# Id    string Transmitter unique identifier.
#

class GetSpoofTxFixEcefResult(CommandResult):

  def __init__(self, x, y, z, yaw, pitch, roll, id):
    CommandResult.__init__(self, "GetSpoofTxFixEcefResult")
    self.setX(x)
    self.setY(y)
    self.setZ(z)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)
    self.setId(id)

  def isSuccess(self):
    return True

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set spoofer transmitter circular trajectory
#
# Name        Type            Description
# ----------- --------------- --------------------------------
# Lat         double          Center latitude (rad)
# Lon         double          Center longitude (rad)
# Alt         double          Altitude (m)
# Radius      double          Radius (m)
# Speed       double          Speed (m/s)
# Clockwise   bool            If true, vehicle turns clockwise
# Id          string          Transmitter unique identifier.
# OriginAngle optional double Vehicle angle at elapsed time 0.
#

class SetSpoofTxCircular(CommandBase):

  def __init__(self, lat, lon, alt, radius, speed, clockwise, id, originAngle = None):
    CommandBase.__init__(self, "SetSpoofTxCircular")
    self.setLat(lat)
    self.setLon(lon)
    self.setAlt(alt)
    self.setRadius(radius)
    self.setSpeed(speed)
    self.setClockwise(clockwise)
    self.setId(id)
    self.setOriginAngle(originAngle)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def lat(self):
    return self.get("Lat")

  def setLat(self, value):
    return self.set("Lat", value)

  def lon(self):
    return self.get("Lon")

  def setLon(self, value):
    return self.set("Lon", value)

  def alt(self):
    return self.get("Alt")

  def setAlt(self, value):
    return self.set("Alt", value)

  def radius(self):
    return self.get("Radius")

  def setRadius(self, value):
    return self.set("Radius", value)

  def speed(self):
    return self.get("Speed")

  def setSpeed(self, value):
    return self.set("Speed", value)

  def clockwise(self):
    return self.get("Clockwise")

  def setClockwise(self, value):
    return self.set("Clockwise", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

  def originAngle(self):
    return self.get("OriginAngle")

  def setOriginAngle(self, value):
    return self.set("OriginAngle", value)

#
# Get spoofer transmitter circular trajectory
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetSpoofTxCircular(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetSpoofTxCircular")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetSpoofTxCircular.
#
# Name        Type            Description
# ----------- --------------- --------------------------------
# Lat         double          Center latitude (rad)
# Lon         double          Center longitude (rad)
# Alt         double          Altitude (m)
# Radius      double          Radius (m)
# Speed       double          Speed (m/s)
# Clockwise   bool            If true, vehicle turns clockwise
# Id          string          Transmitter unique identifier.
# OriginAngle optional double Vehicle angle at elapsed time 0.
#

class GetSpoofTxCircularResult(CommandResult):

  def __init__(self, lat, lon, alt, radius, speed, clockwise, id, originAngle = None):
    CommandResult.__init__(self, "GetSpoofTxCircularResult")
    self.setLat(lat)
    self.setLon(lon)
    self.setAlt(alt)
    self.setRadius(radius)
    self.setSpeed(speed)
    self.setClockwise(clockwise)
    self.setId(id)
    self.setOriginAngle(originAngle)

  def isSuccess(self):
    return True

  def lat(self):
    return self.get("Lat")

  def setLat(self, value):
    return self.set("Lat", value)

  def lon(self):
    return self.get("Lon")

  def setLon(self, value):
    return self.set("Lon", value)

  def alt(self):
    return self.get("Alt")

  def setAlt(self, value):
    return self.set("Alt", value)

  def radius(self):
    return self.get("Radius")

  def setRadius(self, value):
    return self.set("Radius", value)

  def speed(self):
    return self.get("Speed")

  def setSpeed(self, value):
    return self.set("Speed", value)

  def clockwise(self):
    return self.get("Clockwise")

  def setClockwise(self, value):
    return self.set("Clockwise", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

  def originAngle(self):
    return self.get("OriginAngle")

  def setOriginAngle(self, value):
    return self.set("OriginAngle", value)

#
# Set spoofer transmitter HIL trajectory
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class SetSpoofTxHil(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "SetSpoofTxHil")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get spoofer transmitter trajectory
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetSpoofTxTrajectory(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetSpoofTxTrajectory")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetSpoofTxTrajectory.
#
# Name           Type   Description
# -------------- ------ ---------------------------------------------------
# TrajectoryType string Type of the trajectory of the spoofer transmitters.
# Id             string Transmitter unique identifier.
#

class GetSpoofTxTrajectoryResult(CommandResult):

  def __init__(self, trajectoryType, id):
    CommandResult.__init__(self, "GetSpoofTxTrajectoryResult")
    self.setTrajectoryType(trajectoryType)
    self.setId(id)

  def isSuccess(self):
    return True

  def trajectoryType(self):
    return self.get("TrajectoryType")

  def setTrajectoryType(self, value):
    return self.set("TrajectoryType", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set transmitter antenna pattern.
#
# Name Type               Description
# ---- ------------------ -------------------------------------------------------------------------------------------------------------------------
# Gain array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
# Type AntennaPatternType Pattern type
# Id   string             Transmitter unique identifier.
#

class SetSpoofTxAntenna(CommandBase):

  def __init__(self, gain, type, id):
    CommandBase.__init__(self, "SetSpoofTxAntenna")
    self.setGain(gain)
    self.setType(type)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def gain(self):
    return self.get("Gain")

  def setGain(self, value):
    return self.set("Gain", value)

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get transmitter antenna pattern.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetSpoofTxAntenna(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetSpoofTxAntenna")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetSpoofTxAntenna.
#
# Name Type               Description
# ---- ------------------ -------------------------------------------------------------------------------------------------------------------------
# Gain array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
# Type AntennaPatternType Pattern type
# Id   string             Transmitter unique identifier.
#

class GetSpoofTxAntennaResult(CommandResult):

  def __init__(self, gain, type, id):
    CommandResult.__init__(self, "GetSpoofTxAntennaResult")
    self.setGain(gain)
    self.setType(type)
    self.setId(id)

  def isSuccess(self):
    return True

  def gain(self):
    return self.get("Gain")

  def setGain(self, value):
    return self.set("Gain", value)

  def type(self):
    return self.get("Type")

  def setType(self, value):
    return self.set("Type", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set antenna offset and orientation relative to body frame.
# The origin of the body frame follows the transmitter trajectory.
# When the body yaw/pitch/roll are zeros, the body X-axis is pointing north
#                          Y-axis is pointing east
#                          Z-axis is pointing down
# The antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and
# the Roll is rotating arond the X-axis of the body frame.
#
# Name  Type   Description
# ----- ------ --------------------------------------
# X     double Antenna X offset in the body frame
# Y     double Antenna Y offset in the body frame
# Z     double Antenna Z offset in the body frame
# Yaw   double Antenna Yaw offset in the body frame
# Pitch double Antenna Pitch offset in the body frame
# Roll  double Antenna Roll offset in the body frame
# Id    string Transmitter unique identifier.
#

class SetSpoofTxAntennaOffset(CommandBase):

  def __init__(self, x, y, z, yaw, pitch, roll, id):
    CommandBase.__init__(self, "SetSpoofTxAntennaOffset")
    self.setX(x)
    self.setY(y)
    self.setZ(z)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get antenna offset and orientation relative to body frame.
# The origin of the body frame follows the transmitter trajectory.
# When the body yaw/pitch/roll are zeros, the body X-axis is pointing north
#                          Y-axis is pointing east
#                          Z-axis is pointing down
# The antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and
# the Roll is rotating arond the X-axis of the body frame.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetSpoofTxAntennaOffset(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetSpoofTxAntennaOffset")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetSpoofTxAntennaOffset.
#
# Name  Type   Description
# ----- ------ --------------------------------------
# X     double Antenna X offset in the body frame
# Y     double Antenna Y offset in the body frame
# Z     double Antenna Z offset in the body frame
# Yaw   double Antenna Yaw offset in the body frame
# Pitch double Antenna Pitch offset in the body frame
# Roll  double Antenna Roll offset in the body frame
# Id    string Transmitter unique identifier.
#

class GetSpoofTxAntennaOffsetResult(CommandResult):

  def __init__(self, x, y, z, yaw, pitch, roll, id):
    CommandResult.__init__(self, "GetSpoofTxAntennaOffsetResult")
    self.setX(x)
    self.setY(y)
    self.setZ(z)
    self.setYaw(yaw)
    self.setPitch(pitch)
    self.setRoll(roll)
    self.setId(id)

  def isSuccess(self):
    return True

  def x(self):
    return self.get("X")

  def setX(self, value):
    return self.set("X", value)

  def y(self):
    return self.get("Y")

  def setY(self, value):
    return self.set("Y", value)

  def z(self):
    return self.get("Z")

  def setZ(self, value):
    return self.set("Z", value)

  def yaw(self):
    return self.get("Yaw")

  def setYaw(self, value):
    return self.set("Yaw", value)

  def pitch(self):
    return self.get("Pitch")

  def setPitch(self, value):
    return self.set("Pitch", value)

  def roll(self):
    return self.get("Roll")

  def setRoll(self, value):
    return self.set("Roll", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set the address of the spoofer instance that will
# generate the signal for this spoofer transmitter.
#
# Name       Type   Description
# ---------- ------ ------------------------------
# Address    string Remote instance IP address.
# InstanceId int    Remote instance ID.
# Id         string Transmitter unique identifier.
#

class SetSpoofTxRemoteAddress(CommandBase):

  def __init__(self, address, instanceId, id):
    CommandBase.__init__(self, "SetSpoofTxRemoteAddress")
    self.setAddress(address)
    self.setInstanceId(instanceId)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def address(self):
    return self.get("Address")

  def setAddress(self, value):
    return self.set("Address", value)

  def instanceId(self):
    return self.get("InstanceId")

  def setInstanceId(self, value):
    return self.set("InstanceId", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get the address of the spoofer instance that will
# generate the signal for this spoofer transmitter.
#
# Name Type   Description
# ---- ------ ------------------------------
# Id   string Transmitter unique identifier.
#

class GetSpoofTxRemoteAddress(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetSpoofTxRemoteAddress")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetSpoofTxRemoteAddress.
#
# Name       Type   Description
# ---------- ------ ------------------------------
# Address    string Remote instance IP address.
# InstanceId int    Remote instance ID.
# Id         string Transmitter unique identifier.
#

class GetSpoofTxRemoteAddressResult(CommandResult):

  def __init__(self, address, instanceId, id):
    CommandResult.__init__(self, "GetSpoofTxRemoteAddressResult")
    self.setAddress(address)
    self.setInstanceId(instanceId)
    self.setId(id)

  def isSuccess(self):
    return True

  def address(self):
    return self.get("Address")

  def setAddress(self, value):
    return self.set("Address", value)

  def instanceId(self):
    return self.get("InstanceId")

  def setInstanceId(self, value):
    return self.set("InstanceId", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set the spoofing transmitter reference power.
#
# Name  Type   Description
# ----- ------ ------------------------------
# Power double Reference Power (dBm)
# Id    string Transmitter unique identifier.
#

class SetSpoofTxRefPower(CommandBase):

  def __init__(self, power, id):
    CommandBase.__init__(self, "SetSpoofTxRefPower")
    self.setPower(power)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def power(self):
    return self.get("Power")

  def setPower(self, value):
    return self.set("Power", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Reset the spoofer's signal GPU index to default.
#
# Name     Type   Description
# -------- ------ -------------------------------
# SignalId int    Spoofer output number, 0-based.
# Id       string Transmitter unique identifier.
#

class ClearSpoofTxGpuIdx(CommandBase):

  def __init__(self, signalId, id):
    CommandBase.__init__(self, "ClearSpoofTxGpuIdx")
    self.setSignalId(signalId)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set the GPU index on which this spoofer signal will be modulated.
#
# Name     Type   Description
# -------- ------ -------------------------------
# GpuIdx   int    The GPU index.
# SignalId int    Spoofer output number, 0-based.
# Id       string Transmitter unique identifier.
#

class SetSpoofTxGpuIdx(CommandBase):

  def __init__(self, gpuIdx, signalId, id):
    CommandBase.__init__(self, "SetSpoofTxGpuIdx")
    self.setGpuIdx(gpuIdx)
    self.setSignalId(signalId)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def gpuIdx(self):
    return self.get("GpuIdx")

  def setGpuIdx(self, value):
    return self.set("GpuIdx", value)

  def signalId(self):
    return self.get("SignalId")

  def setSignalId(self, value):
    return self.set("SignalId", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set external channels path.
#
# Name Type   Description
# ---- ------ -----------------------------
# Path string Path to the sdxpand directory
#

class SetExternalChannelsPath(CommandBase):

  def __init__(self, path):
    CommandBase.__init__(self, "SetExternalChannelsPath")
    self.setPath(path)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

#
# Mapping PRN to the corresponding SV ID. Get a list of SV IDs based on a specific signal. Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L5", "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS", "B1", "B2", "B2a", "B1C", "B3I", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S" and "NAVICL5"
#
# Name   Type   Description
# ------ ------ ----------------------------------------------------------------------
# Signal string Signal key - see GetSVIDsOfPrn command description for possible values
# Prn    int    Satellite PRN number
#

class GetSVIDsOfPrn(CommandBase):

  def __init__(self, signal, prn):
    CommandBase.__init__(self, "GetSVIDsOfPrn")
    self.setSignal(signal)
    self.setPrn(prn)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def prn(self):
    return self.get("Prn")

  def setPrn(self, value):
    return self.set("Prn", value)

#
# Result of GetSVIDsOfPrn.
#
# Name     Type      Description
# -------- --------- ----------------------------------------------------------------------
# Signal   string    Signal key - see GetSVIDsOfPrn command description for possible values
# Prn      int       Satellite PRN number
# SvIdList array int A list containing all SV ID of a specific signal
#

class GetSVIDsOfPrnResult(CommandResult):

  def __init__(self, signal, prn, svIdList):
    CommandResult.__init__(self, "GetSVIDsOfPrnResult")
    self.setSignal(signal)
    self.setPrn(prn)
    self.setSvIdList(svIdList)

  def isSuccess(self):
    return True

  def signal(self):
    return self.get("Signal")

  def setSignal(self, value):
    return self.set("Signal", value)

  def prn(self):
    return self.get("Prn")

  def setPrn(self, value):
    return self.set("Prn", value)

  def svIdList(self):
    return self.get("SvIdList")

  def setSvIdList(self, value):
    return self.set("SvIdList", value)

#
# Set Add an augmentation to the L1S navigation messages.
#
# Name       Type   Description
# ---------- ------ ----------------------------------------------------------------------------------
# System     string "GPS", "GLONASS", "Galileo", "BeiDou" or "QZSS"
# Prn        int    Satellite PRN number.
# AugmentIOD bool   Include the satellite Issue Of Data in L1S message.
# AugmentPRC bool   Include the satellite Pseudorange Correction in L1S message.
# Prc        double Pseudorange Correction to include in L1S message. Only used if AugmentPSR is True.
# Id         string Unique identifier of the augmentation.
#

class SetQzssL1SAugmentation(CommandBase):

  def __init__(self, system, prn, augmentIOD, augmentPRC, prc, id):
    CommandBase.__init__(self, "SetQzssL1SAugmentation")
    self.setSystem(system)
    self.setPrn(prn)
    self.setAugmentIOD(augmentIOD)
    self.setAugmentPRC(augmentPRC)
    self.setPrc(prc)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def prn(self):
    return self.get("Prn")

  def setPrn(self, value):
    return self.set("Prn", value)

  def augmentIOD(self):
    return self.get("AugmentIOD")

  def setAugmentIOD(self, value):
    return self.set("AugmentIOD", value)

  def augmentPRC(self):
    return self.get("AugmentPRC")

  def setAugmentPRC(self, value):
    return self.set("AugmentPRC", value)

  def prc(self):
    return self.get("Prc")

  def setPrc(self, value):
    return self.set("Prc", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get Add an augmentation to the L1S navigation messages.
#
# Name Type   Description
# ---- ------ --------------------------------------
# Id   string Unique identifier of the augmentation.
#

class GetQzssL1SAugmentation(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "GetQzssL1SAugmentation")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetQzssL1SAugmentation.
#
# Name       Type   Description
# ---------- ------ ----------------------------------------------------------------------------------
# System     string "GPS", "GLONASS", "Galileo", "BeiDou" or "QZSS"
# Prn        int    Satellite PRN number.
# AugmentIOD bool   Include the satellite Issue Of Data in L1S message.
# AugmentPRC bool   Include the satellite Pseudorange Correction in L1S message.
# Prc        double Pseudorange Correction to include in L1S message. Only used if AugmentPSR is True.
# Id         string Unique identifier of the augmentation.
#

class GetQzssL1SAugmentationResult(CommandResult):

  def __init__(self, system, prn, augmentIOD, augmentPRC, prc, id):
    CommandResult.__init__(self, "GetQzssL1SAugmentationResult")
    self.setSystem(system)
    self.setPrn(prn)
    self.setAugmentIOD(augmentIOD)
    self.setAugmentPRC(augmentPRC)
    self.setPrc(prc)
    self.setId(id)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def prn(self):
    return self.get("Prn")

  def setPrn(self, value):
    return self.set("Prn", value)

  def augmentIOD(self):
    return self.get("AugmentIOD")

  def setAugmentIOD(self, value):
    return self.set("AugmentIOD", value)

  def augmentPRC(self):
    return self.get("AugmentPRC")

  def setAugmentPRC(self, value):
    return self.set("AugmentPRC", value)

  def prc(self):
    return self.get("Prc")

  def setPrc(self, value):
    return self.set("Prc", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Removes a QZSS L1S augmentation.
#
# Name Type   Description
# ---- ------ ----------------------------------------------
# Id   string Unique identifier (see SetQzssL1SAugmentation)
#

class RemoveQzssL1SAugmentation(CommandBase):

  def __init__(self, id):
    CommandBase.__init__(self, "RemoveQzssL1SAugmentation")
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Clears all QZSS L1S augmentations.
#
#

class ClearQzssL1SAugmentations(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "ClearQzssL1SAugmentations")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Get all QZSS L1S augmentation's IDs.
#
#

class GetQzssL1SAugmentations(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetQzssL1SAugmentations")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetQzssL1SAugmentations.
#
# Name Type         Description
# ---- ------------ --------------------------------------
# Ids  array string List of IDs of QZSS L1S augmentations.
#

class GetQzssL1SAugmentationsResult(CommandResult):

  def __init__(self, ids):
    CommandResult.__init__(self, "GetQzssL1SAugmentationsResult")
    self.setIds(ids)

  def isSuccess(self):
    return True

  def ids(self):
    return self.get("Ids")

  def setIds(self, value):
    return self.set("Ids", value)

#
# Set whether the JAM Calibration output is transmitting.
#
# Name  Type Description
# ----- ---- ------------------------------------------------------------------------------
# State bool True for the signal to go through the JAM Calibration output, False otherwise.
#

class SetWavefrontJamCalibrationState(CommandBase):

  def __init__(self, state):
    CommandBase.__init__(self, "SetWavefrontJamCalibrationState")
    self.setState(state)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

  def state(self):
    return self.get("State")

  def setState(self, value):
    return self.set("State", value)

#
# Add a new data set for the specified constellation. This could come from a Rinex, SEM or YUMA file for GPS. Only Rinex for the others.
#
# Name        Type            Description
# ----------- --------------- --------------------------------------------------------------------------------------------------------------------
# System      string          "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
# Path        string          Data set file path
# Rollover    optional int    Rollover for file types that does not precise it (YUMA, SEM). Default value is the current rollover.
# DataSetName optional string Name of the data set to import. This parameter is optional, the default value will be the name of the imported file.
#

class AddDataSet(CommandBase):

  def __init__(self, system, path, rollover = None, dataSetName = None):
    CommandBase.__init__(self, "AddDataSet")
    self.setSystem(system)
    self.setPath(path)
    self.setRollover(rollover)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def path(self):
    return self.get("Path")

  def setPath(self, value):
    return self.set("Path", value)

  def rollover(self):
    return self.get("Rollover")

  def setRollover(self, value):
    return self.set("Rollover", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set data set assignation for the specified constellation.
#
# Name        Type   Description
# ----------- ------ ---------------------------------------------
# System      string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
# DataSetType string "Almanac", "Ephemeris" or "Orbit"
# DataSetName string The name of the assigned data set.
#

class SetDataSetAssignation(CommandBase):

  def __init__(self, system, dataSetType, dataSetName):
    CommandBase.__init__(self, "SetDataSetAssignation")
    self.setSystem(system)
    self.setDataSetType(dataSetType)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def dataSetType(self):
    return self.get("DataSetType")

  def setDataSetType(self, value):
    return self.set("DataSetType", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get data set assignation for the specified constellation.
#
# Name        Type   Description
# ----------- ------ ---------------------------------------------
# System      string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
# DataSetType string "Almanac", "Ephemeris" or "Orbit"
#

class GetDataSetAssignation(CommandBase):

  def __init__(self, system, dataSetType):
    CommandBase.__init__(self, "GetDataSetAssignation")
    self.setSystem(system)
    self.setDataSetType(dataSetType)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def dataSetType(self):
    return self.get("DataSetType")

  def setDataSetType(self, value):
    return self.set("DataSetType", value)

#
# Result of GetDataSetAssignation.
#
# Name        Type   Description
# ----------- ------ ---------------------------------------------
# System      string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
# DataSetType string "Almanac", "Ephemeris" or "Orbit"
# DataSetName string The name of the assigned data set.
#

class GetDataSetAssignationResult(CommandResult):

  def __init__(self, system, dataSetType, dataSetName):
    CommandResult.__init__(self, "GetDataSetAssignationResult")
    self.setSystem(system)
    self.setDataSetType(dataSetType)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def dataSetType(self):
    return self.get("DataSetType")

  def setDataSetType(self, value):
    return self.set("DataSetType", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Rename data set.
#
# Name           Type   Description
# -------------- ------ ---------------------------------------------
# System         string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
# DataSetName    string The name of the data set to rename.
# NewDataSetName string The new name to be given to the data set.
#

class RenameDataSet(CommandBase):

  def __init__(self, system, dataSetName, newDataSetName):
    CommandBase.__init__(self, "RenameDataSet")
    self.setSystem(system)
    self.setDataSetName(dataSetName)
    self.setNewDataSetName(newDataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

  def newDataSetName(self):
    return self.get("NewDataSetName")

  def setNewDataSetName(self, value):
    return self.set("NewDataSetName", value)

#
# Delete data set.
#
# Name        Type   Description
# ----------- ------ ---------------------------------------------
# System      string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
# DataSetName string The name of the data set to delete.
#

class DeleteDataSet(CommandBase):

  def __init__(self, system, dataSetName):
    CommandBase.__init__(self, "DeleteDataSet")
    self.setSystem(system)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Set active data set.
#
# Name        Type   Description
# ----------- ------ ---------------------------------------------
# System      string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
# DataSetName string The name of the data set to set as active.
#

class SetActiveDataSet(CommandBase):

  def __init__(self, system, dataSetName):
    CommandBase.__init__(self, "SetActiveDataSet")
    self.setSystem(system)
    self.setDataSetName(dataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Get active data set.
#
# Name   Type   Description
# ------ ------ ---------------------------------------------
# System string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
#

class GetActiveDataSet(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "GetActiveDataSet")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Result of GetActiveDataSet.
#
# Name        Type   Description
# ----------- ------ ---------------------------------------------
# System      string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
# DataSetName string The name of the data set to set as active.
#

class GetActiveDataSetResult(CommandResult):

  def __init__(self, system, dataSetName):
    CommandResult.__init__(self, "GetActiveDataSetResult")
    self.setSystem(system)
    self.setDataSetName(dataSetName)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

#
# Duplicate an existing data set.
#
# Name           Type            Description
# -------------- --------------- ----------------------------------------------------------------------------------
# System         string          "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
# DataSetName    string          The name of the data set to duplicate.
# NewDataSetName optional string The name of the new duplicate data set. If omitted, a copy name will be generated.
#

class DuplicateDataSet(CommandBase):

  def __init__(self, system, dataSetName, newDataSetName = None):
    CommandBase.__init__(self, "DuplicateDataSet")
    self.setSystem(system)
    self.setDataSetName(dataSetName)
    self.setNewDataSetName(newDataSetName)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def dataSetName(self):
    return self.get("DataSetName")

  def setDataSetName(self, value):
    return self.set("DataSetName", value)

  def newDataSetName(self):
    return self.get("NewDataSetName")

  def setNewDataSetName(self, value):
    return self.set("NewDataSetName", value)

#
# Elevation and Azimuth angular position.
#
# Name      Type   Description
# --------- ------ ----------------
# Elevation double Elevation angle.
# Azimuth   double Azimuth angle.
#

class ElevationAzimuth:

  def __init__(self, elevation, azimuth):
    self.Elevation = elevation
    self.Azimuth = azimuth

#
# Get elevation and azimuth position angles for all satellites.
#
# Name   Type   Description
# ------ ------ -----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
#

class GetElevationAzimuthForEachSV(CommandBase):

  def __init__(self, system):
    CommandBase.__init__(self, "GetElevationAzimuthForEachSV")
    self.setSystem(system)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

#
# Result of GetElevationAzimuthForEachSV.
#
# Name              Type                            Description
# ----------------- ------------------------------- -----------------------------------------------------------------
# System            string                          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
# ElevationAzimuths array optional ElevationAzimuth Elevation and Azimuth position angles of the satellites.
#

class GetElevationAzimuthForEachSVResult(CommandResult):

  def __init__(self, system, elevationAzimuths):
    CommandResult.__init__(self, "GetElevationAzimuthForEachSVResult")
    self.setSystem(system)
    self.setElevationAzimuths(elevationAzimuths)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def elevationAzimuths(self):
    return self.get("ElevationAzimuths")

  def setElevationAzimuths(self, value):
    return self.set("ElevationAzimuths", value)

#
# Get elevation and azimuth position angles for satellite.
#
# Name   Type   Description
# ------ ------ -----------------------------------------------------------------
# System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
# SvId   int    Satellite's SV ID.
#

class GetElevationAzimuthForSV(CommandBase):

  def __init__(self, system, svId):
    CommandBase.__init__(self, "GetElevationAzimuthForSV")
    self.setSystem(system)
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

#
# Result of GetElevationAzimuthForSV.
#
# Name             Type                      Description
# ---------------- ------------------------- -----------------------------------------------------------------
# System           string                    "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
# SvId             int                       Satellite's SV ID.
# ElevationAzimuth optional ElevationAzimuth Elevation and Azimuth position angles of the satellite.
#

class GetElevationAzimuthForSVResult(CommandResult):

  def __init__(self, system, svId, elevationAzimuth = None):
    CommandResult.__init__(self, "GetElevationAzimuthForSVResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setElevationAzimuth(elevationAzimuth)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def elevationAzimuth(self):
    return self.get("ElevationAzimuth")

  def setElevationAzimuth(self, value):
    return self.set("ElevationAzimuth", value)

#
# SBAS service message region.
#
# Name            Type   Description
# --------------- ------ -------------------------------------------------
# FirstLatitude   int    First latitude (deg).
# FirstLongitude  int    First longitude (deg).
# SecondLatitude  int    Second latitude (deg).
# SecondLongitude int    Second longitude (deg).
# Shape           string Region shape, accepts "Triangle" and "Rectangle".
#

class SbasServiceMessageRegion:

  def __init__(self, firstLatitude, firstLongitude, secondLatitude, secondLongitude, shape):
    self.FirstLatitude = firstLatitude
    self.FirstLongitude = firstLongitude
    self.SecondLatitude = secondLatitude
    self.SecondLongitude = secondLongitude
    self.Shape = shape

#
# Set (or Modify) a SBAS service message region group.
#
# Name            Type                           Description
# --------------- ------------------------------ ---------------------------------------------------------------------------------
# ServiceProvider string                         Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
# DeltaUdrei      int                            Delta UDREI applicable inside the defined regions. Accepted range is [0..15].
# PriorityCode    int                            Priority code of the SBAS service message region group. Accepted range is [0..3].
# Regions         array SbasServiceMessageRegion Array of SBAS service message regions. Accepted size range is [1..5].
# Id              string                         Unique identifier of the SBAS service message region group.
#

class SetSbasServiceMessageRegionGroup(CommandBase):

  def __init__(self, serviceProvider, deltaUdrei, priorityCode, regions, id):
    CommandBase.__init__(self, "SetSbasServiceMessageRegionGroup")
    self.setServiceProvider(serviceProvider)
    self.setDeltaUdrei(deltaUdrei)
    self.setPriorityCode(priorityCode)
    self.setRegions(regions)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

  def deltaUdrei(self):
    return self.get("DeltaUdrei")

  def setDeltaUdrei(self, value):
    return self.set("DeltaUdrei", value)

  def priorityCode(self):
    return self.get("PriorityCode")

  def setPriorityCode(self, value):
    return self.set("PriorityCode", value)

  def regions(self):
    return self.get("Regions")

  def setRegions(self, value):
    return self.set("Regions", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Get infos about the SBAS service message region group at this index.
#
# Name            Type   Description
# --------------- ------ -----------------------------------------------------------------------
# ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
# Id              string Unique identifier of the SBAS service message region group.
#

class GetSbasServiceMessageRegionGroup(CommandBase):

  def __init__(self, serviceProvider, id):
    CommandBase.__init__(self, "GetSbasServiceMessageRegionGroup")
    self.setServiceProvider(serviceProvider)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Result of GetSbasServiceMessageRegionGroup.
#
# Name            Type                           Description
# --------------- ------------------------------ ---------------------------------------------------------------------------------
# ServiceProvider string                         Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
# DeltaUdrei      int                            Delta UDREI applicable inside the defined regions. Accepted range is [0..15].
# PriorityCode    int                            Priority code of the SBAS service message region group. Accepted range is [0..3].
# Regions         array SbasServiceMessageRegion Array of SBAS service message regions. Accepted size range is [1..5].
# Id              string                         Unique identifier of the SBAS service message region group.
#

class GetSbasServiceMessageRegionGroupResult(CommandResult):

  def __init__(self, serviceProvider, deltaUdrei, priorityCode, regions, id):
    CommandResult.__init__(self, "GetSbasServiceMessageRegionGroupResult")
    self.setServiceProvider(serviceProvider)
    self.setDeltaUdrei(deltaUdrei)
    self.setPriorityCode(priorityCode)
    self.setRegions(regions)
    self.setId(id)

  def isSuccess(self):
    return True

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

  def deltaUdrei(self):
    return self.get("DeltaUdrei")

  def setDeltaUdrei(self, value):
    return self.set("DeltaUdrei", value)

  def priorityCode(self):
    return self.get("PriorityCode")

  def setPriorityCode(self, value):
    return self.set("PriorityCode", value)

  def regions(self):
    return self.get("Regions")

  def setRegions(self, value):
    return self.set("Regions", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Set SBAS delta UDREI outside all the defined regions for this service provider.
#
# Name            Type   Description
# --------------- ------ ----------------------------------------------------------------------------------
# ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
# DeltaUdrei      int    Delta UDREI applicable outside all the defined regions. Accepted range is [0..15].
#

class SetSbasDeltaUdreiOutsideOfRegions(CommandBase):

  def __init__(self, serviceProvider, deltaUdrei):
    CommandBase.__init__(self, "SetSbasDeltaUdreiOutsideOfRegions")
    self.setServiceProvider(serviceProvider)
    self.setDeltaUdrei(deltaUdrei)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

  def deltaUdrei(self):
    return self.get("DeltaUdrei")

  def setDeltaUdrei(self, value):
    return self.set("DeltaUdrei", value)

#
# Get SBAS delta UDREI outside all the defined regions for this service provider.
#
# Name            Type   Description
# --------------- ------ -----------------------------------------------------------------------
# ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
#

class GetSbasDeltaUdreiOutsideOfRegions(CommandBase):

  def __init__(self, serviceProvider):
    CommandBase.__init__(self, "GetSbasDeltaUdreiOutsideOfRegions")
    self.setServiceProvider(serviceProvider)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

#
# Result of GetSbasDeltaUdreiOutsideOfRegions.
#
# Name            Type   Description
# --------------- ------ ----------------------------------------------------------------------------------
# ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
# DeltaUdrei      int    Delta UDREI applicable outside all the defined regions. Accepted range is [0..15].
#

class GetSbasDeltaUdreiOutsideOfRegionsResult(CommandResult):

  def __init__(self, serviceProvider, deltaUdrei):
    CommandResult.__init__(self, "GetSbasDeltaUdreiOutsideOfRegionsResult")
    self.setServiceProvider(serviceProvider)
    self.setDeltaUdrei(deltaUdrei)

  def isSuccess(self):
    return True

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

  def deltaUdrei(self):
    return self.get("DeltaUdrei")

  def setDeltaUdrei(self, value):
    return self.set("DeltaUdrei", value)

#
# Removes a SBAS service message region group for the service provider.
#
# Name            Type   Description
# --------------- ------ -----------------------------------------------------------------------
# ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
# Id              string Unique identifier of the SBAS service message region group to remove.
#

class RemoveSbasServiceMessageRegionGroup(CommandBase):

  def __init__(self, serviceProvider, id):
    CommandBase.__init__(self, "RemoveSbasServiceMessageRegionGroup")
    self.setServiceProvider(serviceProvider)
    self.setId(id)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

  def id(self):
    return self.get("Id")

  def setId(self, value):
    return self.set("Id", value)

#
# Clears all SBAS service message region group for this service provider.
#
# Name            Type   Description
# --------------- ------ -----------------------------------------------------------------------
# ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
#

class ClearAllSbasServiceMessageRegionGroup(CommandBase):

  def __init__(self, serviceProvider):
    CommandBase.__init__(self, "ClearAllSbasServiceMessageRegionGroup")
    self.setServiceProvider(serviceProvider)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

#
# Swaps 2 SBAS service message region group.
#
# Name            Type   Description
# --------------- ------ ---------------------------------------------------------------------------------
# ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
# FirstId         string Unique identifier of the SBAS service message region group to swap with SecondId.
# SecondId        string Unique identifier of the SBAS service message region group to swap with FirstId.
#

class SwapSbasServiceMessageRegionGroup(CommandBase):

  def __init__(self, serviceProvider, firstId, secondId):
    CommandBase.__init__(self, "SwapSbasServiceMessageRegionGroup")
    self.setServiceProvider(serviceProvider)
    self.setFirstId(firstId)
    self.setSecondId(secondId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def serviceProvider(self):
    return self.get("ServiceProvider")

  def setServiceProvider(self, value):
    return self.set("ServiceProvider", value)

  def firstId(self):
    return self.get("FirstId")

  def setFirstId(self, value):
    return self.set("FirstId", value)

  def secondId(self):
    return self.get("SecondId")

  def setSecondId(self, value):
    return self.set("SecondId", value)

#
# Get  the computer system time since epoch at PPS0, for the computer running this Skydel instance.
# Use this command after StartPPS.
#
#

class GetComputerSystemTimeSinceEpochAtPps0(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetComputerSystemTimeSinceEpochAtPps0")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

#
# Result of GetComputerSystemTimeSinceEpochAtPps0.
#
# Name         Type   Description
# ------------ ------ ---------------------------------------------------------
# Milliseconds double Computer system time since epoch at PPS0 in milliseconds.
#

class GetComputerSystemTimeSinceEpochAtPps0Result(CommandResult):

  def __init__(self, milliseconds):
    CommandResult.__init__(self, "GetComputerSystemTimeSinceEpochAtPps0Result")
    self.setMilliseconds(milliseconds)

  def isSuccess(self):
    return True

  def milliseconds(self):
    return self.get("Milliseconds")

  def setMilliseconds(self, value):
    return self.set("Milliseconds", value)

#
# Set the time interval of the Raw Data logging.
#
# Name         Type Description
# ------------ ---- -------------------------
# Days         int  Interval in days.
# Hours        int  Interval in hours.
# Minutes      int  Interval in minutes.
# Seconds      int  Interval in seconds.
# Milliseconds int  Interval in milliseconds.
#

class SetRawDataLoggingInterval(CommandBase):

  def __init__(self, days, hours, minutes, seconds, milliseconds):
    CommandBase.__init__(self, "SetRawDataLoggingInterval")
    self.setDays(days)
    self.setHours(hours)
    self.setMinutes(minutes)
    self.setSeconds(seconds)
    self.setMilliseconds(milliseconds)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def days(self):
    return self.get("Days")

  def setDays(self, value):
    return self.set("Days", value)

  def hours(self):
    return self.get("Hours")

  def setHours(self, value):
    return self.set("Hours", value)

  def minutes(self):
    return self.get("Minutes")

  def setMinutes(self, value):
    return self.set("Minutes", value)

  def seconds(self):
    return self.get("Seconds")

  def setSeconds(self, value):
    return self.set("Seconds", value)

  def milliseconds(self):
    return self.get("Milliseconds")

  def setMilliseconds(self, value):
    return self.set("Milliseconds", value)

#
# Get the time interval of the Raw Data logging.
#
#

class GetRawDataLoggingInterval(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetRawDataLoggingInterval")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetRawDataLoggingInterval.
#
# Name         Type Description
# ------------ ---- -------------------------
# Days         int  Interval in days.
# Hours        int  Interval in hours.
# Minutes      int  Interval in minutes.
# Seconds      int  Interval in seconds.
# Milliseconds int  Interval in milliseconds.
#

class RawDataLoggingIntervalResult(CommandResult):

  def __init__(self, days, hours, minutes, seconds, milliseconds):
    CommandResult.__init__(self, "RawDataLoggingIntervalResult")
    self.setDays(days)
    self.setHours(hours)
    self.setMinutes(minutes)
    self.setSeconds(seconds)
    self.setMilliseconds(milliseconds)

  def isSuccess(self):
    return True

  def days(self):
    return self.get("Days")

  def setDays(self, value):
    return self.set("Days", value)

  def hours(self):
    return self.get("Hours")

  def setHours(self, value):
    return self.set("Hours", value)

  def minutes(self):
    return self.get("Minutes")

  def setMinutes(self, value):
    return self.set("Minutes", value)

  def seconds(self):
    return self.get("Seconds")

  def setSeconds(self, value):
    return self.set("Seconds", value)

  def milliseconds(self):
    return self.get("Milliseconds")

  def setMilliseconds(self, value):
    return self.set("Milliseconds", value)

#
# Sets the mode for how the maximum number of entries in the Status Log is handled. The "Unlimited" mode allows the Status Log to have an infinite amount of entries. The "Custom" mode allows to set a maximum entries count for the Status Log. In that mode, when the maximum count is reached, Skydel will start overwritting the older entries in the Status Log.
#
# Name Type   Description
# ---- ------ ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Mode string Status Log maximum count mode, accepts "Unlimited" and "Custom". If "Custom" mode is set, use the command SetStatusLogMaxEntriesCount to set the maximum number of entries in the Status Log.
#

class SetStatusLogMaxEntriesCountMode(CommandBase):

  def __init__(self, mode):
    CommandBase.__init__(self, "SetStatusLogMaxEntriesCountMode")
    self.setMode(mode)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def mode(self):
    return self.get("Mode")

  def setMode(self, value):
    return self.set("Mode", value)

#
# When SetStatusLogMaxEntriesCountMode is set to "Custom", this commands sets the maximum number of entries in the Status Log. Default value is 1000 entries.
#
# Name     Type Description
# -------- ---- --------------------------
# MaxCount int  Maximum number of entries.
#

class SetStatusLogMaxEntriesCount(CommandBase):

  def __init__(self, maxCount):
    CommandBase.__init__(self, "SetStatusLogMaxEntriesCount")
    self.setMaxCount(maxCount)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_NO_CONFIG | ExecutePermission.EXECUTE_IF_IDLE | ExecutePermission.EXECUTE_IF_SIMULATING

  def maxCount(self):
    return self.get("MaxCount")

  def setMaxCount(self, value):
    return self.set("MaxCount", value)

#
# The SV data update mode.
#

class SVDataUpdateMode:
  Extrapolation = 0
  Dynamic = 1

#
# Set the SV Data Update Mode.
#
# Name Type             Description
# ---- ---------------- ------------------------------------------------------------------
# Mode SVDataUpdateMode SV Data Update Mode:
#                       Extrapolation: Skydel extrapolates from the first block (default).
#                       Dynamic: Blocks must be pushed during the simulation.
#

class SetSVDataUpdateMode(CommandBase):

  def __init__(self, mode):
    CommandBase.__init__(self, "SetSVDataUpdateMode")
    self.setMode(mode)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def mode(self):
    return self.get("Mode")

  def setMode(self, value):
    return self.set("Mode", value)

#
# Get the SV Data Update Mode.
#
#

class GetSVDataUpdateMode(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetSVDataUpdateMode")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

#
# Result of GetSVDataUpdateMode.
#
# Name Type             Description
# ---- ---------------- ------------------------------------------------------------------
# Mode SVDataUpdateMode SV Data Update Mode:
#                       Extrapolation: Skydel extrapolates from the first block (default).
#                       Dynamic: Blocks must be pushed during the simulation.
#

class GetSVDataUpdateModeResult(CommandResult):

  def __init__(self, mode):
    CommandResult.__init__(self, "GetSVDataUpdateModeResult")
    self.setMode(mode)

  def isSuccess(self):
    return True

  def mode(self):
    return self.get("Mode")

  def setMode(self, value):
    return self.set("Mode", value)

#
# Push a block of data defining the orbit, clock, and other parameters for one SV.
#   ParamName           Unit
#   "Time of ephemeris" sec (of GPS week)
#   "Week Number"       week
#   "Transmission Time" sec (of GPS week)
#   "ClockBias"         sec
#   "ClockDrift"        sec/sec
#   "ClockDriftRate"    sec/sec^2
#   "Crs"               meter
#   "Crc"               meter
#   "Cis"               rad
#   "Cic"               rad
#   "Cus"               rad
#   "Cuc"               rad
#   "DeltaN"            rad/sec
#   "M0"                rad
#   "Eccentricity"      -
#   "SqrtA"             sqrt(meter)
#   "BigOmega"          rad
#   "I0"                rad
#   "LittleOmega"       rad
#   "BigOmegaDot"       rad/sec
#   "Idot"              rad/sec
#   "Accuracy"          meter
#   "Adot"              meters/sec
#   "DeltaN0dot"        rad/sec^2
# 
# After a block is pushed for a SV, no other block can be pushed for that SV until the interpolation period is over.
#   Constellation   Interpolation period (sec)
#   GPS             3600
#   Galileo         300
#   BeiDou          1800
#   QZSS            1800
#   NavIC           2400
#
# Name           Type               Description
# -------------- ------------------ ------------------------------------------------------------------------------
# System         string             "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC".
# SvId           int                Satellite's SV ID.
# Toc            datetime           Time of Clock.
# ParametersDict dict string:double A dictionary of parameters pairs.
#                                   Accepted keys are: "Time of ephemeris", "Week Number", "Transmission Time",
#                                                      "ClockBias", "ClockDrift", "ClockDriftRate", "Crs", "Crc",
#                                                      "Cis", "Cic", "Cus", "Cuc", "DeltaN", "M0", "Eccentricity",
#                                                      "SqrtA", "BigOmega", "I0", "LittleOmega", "BigOmegaDot",
#                                                      "Idot", "Adot", "DeltaN0dot", "UraIndex", "IODE", "IODNAV",
#                                                      "IODEC", "IODC", "Tgd", "IscL1CA", "IscL2C", "IscL5I5",
#                                                      "IscL5Q5", "IscL1CP", "IscL1CD", "BgdE1E5a", "BgdE1E5b",
#                                                      "Tgd1", "Tgd2", "TgdB1Cp", "TgdB2ap", "IscB1Cd", "IscB2ad",
#                                                      "SisaE1E5a" and "SisaE1E5b"
#

class PushDynamicSVData(CommandBase):

  def __init__(self, system, svId, toc, parametersDict):
    CommandBase.__init__(self, "PushDynamicSVData")
    self.setSystem(system)
    self.setSvId(svId)
    self.setToc(toc)
    self.setParametersDict(parametersDict)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def toc(self):
    return self.get("Toc")

  def setToc(self, value):
    return self.set("Toc", value)

  def parametersDict(self):
    return self.get("ParametersDict")

  def setParametersDict(self, value):
    return self.set("ParametersDict", value)

#
# A pair of string
#
# Name   Type   Description
# ------ ------ ---------------------
# First  string First string in pair
# Second string Second string in pair
#

class StringPair:

  def __init__(self, first, second):
    self.First = first
    self.Second = second

#
# Please note the command ResetHilWarning is deprecated since 22.5. You may use GetHilExtrapolationState.
# 
# Reset Hardware in the loop trajectory server warning message.
#
#

class ResetHilWarning(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "ResetHilWarning")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

  def deprecated(self):
    return "Please note the command ResetHilWarning is deprecated since 22.5. You may use GetHilExtrapolationState."

#
# Please note the command GetLastHilWarning is deprecated since 22.5. You may use GetHilExtrapolationState.
# 
# Get last Hardware in the loop trajectory server warning message. Returns HilWarningResult.
#
#

class GetLastHilWarning(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetLastHilWarning")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

  def deprecated(self):
    return "Please note the command GetLastHilWarning is deprecated since 22.5. You may use GetHilExtrapolationState."

#
# Result of GetLastHilWarning.
#
# Name              Type Description
# ----------------- ---- -----------------------------------------------------------------------------------------------------------------------------------
# IsExtrapolated    bool Indicate if there is receiver position has been extrapolated because of the HIL client that did not send receiver position in time.
# ExtrapolationTime int  Time of last extrapolated position
#

class HilWarningResult(CommandResult):

  def __init__(self, isExtrapolated, extrapolationTime):
    CommandResult.__init__(self, "HilWarningResult")
    self.setIsExtrapolated(isExtrapolated)
    self.setExtrapolationTime(extrapolationTime)

  def isSuccess(self):
    return True

  def isExtrapolated(self):
    return self.get("IsExtrapolated")

  def setIsExtrapolated(self, value):
    return self.set("IsExtrapolated", value)

  def extrapolationTime(self):
    return self.get("ExtrapolationTime")

  def setExtrapolationTime(self, value):
    return self.set("ExtrapolationTime", value)

#
# Please note the command SetSbasUdrei is deprecated since 22.2. You may use SetUdreiForSV.
# 
# Set the global UDREI value transmitted by SBAS
#
# Name  Type Description
# ----- ---- ---------------
# Udrei int  The UDREI value
#

class SetSbasUdrei(CommandBase):

  def __init__(self, udrei):
    CommandBase.__init__(self, "SetSbasUdrei")
    self.setUdrei(udrei)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def udrei(self):
    return self.get("Udrei")

  def setUdrei(self, value):
    return self.set("Udrei", value)

  def deprecated(self):
    return "Please note the command SetSbasUdrei is deprecated since 22.2. You may use SetUdreiForSV."

#
# Please note the command GetSbasUdrei is deprecated since 22.2. You may use GetUdreiForSV.
# 
# Get the global UDREI value transmitted by SBAS
#
#

class GetSbasUdrei(CommandBase):

  def __init__(self):
    CommandBase.__init__(self, "GetSbasUdrei")

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_IDLE

  def deprecated(self):
    return "Please note the command GetSbasUdrei is deprecated since 22.2. You may use GetUdreiForSV."

#
# Result of GetSbasUdrei.
#
# Name  Type Description
# ----- ---- ---------------
# Udrei int  The UDREI value
#

class GetSbasUdreiResult(CommandResult):

  def __init__(self, udrei):
    CommandResult.__init__(self, "GetSbasUdreiResult")
    self.setUdrei(udrei)

  def isSuccess(self):
    return True

  def udrei(self):
    return self.get("Udrei")

  def setUdrei(self, value):
    return self.set("Udrei", value)

#
# Please note the command SetPowerForSV is deprecated since 22.7. You may use SetManualPowerOffsetForSV.
# 
# Set power offset for specified satellite SV ID. Use SV ID 0 to set power for all satellites.
#
# Name            Type   Description
# --------------- ------ -----------------------------------------------------------------------------------------
# System          string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId            int    The Satellite SV ID
# PowerOffset     double Power offset in dB (relative to signal power reference level)
# OtherSatsFollow bool   If true, other sats power will be adjusted to maintain current offsets between satellites
#

class SetPowerForSV(CommandBase):

  def __init__(self, system, svId, powerOffset, otherSatsFollow):
    CommandBase.__init__(self, "SetPowerForSV")
    self.setSystem(system)
    self.setSvId(svId)
    self.setPowerOffset(powerOffset)
    self.setOtherSatsFollow(otherSatsFollow)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def powerOffset(self):
    return self.get("PowerOffset")

  def setPowerOffset(self, value):
    return self.set("PowerOffset", value)

  def otherSatsFollow(self):
    return self.get("OtherSatsFollow")

  def setOtherSatsFollow(self, value):
    return self.set("OtherSatsFollow", value)

  def deprecated(self):
    return "Please note the command SetPowerForSV is deprecated since 22.7. You may use SetManualPowerOffsetForSV."

#
# Please note the command GetPowerForSV is deprecated since 22.7. You may use GetAllPowerForSV.
# 
# Get the power offset for specified satellite SV ID.
#
# Name   Type   Description
# ------ ------ -----------------------------------------------------------------------------------
# System string The system, can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId   int    The Satellite SV ID
#

class GetPowerForSV(CommandBase):

  def __init__(self, system, svId):
    CommandBase.__init__(self, "GetPowerForSV")
    self.setSystem(system)
    self.setSvId(svId)

  def executePermission(self):
    return ExecutePermission.EXECUTE_IF_SIMULATING

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def deprecated(self):
    return "Please note the command GetPowerForSV is deprecated since 22.7. You may use GetAllPowerForSV."

#
# Result of GetPowerForSV.
#
# Name                Type   Description
# ------------------- ------ -----------------------------------------------------------------------------------------------------------
# System              string The system, can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
# SvId                int    The Satellite SV ID
# NominalPower        double The nominal power in dBm
# SignalStrengthModel double The power difference coming from the Signal Strength Model (dB)
# Antenna             double The receiver antenna power offset (dB). It depends on antenna pattern and relative orientation with signal.
# SignalLevelOffset   double The global power offset (dB)
# ManualGain          double The power offset provided by the user (dB). See SetPowerForSV
# Total               double The sum of all the other fields (dBm)
#

class GetPowerForSVResult(CommandResult):

  def __init__(self, system, svId, nominalPower, signalStrengthModel, antenna, signalLevelOffset, manualGain, total):
    CommandResult.__init__(self, "GetPowerForSVResult")
    self.setSystem(system)
    self.setSvId(svId)
    self.setNominalPower(nominalPower)
    self.setSignalStrengthModel(signalStrengthModel)
    self.setAntenna(antenna)
    self.setSignalLevelOffset(signalLevelOffset)
    self.setManualGain(manualGain)
    self.setTotal(total)

  def isSuccess(self):
    return True

  def system(self):
    return self.get("System")

  def setSystem(self, value):
    return self.set("System", value)

  def svId(self):
    return self.get("SvId")

  def setSvId(self, value):
    return self.set("SvId", value)

  def nominalPower(self):
    return self.get("NominalPower")

  def setNominalPower(self, value):
    return self.set("NominalPower", value)

  def signalStrengthModel(self):
    return self.get("SignalStrengthModel")

  def setSignalStrengthModel(self, value):
    return self.set("SignalStrengthModel", value)

  def antenna(self):
    return self.get("Antenna")

  def setAntenna(self, value):
    return self.set("Antenna", value)

  def signalLevelOffset(self):
    return self.get("SignalLevelOffset")

  def setSignalLevelOffset(self, value):
    return self.set("SignalLevelOffset", value)

  def manualGain(self):
    return self.get("ManualGain")

  def setManualGain(self, value):
    return self.set("ManualGain", value)

  def total(self):
    return self.get("Total")

  def setTotal(self, value):
    return self.set("Total", value)

