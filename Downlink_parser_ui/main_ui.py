#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'downlink_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

"""
 - Main QT application class.
:copyright: Skydel Â© 2024
:Version: 24.4.1
"""
import PyQt5
from PyQt5 import QtWidgets, QtGui, QtCore
from PyQt5.QtWidgets import QMessageBox

import argparse
import sys
from downlink_parser import decode_gps, decode_galileo, decode_beidou, decode_glonass, decode_sbas, decode_qzss, decode_navic

class SkydelDecoder(object):
    # Utility to convert signal to navigation message family
    def signal_nav_msg_family(self, signal, is_geo=False):
        # Skydel 24.4
        # if signal in ['L1CA', 'L1P', 'L2P']:
        #     return 'GPS_LNAV'
        # if signal in ['L2C', 'L5']:
        #     return 'GPS_CNAV'
        # if signal in ['L1C']:
        #     return 'GPS_CNAV2'
        # if signal in ['G1', 'G2']:
        #     return 'GLONASS_NAV'
        # if signal in ['E1', 'E5b']:
        #     return 'GALILEO_INAV'
        # if signal in ['E5a']:
        #     return 'GALILEO_FNAV'
        # if signal in ['E6']:
        #     return 'GALILEO_CNAV'
        # if signal in ['B1', 'B2']:
        #     return 'BEIDOU_D2_NAV' if is_geo else 'BEIDOU_D1_NAV'
        # if signal in ['B1C']:
        #     return 'BEIDOU_CNAV1'
        # if signal in ['B2a']:
        #     return 'BEIDOU_CNAV2'
        # if signal in ['QZSSL1CA', 'QZSSL1CB']:
        #     return 'QZSS_LNAV'
        # if signal in ['QZSSL2C', 'QZSSL5']:
        #     return 'QZSS_CNAV'
        # if signal in ['QZSSL1C']:
        #     return 'QZSS_CNAV2'
        # if signal in ['NAVICL5']:
        #     return 'NAVIC_NAV'
        # if signal in ['SBASL1', 'SBASL5']:
        #     return 'SBAS_NAV'
        # #Current
        # if signal in ['L1CA', 'L1P', 'L2P']:
        #     return 'GPS_LNAV'
        # if signal in ['L2C', 'L5']:
        #     return 'GPS_CNAV'
        # if signal in ['L1C']:
        #     return 'GPS_CNAV2'
        # if signal in ['G1', 'G2']:
        #     return 'GLONASS_NAV'
        # if signal in ['E1', 'E5b']:
        #     return 'GALILEO_INAV'
        # if signal in ['E5a']:
        #     return 'GALILEO_FNAV'
        # if signal in ['E6']:
        #     return 'GALILEO_CNAV'
        # if signal in ['B1', 'B2']:
        #     return 'BEIDOU_D2_NAV' if is_geo else 'BEIDOU_D1_NAV'
        # if signal in ['B1C']:
        #     return 'BEIDOU_CNAV1'
        # if signal in ['B2a']:
        #     return 'BEIDOU_CNAV2'
        # if signal in ['QZSSL1CA', 'QZSSL1CB']:
        #     return 'QZSS_LNAV'
        # if signal in ['QZSSL2C', 'QZSSL5']:
        #     return 'QZSS_CNAV'
        # if signal in ['QZSSL1C']:
        #     return 'QZSS_CNAV2'
        # if signal in ['QZSSL6']:
        #     return 'QZSS_CLAS'
        # if signal in ['NAVICL5']:
        #     return 'NAVIC_NAV'
        # if signal in ['SBASL1', 'SBASL5']:
        #     return 'SBAS_NAV'

    #With NAVICS
        if signal in ['L1CA', 'L1P', 'L2P']:
            return 'GPS_LNAV'
        if signal in ['L2C', 'L5']:
            return 'GPS_CNAV'
        if signal in ['L1C']:
            return 'GPS_CNAV2'
        if signal in ['G1', 'G2']:
            return 'GLONASS_NAV'
        if signal in ['E1', 'E5b']:
            return 'GALILEO_INAV'
        if signal in ['E5a']:
            return 'GALILEO_FNAV'
        if signal in ['E6']:
            return 'GALILEO_CNAV'
        if signal in ['B1', 'B2']:
            return 'BEIDOU_D2_NAV' if is_geo else 'BEIDOU_D1_NAV'
        if signal in ['B1C']:
            return 'BEIDOU_CNAV1'
        if signal in ['B2a']:
            return 'BEIDOU_CNAV2'
        if signal in ['QZSSL1CA', 'QZSSL1CB']:
            return 'QZSS_LNAV'
        if signal in ['QZSSL2C', 'QZSSL5']:
            return 'QZSS_CNAV'
        if signal in ['QZSSL1C']:
            return 'QZSS_CNAV2'
        if signal in ['NAVICL5', 'NAVICS']:
            return 'NAVIC_NAV'
        if signal in ['SBASL1', 'SBASL5']:
            return 'SBAS_NAV'

    def get_input_content(self, input_path):
        with open(input_path, 'r') as downlink:
            return downlink.readlines()

    def write_decoded_downlink_message(self, output, msg_dict, format, line, write_original_line):
        if write_original_line:
            output.write(f"{format}{line}\n")
        for key, value in msg_dict.items():
            output.write(f"{key},{value['range']},{value['binary']},{value['decimal']},{value['unit']}\n")
        output.write("\n")

    def write_decoded_downlink(self, input_path, output, decoders, downlink_type, nav_msg_family, write_original_line=True):
        content = self.get_input_content(input_path)
        input_iterator = iter(content)

        # Decode every line of the downlink.
        decoder = decoders[downlink_type][nav_msg_family]
        format = next(input_iterator)
        navMsgIdx = format.strip().split(',').index('Navigation Message (Hex)')

        if nav_msg_family == 'GLONASS_NAV':
            frameIdx = format.split(',').index('Subframe')
            line_decoder = lambda line: decoder(line.split(',')[navMsgIdx], int(line.split(',')[frameIdx]))
        else:
            line_decoder = lambda line: decoder(line.split(',')[navMsgIdx])

        for line in input_iterator:
            msg_dict = line_decoder(line)
            self.write_decoded_downlink_message(output, msg_dict, format, line, write_original_line)

    def get_decoders(self):
        decoded_decoders = {'GPS_LNAV': decode_gps.getDictGPSL1CADecodedNavigationMessage,
                            'GPS_CNAV2': decode_gps.getDictGPSL1CDecodedNavigationMessage,
                            'GPS_CNAV': decode_gps.getDictGPSL5NavigationMessage,
                            'GLONASS_NAV': decode_glonass.getDictGLONASSNavigationMessage,
                            'GALILEO_INAV': decode_galileo.getDictGalileoINavigationMessage,
                            'GALILEO_FNAV': decode_galileo.getDictGalileoFNavigationMessage,
                            'GALILEO_CNAV': decode_galileo.getDictGalileoCNavigationMessage,
                            'BEIDOU_D1_NAV': decode_beidou.getDictBeiDouB1D1DecodedNavigationMessage,
                            'BEIDOU_D2_NAV': decode_beidou.getDictBeiDouB1D2DecodedNavigationMessage,
                            'BEIDOU_CNAV1': decode_beidou.getDictBeiDouCNAV1DecodedNavigationMessage,
                            'BEIDOU_CNAV2': decode_beidou.getDictBeiDouCNAV2DecodedNavigationMessage,
                            'SBAS_NAV': decode_sbas.getDictSBASL1NavigationMessage,
                            'QZSS_LNAV': decode_qzss.getDictQZSSL1CADecodedNavigationMessage,
                            'QZSS_SLAS': decode_qzss.getDictQZSSL1SDecodedNavigationMessage,
                            #'QZSS_CLAS': decode_qzss.getDictQZSSL6DecodedNavigationMessage,
                            'NAVIC_NAV': decode_navic.getDictNavICNAVNavigationMessage}

        encoded_decoders = {'GPS_LNAV': decode_gps.getDictGPSL1CAEncodedNavigationMessage,
                            'GPS_CNAV2': decode_gps.getDictGPSL1CEncodedNavigationMessage,
                            'BEIDOU_D1_NAV': decode_beidou.getDictBeiDouB1D1EncodedNavigationMessage,
                            'BEIDOU_D2_NAV': decode_beidou.getDictBeiDouB1D2EncodedNavigationMessage,
                            'BEIDOU_CNAV1': decode_beidou.getDictBeiDouCNAV1DecodedNavigationMessage,
                            'BEIDOU_CNAV2': decode_beidou.getDictBeiDouCNAV2EncodedNavigationMessage,
                            'QZSS_LNAV': decode_qzss.getDictQZSSL1CAEncodedNavigationMessage}

        partial_decoders = {'GPS_CNAV2': decode_gps.getDictGPSL1CPartialNavigationMessage}

        return {'DECODED': decoded_decoders,
                'ENCODED': encoded_decoders,
                'PARTIAL': partial_decoders}

    def get_parser(self, decoders):
        nav_msg_families = list(dict.fromkeys([key for values in decoders.values() for key in values.keys()]))
        nav_msg_families = list(dict.fromkeys([key for values in decoders.values() for key in values.keys()]))
        decoder_types = [key for key in decoders.keys()]
        parser = argparse.ArgumentParser(description="Decode a downlink file")
        parser.add_argument('decoder', type=str, help=f"Type of decoder {decoder_types}")
        parser.add_argument('nav_msg_family', metavar='nav-msg-family', type=str,
                            help=f"Navigation message family {nav_msg_families}")
        parser.add_argument('input', type=str, help="Downlink file to decode")
        parser.add_argument('-o', '--output', type=str,
                            help="Write decoded downlink in specified file, otherwise write to console")
        return parser

    def validate_args(self, args, decoders):
        if args.decoder not in decoders:
            print(f"Invalid decoder type '{args.decoder}', valid decoder types are {list(decoders.keys())}")
            sys.exit()

        if args.nav_msg_family not in decoders[args.decoder]:
            print(
                f"Invalid NAV msg family '{args.nav_msg_family}' for decoder type '{args.decoder}', valid NAV msg family are {list(decoders[args.decoder].keys())}'")
            sys.exit()

    def get_output(self, output_path):
        if output_path == None:
            return sys.stdout
        else:
            # return open(args.output, 'w')
            return open(output_path, 'w')

class Ui_MainWindow(object):

    def __init__(self, *args, **kwargs):
        self.testfname = ""
        self.nav_fam = ""
        self.decoder_str = "DECODED"

    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(436, 720)
        MainWindow.setMinimumSize(QtCore.QSize(350, 700))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(66, 73, 90))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(55, 61, 75))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(22, 24, 30))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(29, 32, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(210, 210, 210))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Link, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.LinkVisited, brush)
        brush = QtGui.QBrush(QtGui.QColor(22, 24, 30))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(44, 49, 60))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(210, 210, 210))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(66, 73, 90))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(55, 61, 75))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(22, 24, 30))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(29, 32, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(210, 210, 210))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Link, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.LinkVisited, brush)
        brush = QtGui.QBrush(QtGui.QColor(22, 24, 30))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(44, 49, 60))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(210, 210, 210))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(22, 24, 30))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(66, 73, 90))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(55, 61, 75))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(22, 24, 30))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(29, 32, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(22, 24, 30))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(22, 24, 30))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(51, 153, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Link, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.LinkVisited, brush)
        brush = QtGui.QBrush(QtGui.QColor(44, 49, 60))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(44, 49, 60))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(210, 210, 210))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        MainWindow.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(10)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet("QMainWindow {background: transparent; }\n"
"QToolTip {\n"
"    color: #ffffff;\n"
"    background-color: rgba(27, 29, 35, 160);\n"
"    border: 1px solid rgb(40, 40, 40);\n"
"    border-radius: 2px;\n"
"}")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("background: transparent;\n"
"color: rgb(210, 210, 210);")
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setContentsMargins(10, 10, 10, 10)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame_main = QtWidgets.QFrame(self.centralwidget)
        self.frame_main.setStyleSheet("/* LINE EDIT */\n"
"QLineEdit {\n"
"    background-color: rgb(27, 29, 35);\n"
"    border-radius: 5px;\n"
"    border: 2px solid rgb(27, 29, 35);\n"
"    padding-left: 10px;\n"
"}\n"
"QLineEdit:hover {\n"
"    border: 2px solid rgb(64, 71, 88);\n"
"}\n"
"QLineEdit:focus {\n"
"    border: 2px solid rgb(91, 101, 124);\n"
"}\n"
"\n"
"/* SCROLL BARS */\n"
"QScrollBar:horizontal {\n"
"    border: none;\n"
"    background: rgb(52, 59, 72);\n"
"    height: 14px;\n"
"    margin: 0px 21px 0 21px;\n"
"    border-radius: 0px;\n"
"}\n"
"QScrollBar::handle:horizontal {\n"
"    background: rgb(85, 170, 255);\n"
"    min-width: 25px;\n"
"    border-radius: 7px\n"
"}\n"
"QScrollBar::add-line:horizontal {\n"
"    border: none;\n"
"    background: rgb(55, 63, 77);\n"
"    width: 20px;\n"
"    border-top-right-radius: 7px;\n"
"    border-bottom-right-radius: 7px;\n"
"    subcontrol-position: right;\n"
"    subcontrol-origin: margin;\n"
"}\n"
"QScrollBar::sub-line:horizontal {\n"
"    border: none;\n"
"    background: rgb(55, 63, 77);\n"
"    width: 20px;\n"
"    border-top-left-radius: 7px;\n"
"    border-bottom-left-radius: 7px;\n"
"    subcontrol-position: left;\n"
"    subcontrol-origin: margin;\n"
"}\n"
"QScrollBar::up-arrow:horizontal, QScrollBar::down-arrow:horizontal\n"
"{\n"
"     background: none;\n"
"}\n"
"QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal\n"
"{\n"
"     background: none;\n"
"}\n"
" QScrollBar:vertical {\n"
"    border: none;\n"
"    background: rgb(52, 59, 72);\n"
"    width: 14px;\n"
"    margin: 21px 0 21px 0;\n"
"    border-radius: 0px;\n"
" }\n"
" QScrollBar::handle:vertical {    \n"
"    background: rgb(85, 170, 255);\n"
"    min-height: 25px;\n"
"    border-radius: 7px\n"
" }\n"
" QScrollBar::add-line:vertical {\n"
"     border: none;\n"
"    background: rgb(55, 63, 77);\n"
"     height: 20px;\n"
"    border-bottom-left-radius: 7px;\n"
"    border-bottom-right-radius: 7px;\n"
"     subcontrol-position: bottom;\n"
"     subcontrol-origin: margin;\n"
" }\n"
" QScrollBar::sub-line:vertical {\n"
"    border: none;\n"
"    background: rgb(55, 63, 77);\n"
"     height: 20px;\n"
"    border-top-left-radius: 7px;\n"
"    border-top-right-radius: 7px;\n"
"     subcontrol-position: top;\n"
"     subcontrol-origin: margin;\n"
" }\n"
" QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical {\n"
"     background: none;\n"
" }\n"
"\n"
" QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {\n"
"     background: none;\n"
" }\n"
"\n"
"/* CHECKBOX */\n"
"QCheckBox::indicator {\n"
"    border: 3px solid rgb(52, 59, 72);\n"
"    width: 15px;\n"
"    height: 15px;\n"
"    border-radius: 10px;\n"
"    background: rgb(44, 49, 60);\n"
"}\n"
"QCheckBox::indicator:hover {\n"
"    border: 3px solid rgb(58, 66, 81);\n"
"}\n"
"QCheckBox::indicator:checked {\n"
"    background: 3px solid rgb(52, 59, 72);\n"
"    border: 3px solid rgb(52, 59, 72);    \n"
"    background-image: url(:/16x16/icons/16x16/cil-check-alt.png);\n"
"}\n"
"\n"
"/* RADIO BUTTON */\n"
"QRadioButton::indicator {\n"
"    border: 3px solid rgb(52, 59, 72);\n"
"    width: 15px;\n"
"    height: 15px;\n"
"    border-radius: 10px;\n"
"    background: rgb(44, 49, 60);\n"
"}\n"
"QRadioButton::indicator:hover {\n"
"    border: 3px solid rgb(58, 66, 81);\n"
"}\n"
"QRadioButton::indicator:checked {\n"
"    background: 3px solid rgb(94, 106, 130);\n"
"    border: 3px solid rgb(52, 59, 72);    \n"
"}\n"
"\n"
"/* COMBOBOX */\n"
"QComboBox{\n"
"    background-color: rgb(27, 29, 35);\n"
"    border-radius: 5px;\n"
"    border: 2px solid rgb(27, 29, 35);\n"
"    padding: 5px;\n"
"    padding-left: 10px;\n"
"}\n"
"QComboBox:hover{\n"
"    border: 2px solid rgb(64, 71, 88);\n"
"}\n"
"QComboBox::drop-down {\n"
"    subcontrol-origin: padding;\n"
"    subcontrol-position: top right;\n"
"    width: 25px; \n"
"    border-left-width: 3px;\n"
"    border-left-color: rgba(39, 44, 54, 150);\n"
"    border-left-style: solid;\n"
"    border-top-right-radius: 3px;\n"
"    border-bottom-right-radius: 3px;    \n"
"    background-image: url(:/16x16/icons/16x16/cil-arrow-bottom.png);\n"
"    background-position: center;\n"
"    background-repeat: no-reperat;\n"
" }\n"
"QComboBox QAbstractItemView {\n"
"    color: rgb(85, 170, 255);    \n"
"    background-color: rgb(27, 29, 35);\n"
"    padding: 10px;\n"
"    selection-background-color: rgb(39, 44, 54);\n"
"}\n"
"\n"
"/* SLIDERS */\n"
"QSlider::groove:horizontal {\n"
"    border-radius: 9px;\n"
"    height: 18px;\n"
"    margin: 0px;\n"
"    background-color: rgb(52, 59, 72);\n"
"}\n"
"QSlider::groove:horizontal:hover {\n"
"    background-color: rgb(55, 62, 76);\n"
"}\n"
"QSlider::handle:horizontal {\n"
"    background-color: rgb(85, 170, 255);\n"
"    border: none;\n"
"    height: 18px;\n"
"    width: 18px;\n"
"    margin: 0px;\n"
"    border-radius: 9px;\n"
"}\n"
"QSlider::handle:horizontal:hover {\n"
"    background-color: rgb(105, 180, 255);\n"
"}\n"
"QSlider::handle:horizontal:pressed {\n"
"    background-color: rgb(65, 130, 195);\n"
"}\n"
"\n"
"QSlider::groove:vertical {\n"
"    border-radius: 9px;\n"
"    width: 18px;\n"
"    margin: 0px;\n"
"    background-color: rgb(52, 59, 72);\n"
"}\n"
"QSlider::groove:vertical:hover {\n"
"    background-color: rgb(55, 62, 76);\n"
"}\n"
"QSlider::handle:vertical {\n"
"    background-color: rgb(85, 170, 255);\n"
"    border: none;\n"
"    height: 18px;\n"
"    width: 18px;\n"
"    margin: 0px;\n"
"    border-radius: 9px;\n"
"}\n"
"QSlider::handle:vertical:hover {\n"
"    background-color: rgb(105, 180, 255);\n"
"}\n"
"QSlider::handle:vertical:pressed {\n"
"    background-color: rgb(65, 130, 195);\n"
"}\n"
"\n"
"")
        self.frame_main.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_main.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_main.setObjectName("frame_main")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame_main)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame_center = QtWidgets.QFrame(self.frame_main)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_center.sizePolicy().hasHeightForWidth())
        self.frame_center.setSizePolicy(sizePolicy)
        self.frame_center.setStyleSheet("background-color: rgb(40, 44, 52);")
        self.frame_center.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_center.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_center.setObjectName("frame_center")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_center)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.frame_content_right = QtWidgets.QFrame(self.frame_center)
        self.frame_content_right.setStyleSheet("background-color: rgb(44, 49, 60);")
        self.frame_content_right.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_content_right.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_content_right.setObjectName("frame_content_right")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_content_right)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.frame_content = QtWidgets.QFrame(self.frame_content_right)
        self.frame_content.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_content.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_content.setObjectName("frame_content")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.frame_content)
        self.verticalLayout_9.setContentsMargins(5, 5, 5, 5)
        self.verticalLayout_9.setSpacing(0)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.stackedWidget = QtWidgets.QStackedWidget(self.frame_content)
        self.stackedWidget.setStyleSheet("background: transparent;")
        self.stackedWidget.setObjectName("stackedWidget")
        self.page_home = QtWidgets.QWidget()
        self.page_home.setObjectName("page_home")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.page_home)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.stackedWidget.addWidget(self.page_home)
        self.page_widgets = QtWidgets.QWidget()
        self.page_widgets.setObjectName("page_widgets")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.page_widgets)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.frame_2 = QtWidgets.QFrame(self.page_widgets)
        self.frame_2.setMinimumSize(QtCore.QSize(0, 0))
        self.frame_2.setStyleSheet("background-color: rgb(39, 44, 54);\n"
"border-radius: 5px;")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        # self.label_4 = QtWidgets.QLabel(self.frame_2)
        # font = QtGui.QFont()
        # font.setBold(True)
        # self.label_4.setFont(font)
        # self.label_4.setFrameShadow(QtWidgets.QFrame.Raised)
        # self.label_4.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignHCenter)
        # self.label_4.setObjectName("label_4")
        # self.gridLayout_2.addWidget(self.label_4, 2, 1, 1, 1)
        self.lineEdit_5 = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_5.setObjectName("lineEdit_5")

        self.gridLayout_2.addWidget(self.lineEdit_5, 3, 1, 1, 1)
        self.selct_file_btn = QtWidgets.QPushButton(self.frame_2)
        self.selct_file_btn.setObjectName("selct_file_btn")

        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(9)
        self.selct_file_btn.setFont(font)
        self.selct_file_btn.setStyleSheet("Qsave_btn {\n"
                                      "    border: 2px solid rgb(52, 59, 72);\n"
                                      "    border-radius: 5px;    \n"
                                      "    background-color: rgb(52, 59, 72);\n"
                                      "}\n"
                                      "Qsave_btn:hover {\n"
                                      "    background-color: rgb(57, 65, 80);\n"
                                      "    border: 2px solid rgb(61, 70, 86);\n"
                                      "}\n"
                                      "Qsave_btn:pressed {    \n"
                                      "    background-color: rgb(35, 40, 49);\n"
                                      "    border: 2px solid rgb(43, 50, 61);\n"
                                      "}")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/16x16/icons/16x16/cil-folder-open.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.selct_file_btn.setIcon(icon3)
        self.selct_file_btn.setObjectName("selct_file_btn")
        self.selct_file_btn.clicked.connect(self.load_file)

        self.gridLayout_2.addWidget(self.selct_file_btn, 3, 0, 1, 1)
        self.label_title = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_title.setFont(font)
        self.label_title.setStyleSheet("")
        self.label_title.setAlignment(QtCore.Qt.AlignCenter)
        self.label_title.setObjectName("label_title")
        #self.gridLayout_2.addWidget(self.label_title, 1, 0, 1, 1)
        self.gridLayout_2.addWidget(self.label_title, 1, 1, 1, 1, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.verticalLayout_11.addLayout(self.gridLayout_2)
        self.verticalLayout_6.addWidget(self.frame_2)
        self.frame_3 = QtWidgets.QFrame(self.page_widgets)
        self.frame_3.setMinimumSize(QtCore.QSize(0, 150))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_12.setSpacing(0)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.frame = QtWidgets.QFrame(self.frame_3)
        self.frame.setStyleSheet("border-radius: 5px;")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.frame_content_wid_1 = QtWidgets.QFrame(self.frame)
        self.frame_content_wid_1.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_content_wid_1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_content_wid_1.setObjectName("frame_content_wid_1")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.frame_content_wid_1)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.label = QtWidgets.QLabel(self.frame_content_wid_1)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.comboBox_2 = QtWidgets.QComboBox(self.frame_content_wid_1)
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("DECODED")
        self.comboBox_2.addItem("ENCODED")
        self.comboBox_2.addItem("PARTIAL")
        item = 0
        self.comboBox_2.setCurrentIndex(item)
        self.comboBox_2.currentIndexChanged.connect(self.selectionchange_2)
        self.gridLayout.addWidget(self.comboBox_2, 0, 1, 1, 1)
        self.horizontalLayout_3.addLayout(self.gridLayout)
        self.horizontalLayout_9.addLayout(self.horizontalLayout_3)
        self.verticalLayout_13.addWidget(self.frame_content_wid_1)
        self.frame_content_wid_3 = QtWidgets.QFrame(self.frame)
        self.frame_content_wid_3.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_content_wid_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_content_wid_3.setObjectName("frame_content_wid_3")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout(self.frame_content_wid_3)
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.gridLayout_5 = QtWidgets.QGridLayout()
        self.gridLayout_5.setContentsMargins(-1, -1, -1, 0)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.comboBox = QtWidgets.QComboBox(self.frame_content_wid_3)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem('GPS_LNAV')
        self.comboBox.addItem('GPS_CNAV2')
        self.comboBox.addItem('GPS_CNAV')
        self.comboBox.addItem('GLONASS_NAV')
        self.comboBox.addItem('GALILEO_INAV')
        self.comboBox.addItem('GALILEO_FNAV')
        self.comboBox.addItem('GALILEO_CNAV')
        self.comboBox.addItem('BEIDOU_D1_NAV')
        self.comboBox.addItem('BEIDOU_D2_NAV')
        self.comboBox.addItem('BEIDOU_CNAV1')
        self.comboBox.addItem('BEIDOU_CNAV2')
        self.comboBox.addItem('SBAS_NAV')
        self.comboBox.addItem('QZSS_LNAV')
        self.comboBox.addItem('QZSS_CNAV')
        self.comboBox.addItem('QZSS_CNAV2')
        self.comboBox.addItem('QZSS_SLAS')
        self.comboBox.addItem('QZSS_CLAS')
        self.comboBox.addItem('NAVIC_NAV')
        self.comboBox.addItem('NAVIC_L1')
        self.comboBox.currentIndexChanged.connect(self.selectionchange)

        self.gridLayout_5.addWidget(self.comboBox, 0, 1, 1, 1)
        self.label_16 = QtWidgets.QLabel(self.frame_content_wid_3)
        self.label_16.setObjectName("label_16")
        self.gridLayout_5.addWidget(self.label_16, 0, 0, 1, 1)
        self.horizontalLayout_14.addLayout(self.gridLayout_5)
        self.verticalLayout_13.addWidget(self.frame_content_wid_3)
        self.save_btn = QtWidgets.QPushButton(self.frame)
        self.save_btn.setObjectName("save_btn")
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(9)
        self.save_btn.setFont(font)
        self.save_btn.setStyleSheet("Qsave_btn {\n"
                                      "    border: 2px solid rgb(52, 59, 72);\n"
                                      "    border-radius: 5px;    \n"
                                      "    background-color: rgb(52, 59, 72);\n"
                                      "}\n"
                                      "Qsave_btn:hover {\n"
                                      "    background-color: rgb(57, 65, 80);\n"
                                      "    border: 2px solid rgb(61, 70, 86);\n"
                                      "}\n"
                                      "Qsave_btn:pressed {    \n"
                                      "    background-color: rgb(35, 40, 49);\n"
                                      "    border: 2px solid rgb(43, 50, 61);\n"
                                      "}")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/16x16/icons/16x16/cil-folder-open.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.save_btn.setIcon(icon3)
        self.save_btn.setObjectName("save_btn")
        self.save_btn.clicked.connect(self.on_file_saved)
        self.verticalLayout_13.addWidget(self.save_btn)

        self.status_lbl = QtWidgets.QLabel(self.frame)
        self.status_lbl.setFont(font)
        self.status_lbl.setFrameShadow(QtWidgets.QFrame.Raised)
        self.status_lbl.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignHCenter)
        self.status_lbl.setObjectName("status_lbl")
        self.verticalLayout_13.addWidget(self.status_lbl)

        self.horizontalLayout_12.addWidget(self.frame)
        self.verticalLayout_6.addWidget(self.frame_3)
        self.stackedWidget.addWidget(self.page_widgets)
        self.verticalLayout_9.addWidget(self.stackedWidget)
        self.verticalLayout_4.addWidget(self.frame_content)
        self.frame_grip = QtWidgets.QFrame(self.frame_content_right)
        self.frame_grip.setMinimumSize(QtCore.QSize(0, 25))
        self.frame_grip.setMaximumSize(QtCore.QSize(16777215, 25))
        self.frame_grip.setStyleSheet("background-color: rgb(33, 37, 43);")
        self.frame_grip.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_grip.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_grip.setObjectName("frame_grip")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame_grip)
        self.horizontalLayout_6.setContentsMargins(0, 0, 2, 0)
        self.horizontalLayout_6.setSpacing(0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.frame_label_bottom = QtWidgets.QFrame(self.frame_grip)
        self.frame_label_bottom.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_label_bottom.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_label_bottom.setObjectName("frame_label_bottom")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.frame_label_bottom)
        self.horizontalLayout_7.setContentsMargins(10, 0, 10, 0)
        self.horizontalLayout_7.setSpacing(0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_credits = QtWidgets.QLabel(self.frame_label_bottom)
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        self.label_credits.setFont(font)
        self.label_credits.setStyleSheet("color: rgb(98, 103, 111);")
        self.label_credits.setObjectName("label_credits")
        self.horizontalLayout_7.addWidget(self.label_credits)
        self.label_version = QtWidgets.QLabel(self.frame_label_bottom)
        self.label_version.setMaximumSize(QtCore.QSize(100, 16777215))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        self.label_version.setFont(font)
        self.label_version.setStyleSheet("color: rgb(98, 103, 111);")
        self.label_version.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_version.setObjectName("label_version")
        self.horizontalLayout_7.addWidget(self.label_version)
        self.horizontalLayout_6.addWidget(self.frame_label_bottom)
        self.frame_size_grip = QtWidgets.QFrame(self.frame_grip)
        self.frame_size_grip.setMaximumSize(QtCore.QSize(20, 20))
        self.frame_size_grip.setStyleSheet("QSizeGrip {\n"
"    background-image: url(:/16x16/icons/16x16/cil-size-grip.png);\n"
"    background-position: center;\n"
"    background-repeat: no-reperat;\n"
"}")
        self.frame_size_grip.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_size_grip.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_size_grip.setObjectName("frame_size_grip")
        self.horizontalLayout_6.addWidget(self.frame_size_grip)
        self.verticalLayout_4.addWidget(self.frame_grip)
        self.horizontalLayout_2.addWidget(self.frame_content_right)
        self.verticalLayout.addWidget(self.frame_center)
        self.horizontalLayout.addWidget(self.frame_main)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def load_file(self):

        self.testfname, _filter = QtWidgets.QFileDialog.getOpenFileName(None, "Open " + " DATA Files", ".",
                                                                        "(*.csv *.txt)")
        if self.testfname:
            self.lineEdit_5.setText(self.testfname)
            return self.testfname
            # base = os.path.basename(self.model_filename)
            # file_extension = os.path.splitext(base)[1]
            # if file_extension == ".ant":
            #     self.file_path_1.setText(self.model_filename)
            #     self.ant_filename = self.model_filename
            #     self.convert_1()
            # else:
            #     self.ant_filename = ""
            #
            # if file_extension == ".csv":
            #     self.file_path_2.setText(self.model_filename)
            #     self.csv_filename = self.model_filename
            #     self.convert_2()
            # else:
            #     self.csv_filename = ""
        else:
            QMessageBox.about(self, "Load file error", "File not found.")


    def selectionchange_2(self, val):

        if val == 0:
            self.decoder_str = "DECODED"
            self.comboBox.clear()
            self.comboBox.addItem('GPS_LNAV')
            self.comboBox.addItem('GPS_CNAV2')
            self.comboBox.addItem('GPS_CNAV')
            self.comboBox.addItem('GLONASS_NAV')
            self.comboBox.addItem('GALILEO_INAV')
            self.comboBox.addItem('GALILEO_FNAV')
            self.comboBox.addItem('GALILEO_CNAV')
            self.comboBox.addItem('BEIDOU_D1_NAV')
            self.comboBox.addItem('BEIDOU_D2_NAV')
            self.comboBox.addItem('BEIDOU_CNAV1')
            self.comboBox.addItem('BEIDOU_CNAV2')
            self.comboBox.addItem('SBAS_NAV')
            self.comboBox.addItem('QZSS_LNAV')
            self.comboBox.addItem('QZSS_SLAS')
            self.comboBox.addItem('QZSS_CLAS')
            self.comboBox.addItem('NAVIC_NAV')
            self.comboBox.addItem('NAVIC_L1')

        elif val == 1:
            self.decoder_str = "ENCODED"
            self.comboBox.clear()
            self.comboBox.addItem('GPS_LNAV')
            self.comboBox.addItem('GPS_CNAV2')
            self.comboBox.addItem('BEIDOU_D1_NAV')
            self.comboBox.addItem('BEIDOU_D2_NAV')
            self.comboBox.addItem('BEIDOU_CNAV1')
            self.comboBox.addItem('BEIDOU_CNAV2')
            self.comboBox.addItem('QZSS_LNAV')

        else:
            self.decoder_str = "PARTIAL"
            self.comboBox.clear()
            self.comboBox.addItem('GPS_CNAV2')

        return self.decoder_str
    def selectionchange(self, val):

        if self.decoder_str == "DECODED":

            if val == 0:
                self.nav_fam = 'GPS_LNAV'

            if val == 1:
                self.nav_fam = 'GPS_CNAV2'

            if val == 2:
                self.nav_fam = 'GPS_CNAV'

            if val == 3:
                self.nav_fam = 'GLONASS_NAV'

            if val == 4:
                self.nav_fam = 'GALILEO_INAV'

            if val == 5:
                self.nav_fam = 'GALILEO_FNAV'

            if val == 6:
                self.nav_fam = 'GALILEO_CNAV'

            if val == 7:
                self.nav_fam = 'BEIDOU_D1_NAV'

            if val == 8:
                self.nav_fam = 'BEIDOU_D2_NAV'

            if val == 9:
                self.nav_fam = 'BEIDOU_CNAV1'

            if val == 10:
                self.nav_fam = 'BEIDOU_CNAV2'

            if val == 11:
                self.nav_fam = 'SBAS_NAV'

            if val == 12:
                self.nav_fam = 'QZSS_LNAV'

            if val == 13:
                self.nav_fam = 'QZSS_SLAS'

            if val == 14:
                self.nav_fam = 'QZSS_CLAS'

            if val == 15:
                self.nav_fam = 'NAVIC_NAV'

            if val == 16:
                self.nav_fam = 'NAVIC_L1'

        elif self.decoder_str == "ENCODED":
            if val == 0:
                self.nav_fam = 'GPS_LNAV'

            if val == 1:
                self.nav_fam = 'GPS_CNAV2'

            if val == 2:
                self.nav_fam = 'BEIDOU_D1_NAV'

            if val == 3:
                self.nav_fam = 'BEIDOU_D2_NAV'

            if val == 4:
                self.nav_fam = 'BEIDOU_CNAV1'

            if val == 5:
                self.nav_fam = 'BEIDOU_CNAV2'

            if val == 6:
                self.nav_fam = 'QZSS_LNAV'
        else:
            if val == 0:
                self.nav_fam = 'GPS_LNAV'

        return self.nav_fam

    def output_path(self, out_str):
        options = QtWidgets.QFileDialog.Options()
        fileName, _ = QtWidgets.QFileDialog.getSaveFileName(None, "QFileDialog.getSaveFileName()", str("Downlink" + "_" + out_str), "All Files (*);;Text Files (*.csv)", options=options)

        if fileName:
            return fileName
        else:
            self.is_folder = 0

    def on_file_saved(self):
        # options = QFileDialog.Options()
        # fileName, _ = QFileDialog.getSaveFileName(self, "QFileDialog.getSaveFileName()", "Decoded_Nav", "All Files (*);;Text Files (*.csv)", options=options)
        #
        # if fileName:
        #     return fileName
        # else:
        #     pass

        decoder_func = SkydelDecoder()
        decoders = decoder_func.get_decoders()

        input = self.testfname
        decoder = self.comboBox_2.currentText()
        print("decoder:", decoder)
        nav_msg_family = self.comboBox.currentText()
        print("nav family:", nav_msg_family)

        out_str = decoder + "_" + nav_msg_family
        output_file = self.output_path(out_str)
        output = decoder_func.get_output(output_file)
        decoder_func.write_decoded_downlink(input, output, decoders, decoder, nav_msg_family)

        output.close()
        self.status_lbl.setText("Done!")

    def get_args(self):
        input_file = self.testfname
        return input_file

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        #self.label_4.setText(_translate("MainWindow", "Input file"))
        self.label_title.setText(_translate("MainWindow", "Skydel Downlink Parser"))
        self.label.setText(_translate("MainWindow", "DECODER"))
        self.label_16.setText(_translate("MainWindow", "Nav Message"))
        self.save_btn.setText(_translate("MainWindow", "Save Output File"))
        self.label_credits.setText(_translate("MainWindow", "Registered by : Skydel"))
        self.label_version.setText(_translate("MainWindow", "v24.4.0"))
        self.selct_file_btn.setText(_translate("MainWindow", "Select file"))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    decoder_ui = Ui_MainWindow()
    decoder_ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

